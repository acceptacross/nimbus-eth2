{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"The Nimbus Guide","text":"<p>Nimbus is a client for the Ethereum network that is lightweight, secure and easy to use.</p> <p>Its efficiency and low resource consumption allows it to perform well on all kinds of systems: ranging from Raspberry Pi and mobile devices \u2014 where it contributes to low power consumption and security \u2014 to powerful servers where it leaves resources free to perform other tasks.</p> <p>This book describes the consensus protocol implementation which includes a beacon node, validator client and light client.</p> <p>An execution client is also under development - see its quickstart guide.</p> <p>Our companion project fluffy connects to the Ethereum portal network and has its own guide.</p>"},{"location":"index.html#feature-highlights","title":"Feature highlights","text":"<ul> <li>Beacon node with integrated validator client, slashing protection and doppelganger detection</li> <li>Stand-alone validator client with sentry node support</li> <li>Fast Beacon and KeyManager APIs with extensions</li> <li>Web3Signer remote signing</li> <li>Validator monitoring and performance analysis tooling</li> <li>External block builder (PBS / mev-boost) support with execution client fallback</li> <li>Light consensus client for running an execution client without a full beacon node</li> </ul>"},{"location":"index.html#design-goals","title":"Design goals","text":"<p>One of our most important design goals is an application architecture that makes it simple to embed Nimbus into other software.</p> <p>Another goal is to minimize reliance on third-party software.</p> <p>A third one is for the application binary to be as lightweight as possible in terms of resources used.</p>"},{"location":"index.html#integration-with-status","title":"Integration with Status","text":"<p>I can't wait to run Nimbus straight from Status Desktop #hyped</p>\u2014 JARRA\u00d0 HOP\u039e (@jarradhope) August 12, 2020 <p>As part of our first design goal, our primary objective here is for Nimbus to be tightly integrated into the Status messaging app.</p> <p>Our dream is for you to be able to run and monitor your validator straight from Status desktop.</p>"},{"location":"index.html#book-contents","title":"Book contents","text":"<p>You can read this book from start to finish, or you might want to read just specific topics you're interested in:</p> <ul> <li>If you're eager to get started, the quickstart guide is for you.</li> <li>Coming from a different client? Check out the migration guide.</li> <li>Visualize the important metrics with Grafana and Prometheus.</li> <li>Interested in becoming a validator? Follow the validator guide.</li> <li>If you're not planning on becoming a validator, you can run the light client.</li> </ul>"},{"location":"index.html#get-in-touch","title":"Get in touch","text":"<p>Need help with anything? Join us on Status and Discord.</p>"},{"location":"index.html#donate","title":"Donate","text":"<p>If you'd like to contribute to Nimbus development:</p> <ul> <li>Our donation address is <code>0xDeb4A0e8d9a8dB30a9f53AF2dCc9Eb27060c6557</code></li> <li>We're also listed on GitCoin</li> </ul>"},{"location":"index.html#stay-updated","title":"Stay updated","text":"<p>Subscribe to our newsletter here.</p>"},{"location":"index.html#disclaimer","title":"Disclaimer","text":"<p>This documentation assumes Nimbus is in its ideal state. The project is still under active development. Please submit a Github issue if you come across a problem.</p>"},{"location":"additional-validator.html","title":"Add an additional validator","text":"<p>To add an additional validator, generate a new key then follow the same steps as you did when adding your other keys.</p> <p>You'll have to restart the beacon node for the changes to take effect.</p> <p>Tip</p> <p>A single Nimbus instance is able to handle multiple validators.</p>"},{"location":"api.html","title":"JSON-RPC API (deprecated)","text":"<p>Warning</p> <p>As of v22.6.0, the Nimbus JSON-RPC interface has been removed following an extended deprecation period.  You are encouraged to migrate your applications to the REST API.</p> <p>The JSON-RPC API pre-dated the REST API and was based on early designs of the beacon chain.</p> <p>This guide is kept for historical reference, as well as to aid migration.</p>"},{"location":"api.html#beacon-chain-api","title":"Beacon chain API","text":""},{"location":"api.html#get_v1_beacon_genesis","title":"<code>get_v1_beacon_genesis</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_genesis\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/beacon/genesis -s | jq\n</code></pre>"},{"location":"api.html#get_v1_beacon_states_root","title":"<code>get_v1_beacon_states_root</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_states_root\",\"params\":[\"finalized\"],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/beacon/states/finalized/root -s | jq\n</code></pre>"},{"location":"api.html#get_v1_beacon_states_fork","title":"<code>get_v1_beacon_states_fork</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_states_fork\",\"params\":[\"finalized\"],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/beacon/states/finalized/fork -s | jq\n</code></pre>"},{"location":"api.html#get_v1_beacon_states_finality_checkpoints","title":"<code>get_v1_beacon_states_finality_checkpoints</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_states_finality_checkpoints\",\"params\":[\"finalized\"],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/beacon/states/finalized/finality_checkpoints -s | jq\n</code></pre>"},{"location":"api.html#get_v1_beacon_states_stateid_validators","title":"<code>get_v1_beacon_states_stateId_validators</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_states_stateId_validators\",\"params\":[\"finalized\"],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/beacon/states/finalized/validators -s | jq\n</code></pre>"},{"location":"api.html#get_v1_beacon_states_stateid_validators_validatorid","title":"<code>get_v1_beacon_states_stateId_validators_validatorId</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_states_stateId_validators_validatorId\",\"params\":[\"finalized\", \"100167\"],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/beacon/states/finalized/validators/100167 -s | jq\n</code></pre>"},{"location":"api.html#get_v1_beacon_states_stateid_validator_balances","title":"<code>get_v1_beacon_states_stateId_validator_balances</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_states_stateId_validator_balances\",\"params\":[\"finalized\"],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/beacon/states/finalized/validator_balances -s | jq\n</code></pre>"},{"location":"api.html#get_v1_beacon_states_stateid_committees_epoch","title":"<code>get_v1_beacon_states_stateId_committees_epoch</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_states_stateId_committees_epoch\",\"params\":[\"finalized\"],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/beacon/states/finalized/committees -s | jq\n</code></pre>"},{"location":"api.html#get_v1_beacon_headers","title":"<code>get_v1_beacon_headers</code>","text":""},{"location":"api.html#get_v1_beacon_headers_blockid","title":"<code>get_v1_beacon_headers_blockId</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_headers_blockId\",\"params\":[\"finalized\"],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/beacon/headers/finalized -s | jq\n</code></pre>"},{"location":"api.html#post_v1_beacon_blocks","title":"<code>post_v1_beacon_blocks</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"post_v1_beacon_blocks\",\"params\":[{\"message\":{\"slot\":\"1\",\"proposer_index\":\"1\",\"parent_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"state_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"body\":{\"randao_reveal\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"eth1_data\":{\"deposit_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"deposit_count\":\"1\",\"block_hash\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"graffiti\":\"string\",\"proposer_slashings\":[{\"signed_header_1\":{\"message\":{\"slot\":\"1\",\"proposer_index\":\"1\",\"parent_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"state_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"body_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"},\"signed_header_2\":{\"message\":{\"slot\":\"1\",\"proposer_index\":\"1\",\"parent_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"state_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"body_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"}}],\"attester_slashings\":[{\"attestation_1\":{\"attesting_indices\":[\"1\"],\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"data\":{\"slot\":\"1\",\"index\":\"1\",\"beacon_block_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"source\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"target\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"}}},\"attestation_2\":{\"attesting_indices\":[\"1\"],\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"data\":{\"slot\":\"1\",\"index\":\"1\",\"beacon_block_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"source\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"target\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"}}}}],\"attestations\":[{\"aggregation_bits\":\"0x01\",\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"data\":{\"slot\":\"1\",\"index\":\"1\",\"beacon_block_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"source\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"target\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"}}}],\"deposits\":[{\"proof\":[\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"],\"data\":{\"pubkey\":\"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\"withdrawal_credentials\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"amount\":\"1\",\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"}}],\"voluntary_exits\":[{\"message\":{\"epoch\":\"1\",\"validator_index\":\"1\"},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"}]}},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"}],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl -X POST -d '{\"message\":{\"slot\":\"1\",\"proposer_index\":\"1\",\"parent_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"state_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"body\":{\"randao_reveal\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"eth1_data\":{\"deposit_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"deposit_count\":\"1\",\"block_hash\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"graffiti\":\"string\",\"proposer_slashings\":[{\"signed_header_1\":{\"message\":{\"slot\":\"1\",\"proposer_index\":\"1\",\"parent_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"state_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"body_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"},\"signed_header_2\":{\"message\":{\"slot\":\"1\",\"proposer_index\":\"1\",\"parent_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"state_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"body_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"}}],\"attester_slashings\":[{\"attestation_1\":{\"attesting_indices\":[\"1\"],\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"data\":{\"slot\":\"1\",\"index\":\"1\",\"beacon_block_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"source\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"target\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"}}},\"attestation_2\":{\"attesting_indices\":[\"1\"],\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"data\":{\"slot\":\"1\",\"index\":\"1\",\"beacon_block_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"source\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"target\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"}}}}],\"attestations\":[{\"aggregation_bits\":\"0x01\",\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"data\":{\"slot\":\"1\",\"index\":\"1\",\"beacon_block_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"source\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"target\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"}}}],\"deposits\":[{\"proof\":[\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"],\"data\":{\"pubkey\":\"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\"withdrawal_credentials\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"amount\":\"1\",\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"}}],\"voluntary_exits\":[{\"message\":{\"epoch\":\"1\",\"validator_index\":\"1\"},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"}]}},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"}' -H 'Content-Type: application/json' http://localhost:5052/eth/v1/beacon/blocks -s | jq\n</code></pre>"},{"location":"api.html#get_v1_beacon_blocks_blockid","title":"<code>get_v1_beacon_blocks_blockId</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_blocks_blockId\",\"params\":[\"finalized\"],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v2/beacon/blocks/finalized -s | jq\n</code></pre>"},{"location":"api.html#get_v1_beacon_blocks_blockid_root","title":"<code>get_v1_beacon_blocks_blockId_root</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_blocks_blockId_root\",\"params\":[\"finalized\"],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/beacon/blocks/finalized/root -s | jq\n</code></pre>"},{"location":"api.html#get_v1_beacon_blocks_blockid_attestations","title":"<code>get_v1_beacon_blocks_blockId_attestations</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_blocks_blockId_attestations\",\"params\":[\"finalized\"],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/beacon/blocks/finalized/attestations -s | jq\n</code></pre>"},{"location":"api.html#post_v1_beacon_pool_attestations","title":"<code>post_v1_beacon_pool_attestations</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_blocks_blockId_attestations\",\"params\":[{\"aggregation_bits\":\"0x01\",\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"data\":{\"slot\":\"1\",\"index\":\"1\",\"beacon_block_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"source\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"target\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"}}}],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl -X POST -d '[{\"aggregation_bits\":\"0x01\",\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"data\":{\"slot\":\"1\",\"index\":\"1\",\"beacon_block_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"source\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"target\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"}}}]'  -H 'Content-Type: application/json' http://localhost:5052/eth/v1/beacon/pool/attestations -s | jq\n</code></pre>"},{"location":"api.html#get_v1_beacon_pool_attester_slashings","title":"<code>get_v1_beacon_pool_attester_slashings</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_pool_attester_slashings\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/beacon/pool/attester_slashings -s | jq\n</code></pre>"},{"location":"api.html#post_v1_beacon_pool_attester_slashings","title":"<code>post_v1_beacon_pool_attester_slashings</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"post_v1_beacon_pool_attester_slashings\",\"params\":[{\"attestation_1\":{\"attesting_indices\":[\"1\"],\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"data\":{\"slot\":\"1\",\"index\":\"1\",\"beacon_block_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"source\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"target\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"}}},\"attestation_2\":{\"attesting_indices\":[\"1\"],\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"data\":{\"slot\":\"1\",\"index\":\"1\",\"beacon_block_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"source\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"target\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"}}}}],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl -X POST -d '{\"attestation_1\":{\"attesting_indices\":[\"1\"],\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"data\":{\"slot\":\"1\",\"index\":\"1\",\"beacon_block_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"source\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"target\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"}}},\"attestation_2\":{\"attesting_indices\":[\"1\"],\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"data\":{\"slot\":\"1\",\"index\":\"1\",\"beacon_block_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"source\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"target\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"}}}}' -H 'Content-Type: application/json' http://localhost:5052/eth/v1/beacon/pool/attester_slashings -s | jq\n</code></pre>"},{"location":"api.html#get_v1_beacon_pool_proposer_slashings","title":"<code>get_v1_beacon_pool_proposer_slashings</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_pool_proposer_slashings\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/beacon/pool/proposer_slashings -s | jq\n</code></pre>"},{"location":"api.html#post_v1_beacon_pool_proposer_slashings","title":"<code>post_v1_beacon_pool_proposer_slashings</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"post_v1_beacon_pool_proposer_slashings\",\"params\":[{\"signed_header_1\":{\"message\":{\"slot\":\"1\",\"proposer_index\":\"1\",\"parent_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"state_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"body_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"},\"signed_header_2\":{\"message\":{\"slot\":\"1\",\"proposer_index\":\"1\",\"parent_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"state_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"body_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"}}],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl -X POST -d '{\"signed_header_1\":{\"message\":{\"slot\":\"1\",\"proposer_index\":\"1\",\"parent_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"state_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"body_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"},\"signed_header_2\":{\"message\":{\"slot\":\"1\",\"proposer_index\":\"1\",\"parent_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"state_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"body_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"}}' -H 'Content-Type: application/json' http://localhost:5052/eth/v1/beacon/pool/proposer_slashings -s | jq\n</code></pre>"},{"location":"api.html#get_v1_beacon_pool_voluntary_exits","title":"<code>get_v1_beacon_pool_voluntary_exits</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_beacon_pool_voluntary_exits\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/beacon/pool/voluntary_exits -s | jq\n</code></pre>"},{"location":"api.html#post_v1_beacon_pool_voluntary_exits","title":"<code>post_v1_beacon_pool_voluntary_exits</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"post_v1_beacon_pool_voluntary_exits\",\"params\":[{\"message\":{\"epoch\":\"1\",\"validator_index\":\"1\"},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"}],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl -X POST -d '{\"message\":{\"epoch\":\"1\",\"validator_index\":\"1\"},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"}' -H 'Content-Type: application/json' http://localhost:5052/eth/v1/beacon/pool/voluntary_exits -s | jq\n</code></pre>"},{"location":"api.html#beacon-node-api","title":"Beacon Node API","text":""},{"location":"api.html#get_v1_node_identity","title":"<code>get_v1_node_identity</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_node_identity\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/node/identity -s | jq\n</code></pre>"},{"location":"api.html#get_v1_node_peers","title":"<code>get_v1_node_peers</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_node_peers\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/node/peers -s | jq\n</code></pre>"},{"location":"api.html#get_v1_node_peers_peerid","title":"<code>get_v1_node_peers_peerId</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_node_peers_peerId\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/node/peer/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N -s | jq\n</code></pre>"},{"location":"api.html#get_v1_node_peer_count","title":"<code>get_v1_node_peer_count</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_node_peer_count\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/node/peer_count -s | jq\n</code></pre>"},{"location":"api.html#get_v1_node_version","title":"<code>get_v1_node_version</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_node_version\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/node/version -s | jq\n</code></pre>"},{"location":"api.html#get_v1_node_syncing","title":"<code>get_v1_node_syncing</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_node_syncing\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/node/syncing -s | jq\n</code></pre>"},{"location":"api.html#get_v1_node_health","title":"<code>get_v1_node_health</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_node_health\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/node/health -s -w \"%{http_code}\"\n</code></pre>"},{"location":"api.html#validator-api","title":"Validator API","text":""},{"location":"api.html#get_v1_validator_duties_attester","title":"<code>get_v1_validator_duties_attester</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_validator_duties_attester\",\"params\":[1,[\"a7a0502eae26043d1ac39a39457a6cdf68fae2055d89c7dc59092c25911e4ee55c4e7a31ade61c39480110a393be28e8\",\"a1826dd94cd96c48a81102d316a2af4960d19ca0b574ae5695f2d39a88685a43997cef9a5c26ad911847674d20c46b75\"]],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl -X POST http://localhost:5052/eth/v1/validator/duties/attester/1 -H 'Content-Type: application/json' -d '[\"a7a0502eae26043d1ac39a39457a6cdf68fae2055d89c7dc59092c25911e4ee55c4e7a31ade61c39480110a393be28e8\"]' -s | jq\n</code></pre>"},{"location":"api.html#get_v1_validator_duties_proposer","title":"<code>get_v1_validator_duties_proposer</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"id\",\"method\":\"get_v1_validator_duties_proposer\",\"params\":[1] }' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/validator/duties/proposer/1 -s | jq\n</code></pre>"},{"location":"api.html#get_v1_validator_block","title":"<code>get_v1_validator_block</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_validator_block\",\"params\":[1,\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"0x4e696d6275732f76312e302e322d64333032633164382d73746174656f667573\"],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v2/validator/blocks/1?randao_reveal=0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505&amp;graffiti=0x4e696d6275732f76312e302e322d64333032633164382d73746174656f667573 -s | jq\n</code></pre>"},{"location":"api.html#get_v1_validator_attestation_data","title":"<code>get_v1_validator_attestation_data</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_validator_attestation_data\",\"params\":[1, 1],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/validator/attestation_data?slot=1&amp;committee_index=1 -s | jq\n</code></pre>"},{"location":"api.html#get_v1_validator_aggregate_attestation","title":"<code>get_v1_validator_aggregate_attestation</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_validator_aggregate_attestation\",\"params\":[1, \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/validator/aggregate_attestation?slot=1&amp;attestation_data_root=0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2 -s | jq\n</code></pre>"},{"location":"api.html#post_v1_validator_aggregate_and_proofs","title":"<code>post_v1_validator_aggregate_and_proofs</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"post_v1_validator_aggregate_and_proofs\",\"params\":[{\"message\":{\"aggregator_index\":\"1\",\"aggregate\":{\"aggregation_bits\":\"0x01\",\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"data\":{\"slot\":\"1\",\"index\":\"1\",\"beacon_block_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"source\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"target\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"}}},\"selection_proof\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"}],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl -X POST http://localhost:5052/eth/v1/validator/aggregate_and_proofs -H 'Content-Type: application/json' -d '[{\"message\":{\"aggregator_index\":\"1\",\"aggregate\":{\"aggregation_bits\":\"0x01\",\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\"data\":{\"slot\":\"1\",\"index\":\"1\",\"beacon_block_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\"source\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\"target\":{\"epoch\":\"1\",\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"}}},\"selection_proof\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"},\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"}]' -s | jq\n</code></pre>"},{"location":"api.html#post_v1_validator_beacon_committee_subscriptions","title":"<code>post_v1_validator_beacon_committee_subscriptions</code>","text":""},{"location":"api.html#config-api","title":"Config API","text":""},{"location":"api.html#get_v1_config_fork_schedule","title":"<code>get_v1_config_fork_schedule</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_config_fork_schedule\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/config/fork_schedule -s | jq\n</code></pre>"},{"location":"api.html#get_v1_config_spec","title":"<code>get_v1_config_spec</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_config_spec\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/config/spec -s | jq\n</code></pre>"},{"location":"api.html#get_v1_config_deposit_contract","title":"<code>get_v1_config_deposit_contract</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_config_deposit_contract\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v1/config/deposit_contract -s | jq\n</code></pre>"},{"location":"api.html#administrative-debug-api","title":"Administrative / Debug API","text":""},{"location":"api.html#get_v1_debug_beacon_states_stateid","title":"<code>get_v1_debug_beacon_states_stateId</code>","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_debug_beacon_states_stateId\",\"params\":[\"head\"],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v2/debug/beacon/states/head -s | jq\n</code></pre>"},{"location":"api.html#get_v2_debug_beacon_heads","title":"<code>get_v2_debug_beacon_heads</code>","text":"<p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/eth/v2/debug/beacon/heads -s | jq\n</code></pre>"},{"location":"api.html#nimbus-extensions","title":"Nimbus extensions","text":""},{"location":"api.html#getbeaconhead","title":"getBeaconHead","text":"<p>The latest head slot, as chosen by the latest fork choice.</p> <pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"id\",\"method\":\"getBeaconHead\",\"params\":[] }' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/nimbus/v1/beacon/head -s | jq\n</code></pre>"},{"location":"api.html#getchainhead","title":"getChainHead","text":"<p>Show chain head information, including head, justified and finalized checkpoints.</p> <pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"id\",\"method\":\"getChainHead\",\"params\":[] }' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/nimbus/v1/chain/head -s | jq\n</code></pre>"},{"location":"api.html#getnodeversion","title":"getNodeVersion","text":"<pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"getNodeVersion\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/nimbus/v1/node/version -s | jq\n</code></pre>"},{"location":"api.html#peers","title":"peers","text":"<p>Show a list of peers in PeerPool.</p> <pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"peers\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/nimbus/v1/network/peers -s | jq\n</code></pre>"},{"location":"api.html#getsyncing","title":"getSyncing","text":"<p>Shows current state of forward syncing manager.</p> <pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"getSyncing\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/nimbus/v1/syncmanager/status -s | jq\n</code></pre>"},{"location":"api.html#getnetworkpeerid","title":"getNetworkPeerId","text":"<p>Shows current node's libp2p peer identifier (PeerID).</p> <pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"getNetworkPeerId\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre>"},{"location":"api.html#getnetworkpeers","title":"getNetworkPeers","text":"<p>Shows list of available PeerIDs in PeerPool.</p> <pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"getNetworkPeers\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/nimbus/v1/network/peers -s | jq\n</code></pre>"},{"location":"api.html#getnetworkenr","title":"getNetworkEnr","text":""},{"location":"api.html#setloglevel","title":"setLogLevel","text":"<p>Set the current logging level dynamically: TRACE, DEBUG, INFO, NOTICE, WARN, ERROR or FATAL</p> <pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"id\",\"method\":\"setLogLevel\",\"params\":[\"DEBUG; TRACE:discv5,libp2p; REQUIRED:none; DISABLED:none\"] }' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl -X POST http://localhost:5052/nimbus/v1/chronicles/settings -d \"DEBUG; TRACE:discv5,libp2p; REQUIRED:none; DISABLED:none\" -s | jq\n</code></pre>"},{"location":"api.html#setgraffiti","title":"setGraffiti","text":"<p>Set the graffiti bytes that will be included in proposed blocks. The graffiti bytes can be specified as an UTF-8 encoded string or as an 0x-prefixed hex string specifying raw bytes.</p> <pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"id\",\"method\":\"setGraffiti\",\"params\":[\"Mr F was here\"] }' -H 'Content-Type: application/json' localhost:9190 -s | jq\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl -X POST http://localhost:5052/nimbus/v1/graffiti -d \"Mr F was here\" -s | jq\n</code></pre>"},{"location":"api.html#geteth1chain","title":"getEth1Chain","text":"<p>Get the list of Eth1 blocks that the beacon node is currently storing in memory.</p> <pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"id\",\"method\":\"getEth1Chain\",\"params\":[] }' -H 'Content-Type: application/json' localhost:9190 -s | jq '.result'\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/nimbus/v1/eth1/chain -s | jq\n</code></pre>"},{"location":"api.html#geteth1proposaldata","title":"getEth1ProposalData","text":"<p>Inspect the eth1 data that the beacon node would produce if it was tasked to produce a block for the current slot.</p> <pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"id\",\"method\":\"getEth1ProposalData\",\"params\":[] }' -H 'Content-Type: application/json' localhost:9190 -s | jq '.result'\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/nimbus/v1/eth1/proposal_data -s | jq\n</code></pre>"},{"location":"api.html#debug_getchronosfutures","title":"debug_getChronosFutures","text":"<p>Get the current list of live async futures in the process - compile with <code>-d:chronosFutureTracking</code> to enable.</p> <pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"id\",\"method\":\"debug_getChronosFutures\",\"params\":[] }' -H 'Content-Type: application/json' localhost:9190 -s | jq '.result | (.[0] | keys_unsorted) as $keys | $keys, map([.[ $keys[] ]])[] | @csv'\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/nimbus/v1/debug/chronos/futures -s | jq\n</code></pre>"},{"location":"api.html#debug_getgossipsubpeers","title":"debug_getGossipSubPeers","text":"<p>Get the current list of live async futures in the process - compile with <code>-d:chronosFutureTracking</code> to enable.</p> <pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"id\",\"method\":\"debug_getGossipSubPeers\",\"params\":[] }' -H 'Content-Type: application/json' localhost:9190 -s | jq '.result'\n</code></pre> <p>Equivalent call in the official REST API:</p> <pre><code>curl http://localhost:5052/nimbus/v1/debug/gossip/peers -s | jq\n</code></pre>"},{"location":"attestation-performance.html","title":"Attestation performance","text":"<p><code>ncli_db validatorPerf</code> is an advanced tool that helps you analyze the performance of your validator over time.</p> <p>The tool requires that you build nimbus from source.</p>"},{"location":"attestation-performance.html#steps","title":"Steps","text":"<p>Make sure you're in the <code>nimbus-eth2</code> repository.</p>"},{"location":"attestation-performance.html#1-build-ncli_db","title":"1. Build ncli_db","text":"<p>The first step is to build <code>ncli_db</code>: <pre><code>make ncli_db\n</code></pre></p>"},{"location":"attestation-performance.html#2-view-options","title":"2. View options","text":"<p>To view the options available to you, run: <pre><code>build/ncli_db --help\n</code></pre></p> <p>At the top you should see:</p> <pre><code>ncli_db [OPTIONS]... command\n\nThe following options are available:\n\n --db           Directory where `nbc.sqlite` is stored.\n --network      The Eth2 network preset to use.\n</code></pre> <p>Where:</p> <ul> <li> <p>The <code>network</code> can be <code>mainnet</code>, <code>holesky</code>, or <code>sepolia</code>.</p> </li> <li> <p>The default location of the <code>db</code>  is <code>build/data/shared_mainnet_0/db</code> for <code>mainnet</code>, <code>build/data/shared_holesky_0/db</code> for <code>holesky</code>, etc.</p> </li> </ul> <p>Near the bottom, you should see:</p> <pre><code>ncli_db validatorPerf [OPTIONS]...\n\nThe following options are available:\n\n --start-slot   Starting slot, negative = backwards from head [=-128 * SLOTS_PER_EPOCH.int64].\n --slots        Number of slots to run benchmark for, 0 = all the way to head [=0].\n</code></pre> <p>Use <code>start-slot</code> and <code>slots</code> to restrict the analysis on a specific block range.</p>"},{"location":"attestation-performance.html#3-run","title":"3. Run","text":"<p>To view the performance of all validators on Holesky so far across the entire block range stored in your database, run: <pre><code>build/ncli_db validatorPerf \\\n--network=holesky \\\n--db=build/data/shared_holesky_0/db\n</code></pre></p> <p>You should see output that looks like to the following:</p> <pre><code>validator_index,attestation_hits,attestation_misses,head_attestation_hits,head_attestation_misses,target_attestation_hits,target_attestation_misses,delay_avg,first_slot_head_attester_when_first_slot_empty,first_slot_head_attester_when_first_slot_not_empty\n0,128,0,127,1,128,0,1.0078125,0,3\n1,128,0,125,3,127,1,1.0078125,0,2\n2,128,0,127,1,127,1,1.0078125,0,5\n...\n</code></pre>"},{"location":"attestation-performance.html#4-adjust-to-target-a-specific-block-range","title":"4. Adjust to target a specific block range","text":"<p>To restrict the analysis to the performance between slots 0 and 128, say, run: <pre><code>build/ncli_db validatorPerf \\\n--network=holesky \\\n--db=build/data/shared_holesky_0/db \\\n--start-slot=0 \\\n--slots=128\n</code></pre></p>"},{"location":"attestation-performance.html#5-compare-my-validators-to-the-global-average","title":"5. Compare my validators to the global average","text":"<p>We'll use Paul Hauner's wonderful workbook as a template. This workbook consists of three inter-related spreadsheets: <code>Summary</code>, <code>My Validators</code>, and <code>datasource</code>.</p> <ol> <li> <p>Make a copy of the document.</p> </li> <li> <p>Remove the table entries in <code>My Validators</code> and delete everything in the <code>datasource</code> sheet.</p> </li> <li> <p>Import the output from <code>validatorPerf</code> to <code>datasource</code>.    The easiest way to do this is to pipe the output to a <code>csv</code>, remove the first few lines, and import the <code>csv</code> into <code>datasource</code>.</p> </li> <li> <p>Manually copy over your validator(s) to the <code>My Validators</code> sheet.    The easiest way to find your validator's <code>validator_index</code> is to search for it by its public key on beaconcha.in (for example, this validator's index is 115733).</p> </li> <li> <p>Go to the <code>Summary</code> page and view your results.</p> </li> </ol>"},{"location":"attestation-performance.html#resources","title":"Resources","text":"<p>The workbook's method is explained here.</p>"},{"location":"audit.html","title":"Security Audit","text":""},{"location":"audit.html#summary","title":"Summary","text":"<p>Nimbus has undergone an extensive multi-vendor (ConsenSys Diligence, NCC Group, and Trail of Bits) security assessment over a period of several months. During that process, we were notified of several issues within the codebase. These issues have been addressed, contributing significantly to the overall security of Nimbus and other applications that use its libraries.</p> <p>Additionally, as a result of the work done from our security vendors, we have incoroprated many new security processes and tooling to improve our ability to find security issues in the future.</p> <p>For more information on the issues and how they were addressed, the interested reader should direct themselves to the scoped repositories; all reported issues and their mitigations are open to the public.</p>"},{"location":"audit.html#history","title":"History","text":"<p>Back in May of 2020, Status and the Nimbus Team posted a Request for Proposal document regarding the security assessment of the nimbus-eth2 repository (formerly <code>nim-beacon-chain</code>) and its software dependencies.</p> <p>After thoroughly vetting and weighing the submitted proposals, three security vendors  were chosen to review the codebase for a timeline of approximately three months.</p> <p>The kickoff announcement can be read here.</p> <p>We separated the codebase into sub-topics with various tasks. These tasks were then broken up and assigned to the vendor(s) with the required expertise.</p> <p>The desired deliverable outcome was GitHub issues in the repositories under review, which is a shift from the standard \u201cassessment report\u201d provided by most security assessments in the space. You can view the issues here.</p> <p>To be very clear, we did not engage in this security assessment to get a stamp of approval from the security community. All of the effort put into creating this process and engaging the community was in the service of increasing the level of security and code quality of the Nimbus software.</p>"},{"location":"beacon-node-systemd.html","title":"Set up a systemd service","text":"<p>This page will take you through how to set up a <code>systemd</code> service for your beacon node.</p> <p><code>systemd</code> is used in order to have a command or a program run when your device boots (i.e. add it as a service). Once this is done, you can start/stop enable/disable from the linux prompt.</p> <p><code>systemd</code></p> <p><code>systemd</code> is a service manager designed specifically for Linux: it cannot be used on Windows / Mac. You can find out more about <code>systemd</code> here.</p> <p>Package manager installations</p> <p>When installing Nimbus via your package manager, a user and service will already have been created for you and you can skip straight to the configuration section.</p>"},{"location":"beacon-node-systemd.html#1-create-a-dedicated-user","title":"1. Create a dedicated user","text":"<p>We will start by creating a dedicated user and data directory for Nimbus. The same user can also be used for the execution client.</p> <pre><code># Create the `nimbus` group\nsudo groupadd nimbus\n\n# Create the `nimbus` user in the `nimbus` group - we will use /var/lib/nimbus as data directory.\nsudo useradd -g nimbus nimbus -m -d /var/lib/nimbus\n</code></pre>"},{"location":"beacon-node-systemd.html#2-create-the-service-file","title":"2. Create the service file","text":"<p><code>systemd</code> services are created by placing a service file in <code>/etc/systemd/system</code>, or, if Nimbus was installed by a package manager, <code>/usr/lib/systemd/system</code>.</p> <p>A good starting point is the example service file in the Nimbus repository.</p> <pre><code># Download example service file and save it to `/etc/systemd/system/nimbus_beacon_node.service`\ncurl -s https://raw.githubusercontent.com/status-im/nimbus-eth2/stable/scripts/package_src/nimbus_beacon_node/image/lib/systemd/system/nimbus_beacon_node.service | sudo tee /etc/systemd/system/nimbus_beacon_node.service &gt; /dev/null\n</code></pre> <p>The format of service files is documented in the systemd manual.</p> <p>Tip</p> <p>Automatic restarts increase the risk that the doppelganger detection fails - set <code>RestartPreventExitStatus=129</code> to prevent this from happening</p>"},{"location":"beacon-node-systemd.html#3-configure-your-service","title":"3. Configure your service","text":"<p>Services are configured either by editing the service file directly or using <code>systemctl edit</code> to create an override.</p> <pre><code># Edit the systemd file to match your installation\nsudo vi /etc/systemd/system/nimbus_beacon_node.service\n\n# If you installed nimbus via the package manager, use `systemctl edit` instead\nsudo systemctl edit nimbus_beacon_node.service\n</code></pre> <p>The service file contains several options for controlling Nimbus. Important options include:</p> <ul> <li><code>Environment=NETWORK</code>: set this to <code>mainnet</code>, <code>holesky</code> or <code>sepolia</code>, depending on which network you want to connect to</li> <li><code>Environment=WEB3_URL</code>: point this to your execution client, see the Execution Client setup guide</li> <li><code>Environment=REST_ENABLED</code>: REST is used to interact with the beacon node, in particular when setting up a separate Validator Client, see the REST API guide</li> <li><code>Environment=METRICS_ENABLED</code>: metrics are used for monitoring the node, see the metrics setup guide</li> <li><code>ExecStart=</code>: custom options, see the options guide</li> </ul> <p>Note</p> <p>The example assumes Nimbus was installed in <code>/usr/bin/nimbus_beacon_node</code>. If you installed Nimbus elsewhere, make sure to update this path.</p>"},{"location":"beacon-node-systemd.html#4-notify-systemd-of-the-newly-added-service","title":"4. Notify systemd of the newly added service","text":"<p>Every time you add or update a service, the <code>systemd</code> daemon must be notified of the changes:</p> <pre><code>sudo systemctl daemon-reload\n</code></pre>"},{"location":"beacon-node-systemd.html#4-start-the-service","title":"4. Start the service","text":"<pre><code># start the beacon node\nsudo systemctl start nimbus_beacon_node\n\n# (Optional) Set the beacon node to start automatically at boot\nsudo systemctl enable nimbus_beacon_node\n</code></pre>"},{"location":"beacon-node-systemd.html#5-check-the-status-of-the-service","title":"5. Check the status of the service","text":"<p><code>systemctl status</code> will show if your beacon node is up and running, or has stopped for some reason.</p> <pre><code>sudo systemctl status nimbus_beacon_node.service\n</code></pre> <p>You can also follow the logs using the following command:</p> <pre><code>sudo journalctl -uf nimbus_beacon_node.service\n</code></pre> <p>This will show you the Nimbus logs at the default setting \u2014 it should include regular \"slot start\" messages which will show your sync progress. Press <code>ctrl-c</code> to stop following the logs.</p> <p>To rewind logs \u2014 by one day, say \u2014 run:</p> <pre><code>sudo journalctl -u nimbus_beacon_node.service --since yesterday\n</code></pre>"},{"location":"beacon-node-systemd.html#import-validator-keys","title":"Import validator keys","text":"<p>Before you start, familiarize yourself with the standard way of importing validators.</p> <p>Make sure you use the correct data directory. Look for the <code>--data-dir</code> option in the <code>.service</code> file.</p> <p>When using a service, the beacon node is running as a different user. Look for the <code>User=</code> option in the <code>.service</code>. Here we assume that the user is called <code>nimbus</code>.</p> <p>The key import must be performed as this user in order for the key files to have the correct permission:</p> <pre><code># Run import command as the `nimbus` user\nsudo -u nimbus /usr/bin/nimbus_beacon_node deposits import --data-dir=/var/lib/nimbus/shared_mainnet_0 /path/to/keys\n</code></pre> <p>Note</p> <p>Make sure to use the same <code>--data-dir</code> option as is used in the service file! Some guides use <code>--data-dir=/var/lib/nimbus</code> instead.</p>"},{"location":"beacon-node-systemd.html#running-multiple-beacon-nodes","title":"Running multiple beacon nodes","text":"<p>You can run multiple beacon nodes on the same machine simply by copying the <code>.service</code> file and adjusting the parameters.</p> <p>When running multiple beacon nodes, make sure that each service:</p> <ul> <li>has its own <code>.service</code> file</li> <li>has its own <code>--data-dir</code></li> <li>has its own <code>--*-port</code> settings</li> </ul>"},{"location":"beacon-node-systemd.html#further-examples","title":"Further examples","text":"<ul> <li>A service template file by Pawel Bylica which allows you to start two services at the same time, e.g. <code>nimbus@holesky.service</code> and <code>nimbus@mainnet.service</code>.</li> <li>The EthereumOnARM project maintains a service file as part of their Ethereum installation package repository.</li> </ul>"},{"location":"binaries.html","title":"Binaries","text":"<p>Binary releases are available from GitHub and our APT repository (Debian/Ubuntu).</p> <p>We currently have binaries available for Linux <code>AMD64</code>, <code>ARM</code> and <code>ARM64</code>, Windows <code>AMD64</code> and macOS (<code>AMD64</code> and <code>ARM64</code>).</p> Manual installationDebian / Ubuntu <p>The latest release is always available from Github under the Assets header at the bottom of the page.</p> <p>To install or upgrade a binary release, unpack the archive appropriate for your operating system and architecture in a directory of your choice, and run the binary.</p> <pre><code># Create a directory that can hold the beacon chain data and applications - this should be a fast SSD\nmkdir -p nimbus-eth2\n# Unpack the archive into the `nimbus-eth2` directory you just created\ntar xvf nimbus-eth2_Linux_amd64_22.6.1_2444e994.tar.gz --strip-components 1 -C nimbus-eth2\n</code></pre> <p>After unpacking, you may wish to verify the checksum.</p> <p>Install Nimbus from our APT repository:</p> <pre><code># Add the nimbus repository\necho 'deb https://apt.status.im/nimbus all main' | sudo tee /etc/apt/sources.list.d/nimbus.list\n# Import the GPG key\nsudo curl https://apt.status.im/pubkey.asc -o /etc/apt/trusted.gpg.d/apt-status-im.asc\n\n# Update repository files and install Nimbus components\nsudo apt-get update\nsudo apt-get install nimbus-beacon-node nimbus-validator-client\n</code></pre> <p>Helper scripts</p> <p>When installing via package manager, replace <code>run-mainnet-beacon-node.sh</code> and similar helper scripts used in this guide with <code>nimbus_beacon_node</code>: blockchain data will be written to the default data directory unless changed with <code>--data-dir</code>.</p> <p><code>systemd</code></p> <p>Packages include <code>systemd</code> service unit files: see the systemd guide for usage instructions. The <code>nimbus</code> user is created as part of the installation process!</p>"},{"location":"binaries.html#reproducible-builds","title":"Reproducible builds","text":"<p>We've designed the build process to be reproducible. In practice, this means that anyone can verify that these exact binaries were produced from the corresponding source code commits. For more about the philosophy and importance of this feature see reproducible-builds.org.</p> <p>For instructions on how to reproduce those binaries, see \"README.md\" inside the archive, as well as the in-depth guide.</p>"},{"location":"build.html","title":"Build from source","text":"<p>Building Nimbus from source ensures that all hardware-specific optimizations are turned on. The build process itself is simple and fully automated, but may take a few minutes.</p> <p>Nim</p> <p>Nimbus is written in the Nim programming language. The correct version will automatically be downloaded as part of the build process!</p>"},{"location":"build.html#prerequisites","title":"Prerequisites","text":"<p>Make sure you have all needed build prerequisites.</p>"},{"location":"build.html#building-the-node","title":"Building the node","text":""},{"location":"build.html#1-clone-the-nimbus-eth2-repository","title":"1. Clone the <code>nimbus-eth2</code> repository","text":"<pre><code>git clone https://github.com/status-im/nimbus-eth2\ncd nimbus-eth2\n</code></pre>"},{"location":"build.html#2-run-the-beacon-node-build-process","title":"2. Run the beacon node build process","text":"<p>To build the Nimbus beacon node and its dependencies, run:</p> <pre><code>make -j4 nimbus_beacon_node\n</code></pre> <p>Tip</p> <p>Omit <code>-j4</code> on systems with 4GB of memory or less.</p> <p>This step can take several minutes. After it has finished, you can check if the installation was successful by running:</p> <pre><code>build/nimbus_beacon_node --help\n</code></pre> <p>If you see the command-line options, your installation was successful! Otherwise, don't hesitate to reach out to us in the <code>#helpdesk</code> channel of our discord.</p>"},{"location":"build.html#keeping-nimbus-updated","title":"Keeping Nimbus updated","text":"<p>When you decide to upgrade Nimbus to a newer version, make sure to follow the keeping updated guide.</p>"},{"location":"checksums.html","title":"Checksums","text":"<p>Checksums for each build are included in the release notes. Please make sure you get into the habit of verifying these \ud83d\ude4f</p> <p>For those of you who are unfamiliar, a checksum is a special type of hash used to verify the integrity of a file. Verifying a checksum ensures there was no corruption or manipulation during the download and that the file was downloaded completely and correctly. For a short and simple guide on how to do so, see here.</p> <p>In the case of the v23.11.0 release for example, the SHA512 checksums are:</p> <pre><code># Linux AMD64\n1f53f58373fa3540028ff17f2a46254f4d9236f844a01fb548359e3241bd9e9791abc3637b474b4e834a08c36d259b84032db01975944d5eb92aef4fbab14821  nimbus_beacon_node\nefd1d5f0261b30cfb7e81c3e19ae5f2e2828a1af37a6f85c3151545a1725c68003d7331390ab4b24ac583cf62ccae448755b607c4717a7ec660bb95b4981d9a3  nimbus_validator_client\n# Linux ARM64\n27a2572216afead921a3c59ab1582ba3b0a06a53c753ac46a3aee4afe0122d01e2ddc4436b2518993369db06e3eff5fab88c1613dd79f1668b55be15b77802aa  nimbus_beacon_node\n4affb3c9fb1c3fa83f99e6f806967db2a5fb1b474a4613ab4747d73fe6c0ed2e54391b6b8495cf438d50ee3b41ee46b824e4128bb4a9606e612a18bc0908998b  nimbus_validator_client\n# Linux ARM\n83b5a99eb3bc98ebfa0a6c0c609c837e3e582e03a1728487dcdcfdca937d3185c6b4ca71ca2eb835b47840ff87b965286a2266ec876f1e0cff66d71e9d87d059  nimbus_beacon_node\n9a13849a1c72ca30adf54c87abaa603f1028b82f6eec5d0f4baca0e914ae422e86b42e8b9688f8031488032aa71d8819e0ccdea76d5f43bfd02d233dced8536a  nimbus_validator_client\n# Windows AMD64\n625ac9fabc65679f484c0988ceb664c51c5e3749ac84ad90426d8029ba49590585f377f0fdeba92ff7330a43335f9068c03c09f628a44053a6c42e202b06a699  nimbus_beacon_node.exe\n78aa38439e6e6dbec7c68c33ce4e316bc06da9983409828ea61aa014d794bea968b482c954d38055f4ca36f12e8b5287d3afaa78b2c3650cb535ab1a127f30cb  nimbus_validator_client.exe\n# macOS AMD64\n9f6d4b66cc9ee5334c1675e748c0bc99a1fae55a15ed5ac4db3d6ef287bc2ebaccda85984f613991d35f7c86c87c857281ab80aace02abaf1e94828a2690085a  nimbus_beacon_node\ndf7b676f451cd9bb05c6f55c2a1eaf5f166fdc7592e1f2b6d54c81f4c0234b6788d936a872d38dd922bd6bdd54e5276bc6d032d83540e76fb93ba65fee765a21  nimbus_validator_client\n# macOS ARM64\n1a8efc60b0cdedf0f931ba15509393c268285cd8f1fe3f21f123f241c83fa79befd5bd7aaae99a43ed6a87f69a9a1a8bcef37f1b9ca2c488cbaa124725111fbd  nimbus_beacon_node\n96dd77e672aac8d92d6339b89891260d35d18d5938ae97f1126eb3f8fc86e25fafb506caf1f900479a17c762f76ad71b57bafb49d848627d2244d16075b45ee5  nimbus_validator_client\n</code></pre>"},{"location":"connect-eth2.html","title":"Connect eth2","text":"<p>This page has been removed.</p> <p>Follow our validating guide.</p>"},{"location":"contribute.html","title":"Updating this guide","text":"<p>We use Material for MkDocs to produce our documentation.</p>"},{"location":"contribute.html#before-you-start","title":"Before You Start","text":"<ol> <li>Clone the repository by <code>git clone https://github.com/status-im/nimbus-eth2.git</code>.</li> <li>Go to the <code>docs</code> folder and type <code>make</code> to install <code>mkdocs</code></li> <li>Activate mkdocs: <code>. mkdocs/bin/activate</code></li> <li>Go to where the Markdown files are located by <code>cd the_nimbus_book/</code>.</li> </ol>"},{"location":"contribute.html#real-time-update-and-preview-changes","title":"Real-Time Update and Preview Changes","text":"<ol> <li>Run <code>mkdocs serve</code> in the terminal.</li> <li>Preview the book at http://localhost:8000.</li> </ol>"},{"location":"contribute.html#build-and-deploy","title":"Build and Deploy","text":"<p>The first step is to submit a pull request to the unstable branch. Then, after it is merged, do the following under our main repository:</p> <pre><code>cd nimbus-eth2\ngit checkout unstable\ngit pull\nmake update # (This is to update the submodules to the latest version)\nmake publish-book\n</code></pre>"},{"location":"contribute.html#troubleshooting","title":"Troubleshooting","text":"<p>If you see file conflicts in the pull request, this may due to that you have created your new branch from an old version of the <code>unstable</code> branch. Update your new branch using the following commands:</p> <pre><code>git checkout unstable\ngit pull\nmake update\ngit checkout readme\ngit merge unstable\n# use something like \"git mergetool\" to resolve conflicts, then read the instructions for completing the merge (usually just a `git commit`)\n# check the output of \"git diff unstable\"\n</code></pre> <p>Thank you so much for your help to the decentralized and open source community. :)</p>"},{"location":"data-dir.html","title":"The data directory","text":"<p>Nimbus stores all the information it needs to run in a data directory. In this directory, you'll find a database, your validator keys and secrets, and several other items.</p> <p>When following the installation guide, the chain data will be stored in <code>build/data</code> with separate directories for each chain (mainnet, holesky, etc).</p> <p>The <code>--data-dir</code> option</p> <p>The <code>--data-dir=/path/to/data</code> allows picking a specific data directory to store the chain. Make sure you use the same <code>--data-dir</code> option for all beacon node commands!</p>"},{"location":"data-dir.html#contents","title":"Contents","text":"<p>Inside the data directory, you'll find several subdirectories and files containing various information about the node, chain and validators.</p> <p>You can examine the contents of the data directory using the <code>ls -l</code> command: <pre><code>cd nimbus-eth2\nls -l build/data/shared_mainnet_0\n</code></pre></p> <pre><code>-rw-r--r-- 1 nimbus nimbus 234 Jul 19 18:18 beacon_node.enr\ndrwx------ 1 nimbus nimbus  22 Jul 19 18:18 db\ndrwx------ 1 nimbus nimbus 196 Jul 19 17:36 secrets\ndrwx------ 1 nimbus nimbus 250 Jul 19 18:18 validators\n</code></pre>"},{"location":"data-dir.html#db","title":"<code>db</code>","text":"<p>The <code>db</code> folder contains historical chain data and information about the latest observed state of the chain. If you remove the <code>db</code> folder, the beacon node will have to resync.</p> <p>The growth of the database depends on the history mode.</p>"},{"location":"data-dir.html#secrets-and-validators","title":"<code>secrets</code> and <code>validators</code>","text":"<p>These two folders contain your validator keys, as well as the passwords needed to unlock them when starting the beacon node. By default, the folders are nested directly under the selected data directory, but you can alter the location through the options <code>--validators-dir</code> and <code>--secrets-dir</code>.</p> <p>Warning</p> <p>Be careful not to copy the <code>secrets</code> and <code>validator</code> folders, leaving them in two locations! Instead, always move them to the new location. Using the same validators with two nodes poses a significant slashing risk!</p> <p>For each imported validator, the validators directory includes a sub-folder named after the 0x-prefixed hex-encoded public key of the validator. The per-validator directory contains either a local keystore file with the name <code>keystore.json</code> or remote keystore file with the name <code>remote_keystore.json</code>. It may also contain the following additional configuration files:</p> <ul> <li> <p><code>suggested_fee_recipient.hex</code> - a hex-encoded execution layer address that will receive the transaction fees from blocks produced by the particular validator.</p> </li> <li> <p><code>suggested_gas_limit.json</code> - the suggested gas limit of the blocks produced by the particular validator.</p> </li> </ul> <p>For each imported validator with a local keystore, the secrets directory includes a file named after the 0x-prefixed hex-encoded public key of the validator. The contents of the file will be used as the password for unlocking the keystore. If a password file for a particular validator is missing, Nimbus obtains the password interactively from the user on start-up. If the <code>--non-interactive</code> option is specified, Nimbus considers a missing password file to be a fatal error and it will terminate with a non-zero exit code.</p>"},{"location":"data-dir.html#moving-the-data-directory","title":"Moving the data directory","text":"<p>You can move the data directory to another location or computer simply by moving its contents and updating the <code>--data-dir</code> option when starting the node.</p>"},{"location":"data-dir.html#permissions","title":"Permissions","text":"<p>To protect against key loss, Nimbus requires that files and directories be owned by the user running the application. Furthermore, they should not be readable by others.</p> <p>It may happen that the wrong permissions are applied, particularly when creating the directories manually.</p> <p>The following errors are a sign of this:</p> <ul> <li><code>Data folder has insecure ACL</code></li> <li><code>Data directory has insecure permissions</code></li> <li><code>File has insecure permissions</code></li> </ul> <p>Here is how to fix them.</p> Linux / BSD / MacOSWindows <p>Run:</p> <pre><code># Changing ownership to `user:group` for all files/directories in &lt;data-dir&gt;.\nchown user:group -R &lt;data-dir&gt;\n# Set permissions to (rwx------ 0700) for all directories starting from &lt;data-dir&gt;\nfind &lt;data-dir&gt; -type d -exec chmod 700 {} \\;\n\n# Set permissions to (rw------- 0600) for all files inside &lt;data-dir&gt;/validators\nfind &lt;data-dir&gt;/validators -type f -exec chmod 0600 {} \\;\n\n# Set permissions to (rw------- 0600) for all files inside &lt;data-dir&gt;/secrets\nfind &lt;data-dir&gt;/secrets -type f -exec chmod 0600 {} \\;\n</code></pre> <p>In sum:</p> <ul> <li> <p>Directories <code>&lt;data-dir&gt;</code>, <code>&lt;data-dir&gt;/validators</code>, <code>&lt;data-dir&gt;/secrets</code> must be owned by user and have <code>rwx------</code> or <code>0700</code>permissions set.</p> </li> <li> <p>Files stored inside <code>&lt;data-dir&gt;</code>, <code>&lt;data-dir&gt;/validators</code>, <code>/secrets</code> must be owned by user and have <code>rw------</code> or <code>0600</code> permission set.</p> </li> </ul> <p>From inside <code>Git Bash</code>, run:</p> <pre><code># Set permissions for all the directories starting from &lt;data-dir&gt;\nfind &lt;data-dir&gt; -type d -exec icacls {} /inheritance:r /grant:r $USERDOMAIN\\\\$USERNAME:\\(OI\\)\\(CI\\)\\(F\\) \\;\n\n# Set permissions for all the files inside &lt;data-dir&gt;/validators\nfind &lt;data-dir&gt;/validators -type f -exec icacls {} /inheritance:r /grant:r $USERDOMAIN\\\\$USERNAME:\\(F\\) \\;\n\n# Set permissions for all the files inside &lt;data-dir&gt;/secrets\nfind &lt;data-dir&gt;/secrets -type f -exec icacls {} /inheritance:r /grant:r $USERDOMAIN\\\\$USERNAME:\\(F\\) \\;\n</code></pre> <p>Note</p> <p>Make sure you run the above from inside <code>Git Bash</code>, these commands  will not work from inside the standard Windows Command Prompt. If you don't already have a <code>Git Bash</code> shell, you'll need to install Git for Windows.</p> <p>In sum:</p> <ul> <li> <p>Directories <code>&lt;data-dir&gt;</code>, <code>&lt;data-dir&gt;/validators</code>, <code>&lt;data-dir&gt;/secrets</code> must be owned by user and have permissions set for the user only (OI)(CI)(F). All inherited permissions should be removed.</p> </li> <li> <p>Files which are stored inside , /validators, /secrets must be owned by user and have permissions set for the user only (F). All inherited permissions should be removed."},{"location":"database-backup.html","title":"Back up your database","text":"<p>The best way to do this is to use <code>.backup</code> sqlite command:</p> <ol> <li> <p>Navigate to either <code>build/data/shared_mainnet_0/db/</code> (if you're running Holesky: <code>shared_holesky_0</code>) or the directory you supplied to the <code>--data-dir</code> argument when you launched Nimbus.</p> </li> <li> <p>Run the following command:   <pre><code>sqlite3 nbc.sqlite3 \".backup 'backup_nbc.sqlite3'\"\n</code></pre>   Make sure to correctly type both single and double quotes, as written above.</p> </li> </ol>"},{"location":"deposit.html","title":"Deposit","text":"<p>This page has been removed.</p> <p>Follow our validating guide.</p>"},{"location":"developers.html","title":"For Developers","text":"<p>This page contains tips and tricks for developers, further resources, along with information on how to set up your build environment on your platform.</p> <p>Before building Nimbus for the first time, make sure to install the prerequisites.</p>"},{"location":"developers.html#helpful-resources","title":"Helpful resources","text":"<ul> <li>Ethereum consensus spec</li> <li>Ben Edgington's annotated spec</li> <li>Vitalik's annotated spec</li> </ul>"},{"location":"developers.html#nim-programming-language","title":"Nim programming language","text":"<p>Nimbus is built in the Nim language. The compiler is automatically installed when building the project for the first time.</p> <p>More information \u2014 in particular security-related information about the language \u2014 can be found in the Auditor Handbook.</p>"},{"location":"developers.html#code-style","title":"Code style","text":"<p>The code follows the Status Nim Style Guide.</p>"},{"location":"developers.html#branch-lifecycle","title":"Branch lifecycle","text":"<p>The git repository has 3 main branches, <code>stable</code>, <code>testing</code> and <code>unstable</code> as well as feature and bugfix branches.</p>"},{"location":"developers.html#unstable","title":"Unstable","text":"<p>The <code>unstable</code> branch contains features and bugfixes that are actively being tested and worked on.</p> <ul> <li>Features and bugfixes are generally pushed to individual branches, each with their own pull request against the <code>unstable</code> branch.</li> <li>Once the branch has been reviewed and passed CI, the developer or reviewer merges the branch to <code>unstable</code>.</li> <li>The <code>unstable</code> branch is regularly deployed to the Nimbus Prater fleet where additional testing happens.</li> </ul>"},{"location":"developers.html#testing","title":"Testing","text":"<p>The <code>testing</code> branch contains features and bugfixes that have gone through CI and initial testing on the <code>unstable</code> branch and are ready to be included in the next release.</p> <ul> <li>After testing a bugfix or feature on <code>unstable</code>, the features and fixes that are planned for the next release get merged to the <code>testing</code> branch either by the release manager or team members.</li> <li>The <code>testing</code> branch is regularly deployed to the Nimbus prater fleet as well as a smaller mainnet fleet.</li> <li>The branch should remain release-ready at most times.</li> </ul>"},{"location":"developers.html#stable","title":"Stable","text":"<p>The <code>stable</code> branch tracks the latest released version of Nimbus and is suitable for mainnet staking.</p>"},{"location":"developers.html#build-system","title":"Build system","text":""},{"location":"developers.html#windows","title":"Windows","text":"<pre><code>mingw32-make # this first invocation will update the Git submodules\n</code></pre> <p>You can now follow the instructions in this this book by replacing <code>make</code> with <code>mingw32-make</code> (you should run <code>mingw32</code> regardless of whether you're running 32-bit or 64-bit architecture):</p> <pre><code>mingw32-make test # run the test suite\n</code></pre>"},{"location":"developers.html#linux-macos","title":"Linux, macOS","text":"<p>After cloning the repo:</p> <pre><code># Build nimbus_beacon_node and all the tools, using 4 parallel Make jobs\nmake -j4\n\n# Run tests\nmake test\n\n# Update to latest version\ngit pull\nmake update\n</code></pre>"},{"location":"developers.html#environment","title":"Environment","text":"<p>Nimbus comes with a build environment similar to Python venv. This helps ensure that the correct version of Nim is used and that all dependencies can be found.</p> <pre><code>./env.sh bash # start a new interactive shell with the right env vars set\nwhich nim\nnim --version # Nimbus is tested and supported on 1.2.12 at the moment\n\n# or without starting a new interactive shell:\n./env.sh which nim\n./env.sh nim --version\n\n# Start Visual Studio code with environment\n./env.sh code\n</code></pre>"},{"location":"developers.html#makefile-tips-and-tricks-for-developers","title":"Makefile tips and tricks for developers","text":"<ul> <li> <p>build all those tools known to the Makefile:   <pre><code># $(nproc) corresponds to the number of cores you have\nmake -j $(nproc)\n</code></pre></p> </li> <li> <p>build a specific tool:   <pre><code>make block_sim\n</code></pre></p> </li> <li> <p>you can control the Makefile's verbosity with the V variable (defaults to 0):   <pre><code>make V=1 # verbose\nmake V=2 test # even more verbose\n</code></pre></p> </li> <li> <p>same for the Chronicles log level:   <pre><code>make LOG_LEVEL=DEBUG bench_bls_sig_aggregation # this is the default\nmake LOG_LEVEL=TRACE nimbus_beacon_node # log everything\n</code></pre></p> </li> <li> <p>pass arbitrary parameters to the Nim compiler:   <pre><code>make NIMFLAGS=\"-d:release\"\n</code></pre></p> </li> <li> <p>you can freely combine those variables on the <code>make</code> command line:   <pre><code>make -j$(nproc) NIMFLAGS=\"-d:release\" USE_MULTITAIL=yes local-testnet-minimal\n</code></pre></p> </li> <li> <p>don't use the lightweight stack tracing implementation from nim-libbacktrace:   <pre><code>make USE_LIBBACKTRACE=0 # expect the resulting binaries to be 2-3 times slower\n</code></pre></p> </li> <li> <p>disable <code>-march=native</code> because you want to run the binary on a different machine than the one you're building it on:   <pre><code>make NIMFLAGS=\"-d:disableMarchNative\" nimbus_beacon_node\n</code></pre></p> </li> <li> <p>disable link-time optimization (LTO):   <pre><code>make NIMFLAGS=\"-d:disableLTO\" nimbus_beacon_node\n</code></pre></p> </li> <li> <p>show C compiler warnings:   <pre><code>make NIMFLAGS=\"-d:cwarnings\" nimbus_beacon_node\n</code></pre></p> </li> <li> <p>limit stack usage to 1 MiB per C function (static analysis - see the GCC docs; if LTO is enabled, it works without <code>-d:cwarnings</code>):   <pre><code>make NIMFLAGS=\"-d:limitStackUsage\" nimbus_beacon_node\n</code></pre></p> </li> <li> <p>build a static binary:   <pre><code>make NIMFLAGS=\"--passL:-static\" nimbus_beacon_node\n</code></pre></p> </li> <li> <p>publish a book using mdBook from sources in \"docs/\" to GitHub pages:   <pre><code>make publish-book\n</code></pre></p> </li> <li> <p>create a binary distribution:   <pre><code>make dist\n</code></pre></p> </li> </ul>"},{"location":"developers.html#multi-client-interop-scripts","title":"Multi-client interop scripts","text":"<p>This repository contains a set of scripts used by the client implementation teams to test interop between the clients (in certain simplified scenarios). It mostly helps us find and debug issues.</p>"},{"location":"developers.html#stress-testing-the-client-by-limiting-the-cpu-power","title":"Stress-testing the client by limiting the CPU power","text":"<pre><code>make prater CPU_LIMIT=20\n</code></pre> <p>The limiting is provided by the <code>cpulimit</code> utility, available on Linux and macOS. The specified value is a percentage of a single CPU core. Usually 1 - 100, but can be higher on multi-core CPUs.</p>"},{"location":"developers.html#build-and-run-the-local-beacon-chain-simulation","title":"Build and run the local beacon chain simulation","text":"<p>The beacon chain simulation runs several beacon nodes on the local machine, attaches several local validators to each, and builds a beacon chain between them.</p> <p>To run the simulation:</p> <pre><code>make update\nmake local-testnet-minimal\n</code></pre> <p>To clean the previous run's data:</p> <pre><code>make clean_eth2_network_simulation_all\n</code></pre> <p>To change the number of validators and nodes:</p> <pre><code># Clear data files from your last run and start the simulation with a new genesis block:\nmake VALIDATORS=192 NODES=6 USER_NODES=1 local-testnet-minimal\n</code></pre> <p>If you\u2019d like to see the nodes running on separated sub-terminals inside one big window, install Multitail (if you're on a Mac, follow the instructions here), then:</p> <pre><code>USE_MULTITAIL=\"yes\" make local-testnet-minimal\n</code></pre> <p>You\u2019ll get something like this (click for full size):</p> <p></p> <p>You can find out more about the beacon node simulation here.</p>"},{"location":"developers.html#build-and-run-the-local-state-transition-simulation","title":"Build and run the local state transition simulation","text":"<p>This simulation is primarily designed for researchers, but we'll cover it briefly here in case you're curious :)</p> <p>The state transition simulation quickly runs the beacon chain state transition function in isolation and outputs JSON snapshots of the state (directly to the <code>nimbus-eth2</code> directory). It runs without networking and blocks are processed without slot time delays.</p> <pre><code># build the state simulator, then display its help (\"-d:release\" speeds it\n# up substantially, allowing the simulation of longer runs in reasonable time)\nmake NIMFLAGS=\"-d:release\" block_sim\nbuild/block_sim --help\n</code></pre> <p>Use the output of the <code>help</code> command to pass desired values to the simulator. Experiment with changing the number of slots, validators, etc. to get different results.</p> <p>The most important options are:</p> <ul> <li><code>slots</code>: the number of slots to run the simulation for (default 192)</li> <li><code>validators</code>: the number of validators (default 6400)</li> <li><code>attesterRatio</code>: the expected fraction of attesters that actually do their work for every slot (default 0.73)</li> </ul> <p>For example, to run the block simulator for 384 slots, with 20,000 validators, and an average of 66% of attesters doing their work every slot, run:</p> <pre><code>build/block_sim --slots=384 --validators=20000 --attesterRatio=0.66\n</code></pre>"},{"location":"developers.html#sync-from-a-specific-peer","title":"Sync from a specific peer","text":"<pre><code>build/nimbus_beacon_node --no-el --discv5:off --tcp-port=9876 --direct-peer=\"/ip4/127.0.0.1/tcp/9000/p2p/$(curl -s -X 'GET' 'http://localhost:5052/eth/v1/node/identity' -H 'accept: application/json' | jq  -r .data.peer_id)\"\n</code></pre>"},{"location":"distribution_internals.html","title":"Binary distribution internals","text":""},{"location":"distribution_internals.html#reproducibility","title":"Reproducibility","text":"<p>The binaries we build in GitHub Actions and distribute in our releases come from an intricate process meant to ensure reproducibility.</p> <p>While the ability to produce the same exact binaries from the corresponding Git commits is a good idea for any open source project, it is a requirement for software that deals with digital tokens of significant value.</p>"},{"location":"distribution_internals.html#docker-containers-for-internal-use","title":"Docker containers for internal use","text":"<p>The easiest way to guarantee that users are able to replicate our binaries for themselves is to give them the same software environment we used in CI. Docker containers fit the bill, so everything starts with the architecture- and OS-specific containers in <code>docker/dist/base_image/</code>.</p> <p>These images contain all the packages we need, are built and published once (to Docker Hub), and are then reused as the basis for temporary Docker images where the <code>nimbus-eth2</code> build is carried out.</p> <p>These temporary images are controlled by Dockerfiles in <code>docker/dist/</code>. Since we're not publishing them anywhere, we can customize them to the system they run on (we ensure they use the host's UID/GID, the host's QEMU static binaries, etc); they get access to the source code through the use of external volumes.</p>"},{"location":"distribution_internals.html#build-process","title":"Build process","text":"<p>It all starts from the GitHub actions in <code>.github/workflows/release.yml</code>. There is a different job for each supported OS-architecture combination and they all run in parallel (ideally).</p> <p>Once all those CI jobs are completed successfully, a GitHub release draft is created and all the distributable archives are uploaded to it. A list of checksums for the main binaries is inserted in the release description. That draft needs to be manually published.</p> <p>The build itself is triggered by a Make target, e.g. <code>make dist-amd64</code>. This invokes <code>scripts/make_dist.sh</code> which builds the corresponding Docker container from <code>docker/dist/</code> and runs it with the Git repository's top directory as an external volume.</p> <p>The entry point for that container is <code>docker/dist/entry_point.sh</code> and that's where you'll find the Make invocations needed to finally build the software and create distributable tarballs.</p>"},{"location":"distribution_internals.html#docker-images-for-end-users","title":"Docker images for end users","text":"<p>Configured in <code>.github/workflows/release.yml</code> (only for Linux AMD64, ARM and ARM64), we unpack the distribution tarball and copy its content into a third type of Docker image \u2014 meant for end users and defined by <code>docker/dist/binaries/Dockerfile.amd64</code> (and related).</p> <p>We then publish that to Docker Hub.</p>"},{"location":"docker.html","title":"Docker images","text":"<p>Docker images for the Nimbus beacon node and the Nimbus validator client are available at docker hub.</p> <p>We have version-specific Docker tags (e.g. <code>statusim/nimbus-eth2:amd64-v1.2.3</code>) and a tag for the latest image (e.g. <code>statusim/nimbus-eth2:amd64-latest</code>).</p> <p>These images contain the same binaries as the release tarballs inside a <code>debian:bullseye-slim</code> image, running under a user imaginatively named <code>user</code>, with UID:GID of 1000:1000.</p> <p>The binaries are placed under the <code>/home/user/</code> directory which is also the default WORKDIR. The ENTRYPOINT of the image is configured to directly launch the respective binary without any extra arguments.</p>"},{"location":"docker.html#usage","title":"Usage","text":"<p>Before running Nimbus via docker, you need to prepare a data directory and mount it in docker.</p> <p>It is recommended that you mount the directory at <code>/home/user/data</code> and pass <code>--data-dir=data/beacon_node/mainnet_0</code> to all <code>nimbus_beacon_node</code> commands.</p> <pre><code>mkdir data\ndocker run -it --rm \\\n  -v ${PWD}/data:/home/user/data \\\n  statusim/nimbus-eth2:amd64-latest \\\n  --data-dir=data/beacon_node/mainnet_0\n  --network=mainnet \\\n  [other options]\n</code></pre> <p>Similarly, to launch a Nimbus validator client you can use the following command:</p> <pre><code>mkdir data\ndocker run -it --rm \\\n  -v ${PWD}/data:/home/user/data \\\n  statusim/nimbus-validator_client:amd64-latest \\\n  --data-dir=data/validator_client/mainnet_0 \\\n  [other options]\n</code></pre> <p>Warning</p> <p>Do not use the same data directory for beacon node and validator client! They will both try to load the same keys which may result in slashing.</p>"},{"location":"docker.html#docker-compose","title":"Docker compose","text":"<p>Our preferred setup is using <code>docker-compose</code>. You can use one of our example configuration files as a base for your own custom configuration:</p> <pre><code>mkdir data\ndocker-compose -f docker-compose-example1.yml up --quiet-pull --no-color --detach\n</code></pre> <p>Note</p> <p>The rather voluminous logging is done on <code>stdout</code>, so you might want to change the system-wide Docker logging defaults (which dumps everything in <code>/var/lib/docker/containers/CONTAINER_ID/CONTAINER_ID-json.log</code>) to something like <code>syslog</code>. We recommend using a log rotation system with appropriate intervals for logs of this size.</p>"},{"location":"doppelganger-detection.html","title":"Doppelganger detection","text":"<p>Doppelganger detection is a safety feature for preventing slashing in the event that two setups are using the same validator keys, for example after a migration of keys from one setup to another.</p> <p>Doppelganger detection works by monitoring network activity for a short period for each validator while preventing duties from being performed.</p> <p>If any activity is detected, the node shuts down with exit code 129.</p> <p>Because detection depends on network detection, there are cases where it may fail to find duplicate validators even though they are live. You should never use it as a mechanism for running redundant setups!</p>"},{"location":"doppelganger-detection.html#command-line","title":"Command line","text":"<p>Doppelganger detection is turned on by default - disable it with:</p> Beacon nodeValidator client <pre><code># Disable doppelganger detection\n./run-mainnet-beacon-node.sh --doppelganger-detection=off ...\n</code></pre> <pre><code># Disable doppelganger detection\nbuild/nimbus_validator_client --doppelganger-detection=off ...\n</code></pre>"},{"location":"el-light-client.html","title":"Light client","text":"<p>Warning</p> <p>The light client is currently in BETA and details around running it may change.</p> <p>The Nimbus Light Client is a light-weight alternative to running a full beacon node, when you're not planning on becoming a validator but still want to run an Ethereum execution layer client.</p> <p>Execution layer (EL) clients provide the Web3 API to expose information stored on the Ethereum blockchain. Since the merge \ud83d\udc3c, execution clients can no longer run standalone.</p>"},{"location":"el-light-client.html#comparison","title":"Comparison","text":"<p>Compared to a full beacon node, a light client has several advantages and disadvantages.</p> Feature Beacon Node Light Client Disk usage ~200GB &lt;1MB Bandwidth TBD TBD (low) Sync time Hours Seconds Head delay None 4/3 slot (15 s) Security Full Light <p>Light clients delegate full validation to other network participants and operate under a honest supermajority (&gt; 2/3) assumption among elected participants. Due to this delegation, light clients are typically behind by ~4/3 slots (~15 seconds on Ethereum mainnet).</p> <p>Note</p> <p>If you are validating, you must run a full beacon node. To use Nimbus, follow the installation instructions.</p>"},{"location":"el-light-client.html#building-from-source","title":"Building from source","text":"<p>The Nimbus light client is currently not bundled as part of the Docker images and needs to be built from source.</p>"},{"location":"el-light-client.html#1-clone-the-nimbus-eth2-repository","title":"1. Clone the <code>nimbus-eth2</code> repository","text":"<pre><code>git clone https://github.com/status-im/nimbus-eth2\ncd nimbus-eth2\n</code></pre>"},{"location":"el-light-client.html#2-run-the-build-process","title":"2. Run the build process","text":"<p>To build the Nimbus light client and its dependencies, make sure you have all prerequisites and then run:</p> <pre><code>make -j4 nimbus_light_client\n</code></pre> <p>Tip</p> <p>Omit <code>-j4</code> on systems with 4GB of memory or less.</p> <p>This may take a few minutes. When the process finishes, the <code>nimbus_light_client</code> executable can be found in the <code>build</code> subdirectory.</p>"},{"location":"el-light-client.html#pairing-with-the-el-client","title":"Pairing with the EL client","text":"<p>To ensure that only the light client can control the EL client, a file with random content (JWT secret) must be created. The format is 64 hexadecimal (0-9, a-f) characters. To create one, the following command may be used:</p> <pre><code>openssl rand -hex 32 | tr -d \"\\n\" &gt; \"$HOME/jwtsecret\"\n</code></pre> <p>Tip</p> <p>To adjust where the file is created, adjust the <code>$HOME/jwtsecret</code> portion in the command above. Also adjust other commands in this guide accordingly.</p> <p>The JWT secret must be passed to both the EL client and the light client to complete the pairing.</p>"},{"location":"el-light-client.html#running-the-el-client","title":"Running the EL client","text":"<p>In addition to the regular instructions to run an EL client, the JWT secret must be configured. The following sections explain how to do this for certain EL clients.</p> GethNethermindOthers MainnetHolesky <pre><code>geth --authrpc.jwtsecret=\"$HOME/jwtsecret\"\n</code></pre> <pre><code>geth --holesky --authrpc.jwtsecret=\"$HOME/jwtsecret\"\n</code></pre> MainnetHolesky <pre><code>nethermind --JsonRpc.JwtSecretFile=\"$HOME/jwtsecret\"\n</code></pre> <pre><code>nethermind --config holesky --JsonRpc.JwtSecretFile=\"$HOME/jwtsecret\"\n</code></pre> <p>Please consult your EL client's documentation for instructions on how to configure the JWT secret and running the EL client.</p>"},{"location":"el-light-client.html#running-the-light-client","title":"Running the light client","text":"<p>The light client starts syncing from a trusted block. This trusted block should be somewhat recent (~1-2 weeks) and needs to be configured each time when starting the light client.</p>"},{"location":"el-light-client.html#1-obtaining-a-trusted-block-root","title":"1. Obtaining a trusted block root","text":"<p>A block root may be obtained from another trusted beacon node, or from a trusted provider.</p> Trusted beacon nodeBeaconcha.in <p>The REST interface must be enabled on the trusted beacon node (<code>--rest --rest-port=5052</code> for Nimbus).</p> <pre><code>curl -s \"http://localhost:5052/eth/v1/beacon/headers/finalized\" | \\\n    jq -r '.data.root'\n</code></pre> <p>On the beaconcha.in website (Holesky), navigate to the <code>Epochs</code> section and select a recent <code>Finalized</code> epoch. Then, scroll down to the bottom of the page. If the bottom-most slot has a <code>Proposed</code> status, copy its <code>Root Hash</code>. Otherwise, for example if the bottom-most slot was <code>Missed</code>, go back and pick a different epoch.</p> <p>Warning</p> <p>Selecting a block root from an untrusted source or using an outdated block root may lead to the light client syncing to an unexpected state. If that happens, stop the light client and restart it with a new trusted block root. Depending on the EL client, its database must be deleted and sync restarted from scratch.</p>"},{"location":"el-light-client.html#2-starting-the-light-client","title":"2. Starting the light client","text":"<p>To start the light client, run the following commands (inserting your own trusted block root):</p> MainnetHolesky <pre><code>TRUSTED_BLOCK_ROOT=0x1234567890123456789012345678901234567890123456789012345678901234\nbuild/nimbus_light_client \\\n    --web3-url=http://127.0.0.1:8551 --jwt-secret=\"$HOME/jwtsecret\" \\\n    --trusted-block-root=$TRUSTED_BLOCK_ROOT\n</code></pre> <pre><code>TRUSTED_BLOCK_ROOT=0x1234567890123456789012345678901234567890123456789012345678901234\nbuild/nimbus_light_client --network=holesky \\\n    --web3-url=http://127.0.0.1:8551 --jwt-secret=\"$HOME/jwtsecret\" \\\n    --trusted-block-root=$TRUSTED_BLOCK_ROOT\n</code></pre> <p>Tip</p> <p>The light client can be left running in the background. Note that a new trusted block root is required when restarting.</p>"},{"location":"el-light-client.html#observing-the-sync-process","title":"Observing the sync process","text":"<p>After a while, the light client will pick up beacon block headers from the Ethereum network and start informing the EL client about the latest data. You should see logs similar to the following:</p>"},{"location":"el-light-client.html#nimbus","title":"Nimbus","text":"<pre><code>NTC 2022-11-21 18:00:23.666+01:00 Starting light client                      topics=\"lightcl\" trusted_block_root=some(c092a1d110a1c8d630ac2c3fa2565813d43087f42c986855a2cd985b995a328c)\n...\nINF 2022-11-21 18:01:24.001+01:00 Slot start                                 slot=1109707 epoch=34678 sync=bootstrapping(c092a1d110a1c8d630ac2c3fa2565813d43087f42c986855a2cd985b995a328c) peers=5 head=fb9b64fe:0 finalized=fb9b64fe:0 delay=1ms495us\nINF 2022-11-21 18:01:24.734+01:00 Exchanged engine configuration             topics=\"eth1\" terminalTotalDifficulty=17000000000000000 terminalBlockHash=0x0000000000000000000000000000000000000000000000000000000000000000 terminalBlockNumber=0\n...\nINF 2022-11-21 18:02:48.001+01:00 Slot start                                 slot=1109714 epoch=34678 sync=bootstrapping(c092a1d110a1c8d630ac2c3fa2565813d43087f42c986855a2cd985b995a328c) peers=6 head=fb9b64fe:0 finalized=fb9b64fe:0 delay=1ms161us\nWRN 2022-11-21 18:02:53.603+01:00 Peer count low, no new peers discovered    topics=\"networking\" discovered_nodes=1 new_peers=@[] current_peers=6 wanted_peers=160\nINF 2022-11-21 18:03:00.001+01:00 Slot start                                 slot=1109715 epoch=34678 sync=bootstrapping(c092a1d110a1c8d630ac2c3fa2565813d43087f42c986855a2cd985b995a328c) peers=5 head=fb9b64fe:0 finalized=fb9b64fe:0 delay=1ms154us\nINF 2022-11-21 18:03:09.989+01:00 New LC optimistic header                   optimistic_header=\"(beacon: (slot: 1109216, proposer_index: 1813, parent_root: \\\"0871af30\\\", state_root: \\\"5c0afc98\\\"))\"\nINF 2022-11-21 18:03:09.989+01:00 New LC finalized header                    finalized_header=\"(beacon: (slot: 1109216, proposer_index: 1813, parent_root: \\\"0871af30\\\", state_root: \\\"5c0afc98\\\"))\"\nINF 2022-11-21 18:03:12.001+01:00 Slot start                                 slot=1109716 epoch=34678 sync=syncing peers=6 head=c092a1d1:1109216 finalized=c092a1d1:1109216 delay=1ms159us\nINF 2022-11-21 18:03:16.047+01:00 New LC optimistic header                   optimistic_header=\"(beacon: (slot: 1109715, proposer_index: 262, parent_root: \\\"676f4fe4\\\", state_root: \\\"2d13aa42\\\"))\"\nINF 2022-11-21 18:03:24.001+01:00 Slot start                                 slot=1109717 epoch=34678 sync=synced peers=7 head=58cae92a:1109715 finalized=c092a1d1:1109216 delay=1ms120us\nINF 2022-11-21 18:03:27.984+01:00 New LC optimistic header                   optimistic_header=\"(beacon: (slot: 1109716, proposer_index: 1281, parent_root: \\\"58cae92a\\\", state_root: \\\"de464f71\\\"))\"\nWRN 2022-11-21 18:03:31.419+01:00 Peer count low, no new peers discovered    topics=\"networking\" discovered_nodes=0 new_peers=@[] current_peers=7 wanted_peers=160\nINF 2022-11-21 18:03:36.001+01:00 Slot start                                 slot=1109718 epoch=34678 sync=synced peers=7 head=c5464508:1109716 finalized=c092a1d1:1109216 delay=1ms98us\nINF 2022-11-21 18:03:40.012+01:00 New LC optimistic header                   optimistic_header=\"(beacon: (slot: 1109717, proposer_index: 835, parent_root: \\\"c5464508\\\", state_root: \\\"13f823f8\\\"))\"\nWRN 2022-11-21 18:03:40.422+01:00 Peer count low, no new peers discovered    topics=\"networking\" discovered_nodes=1 new_peers=@[] current_peers=7 wanted_peers=160\nINF 2022-11-21 18:03:48.001+01:00 Slot start                                 slot=1109719 epoch=34678 sync=synced peers=7 head=99ab28aa:1109717 finalized=c092a1d1:1109216 delay=1ms53us\nWRN 2022-11-21 18:03:50.205+01:00 Peer count low, no new peers discovered    topics=\"networking\" discovered_nodes=0 new_peers=@[] current_peers=7 wanted_peers=160\nINF 2022-11-21 18:04:00.001+01:00 Slot start                                 slot=1109720 epoch=34678 sync=synced peers=7 head=99ab28aa:1109717 finalized=c092a1d1:1109216 delay=1ms145us\nINF 2022-11-21 18:04:03.982+01:00 New LC optimistic header                   optimistic_header=\"(beacon: (slot: 1109718, proposer_index: 1202, parent_root: \\\"99ab28aa\\\", state_root: \\\"7f7f88d2\\\"))\"\n</code></pre> <p>Note</p> <p>The light client protocol depends on consensus layer (CL) full nodes to serve additional data. As this is a new protocol, not all implementations are supporting it yet. Therefore, it may take several minutes to discover supporting peers, during which no log messages may be produced.</p> GethNethermind <pre><code>WARN [07-24|22:19:16.777] Ignoring payload with missing parent     number=12,658,012 hash=306fad..bdfd44 parent=a22dc7..093bea\nINFO [07-24|22:19:16.778] Forkchoice requested sync to new head    number=12,658,012 hash=306fad..bdfd44\nINFO [07-24|22:19:17.232] Syncing beacon headers                   downloaded=7168 left=12,650,843 eta=13m21.441s\nINFO [07-24|22:19:21.626] Syncing beacon headers                   downloaded=75201 left=0          eta=0s\nINFO [07-24|22:19:21.627] Block synchronisation started\n</code></pre> <pre><code>2022-07-24 22:09:05.0853|Received a new payload: 12657968 (0xa5eedb4e4e4b0f84238464d563b82d7dddadfc68f21cfa2bfcbbbcdb944c4b63)\n2022-07-24 22:09:05.1018|Insert block into cache without parent 12657968 (0xa5eedb...4c4b63)\n2022-07-24 22:09:05.1141|Received: ForkchoiceState: (HeadBlockHash: 0xa5eedb4e4e4b0f84238464d563b82d7dddadfc68f21cfa2bfcbbbcdb944c4b63, SafeBlockHash: 0xa5eedb4e4e4b0f84238464d563b82d7dddadfc68f21cfa2bfcbbbcdb944c4b63, FinalizedBlockHash: 0x0000000000000000000000000000000000000000000000000000000000000000) .\n2022-07-24 22:09:05.1141|Syncing... Block 0xa5eedb4e4e4b0f84238464d563b82d7dddadfc68f21cfa2bfcbbbcdb944c4b63 not found.\n</code></pre>"},{"location":"email-notifications.html","title":"Email notifications","text":"<p>You can create an account on beaconcha.in to set up email notifications in case your validator loses balance (goes offline), or gets slashed.</p> <p>Tip</p> <p>If your validator loses balance for two epochs in a row, you may want to investigate. It's a strong signal that it may be offline.</p>"},{"location":"email-notifications.html#1-sign-up-at-beaconchainregister","title":"1. Sign up at beaconcha.in/register","text":""},{"location":"email-notifications.html#2-type-your-validators-public-key-into-the-search-bar","title":"2. Type your validator's public key into the search bar","text":""},{"location":"email-notifications.html#3-click-on-the-bookmark-icon","title":"3. Click on the bookmark icon","text":""},{"location":"email-notifications.html#4-tick-the-boxes-and-select-add-to-watchlist","title":"4. Tick the boxes and select Add To Watchlist","text":""},{"location":"era-store.html","title":"Era store","text":"<p>Warning</p> <p>This feature is currently in BETA! Nodes using era files may need to be resynced as the data format is not yet considered stable.</p> <p>Era files are a long-term archival format for Ethereum data. They are used to provide an easy interchange medium that clients interested in deep ethereum history can use to recreate past states.</p> <p>Tip</p> <p>For more information about era files, see this post.</p> <p>Each era file contains the blocks of 8192 slots (~27 hours). Blocks in era files are considered finalized. Since the history no longer is subject to change, the files are suitable to be archived for long-term storage, history recreation and other uses, and can be shared using traditional mediums such as <code>http</code> and <code>bittorrent</code>.</p> <p>Nimbus can both create and use era files as a starting point to regenerate past history as well as to serve blocks.</p>"},{"location":"era-store.html#importing-era-files","title":"Importing era files","text":"<p>To import an era archive, place the files in a folder called <code>era</code> in the data directory:</p> <pre><code># Go to the nimbus directory\ncd build/data/shared_mainnet_0\n\n# Create era directory\nmkdir -p era\n\n# Download era store from era provider\nwget --no-parent  -A '*.era' -q --show-progress -nd -r -c https://provider/era\n</code></pre> <p>With the era files present, perform a trusted node sync to complete the import, possibly with <code>--reindex</code> in order to create an archive node.</p>"},{"location":"era-store.html#generating-era-files","title":"Generating era files","text":"<p>To generate era files, you need to first build Nimbus from source and sync the node using full sync. A checkpoint-synced node can be used to generate era files from the checkpoint onwards.</p> <p>After that, build the additional <code>ncli_db</code> tool:</p> <pre><code>make ncli_db\n</code></pre> <p>The era export tool works by reading an existing Nimbus database and creating an era store. Every time the tool is run, it will check the existing store and export any new data to it.</p> <pre><code># Go to the data directory of nimbus (the directory passed to --data-dir)\ncd build/data/shared_mainnet_0/\n\n# Create a directory for the era store\nmkdir -p era\ncd era\n\n# Launch the era export\n../../../ncli_db exportEra --db:../db\n</code></pre> <p>The first time the export is run, full history is exported which may take some time. Subsequent runs will top up the era store with new blocks.</p> <p>It is recommended to set up a cron job or a timer, and run the export command every hour - doing so will ensure that era files are created on a timely basis.</p> <p>Tip</p> <p>You do not need to stop Nimbus to generate era files. It is however not recommended to run era file generation on a node that is also serving validators.</p>"},{"location":"era-store.html#sharing-era-files","title":"Sharing era files","text":"<p>Era files can be shared directly from the <code>era</code> folder using a web server, or simply by copying them to a new location.</p>"},{"location":"era-store.html#options","title":"Options","text":"<p>You can pass a custom era store location to Nimbus using <code>--era-dir</code>:</p> <pre><code>nimbus_beacon_node --era-dir:/path/to/era\n</code></pre> <p>Tip</p> <p>Multiple nimbus beacon node instances can share the same era store.</p>"},{"location":"eth1.html","title":"Run an execution client","text":"<p>In order to perform validation duties, you must have an execution client running \u2014 at least one for each beacon node. Relying on third-party services such as Infura, Alchemy and Pocket is no longer possible. Sharing the same execution client between multiple beacon nodes is not supported.</p> <p>Nimbus has been tested with all major execution clients. See the execution client comparison for more information.</p> <p>Info</p> <p>Syncing an execution client may take hours or even days, depending on your hardware!</p>"},{"location":"eth1.html#steps","title":"Steps","text":""},{"location":"eth1.html#1-install-execution-client","title":"1. Install execution client","text":"<p>Select an execution client and install it, configuring it such that that the authenticated JSON-RPC interface is enabled and a JWT secret file is created.</p> NimbusGethNethermindBesuErigon <p>See the Nimbus execution client for installation instructions.</p> <p>See the Installing Nethermind guide to set up Nethermind.</p> <p>Make sure to enable the JSON-RPC interface and pass <code>--JsonRpc.JwtSecretFile=/tmp/jwtsecret</code> to select a JWT secret file location.</p> <p>See the Besu documentation for instructions on setting up Besu.</p> <p>Make sure to enable the JSON-RPC interface and store the JWT token in <code>/tmp/jwtsecret</code>.</p> <p>See the Erigon README for instructions on setting up Erigon.</p> <p>Make sure to enable the JSON-RPC interface and use <code>--authrpc.jwtsecret=/tmp/jwtsecret</code> to set a path to the JWT token file.</p>"},{"location":"eth1.html#1-install-geth","title":"1. Install Geth","text":"<p>See the Installing Geth guide for instructions on installing Geth.</p>"},{"location":"eth1.html#2-start-geth","title":"2. Start Geth","text":"<p>Once you have geth installed, make sure to enable the authenticated JSON-RPC interface when running geth:</p> MainnetHolesky <pre><code>geth --authrpc.addr localhost --authrpc.port 8551 --authrpc.vhosts localhost --authrpc.jwtsecret /tmp/jwtsecret\n</code></pre> <pre><code>geth --holesky --authrpc.addr localhost --authrpc.port 8551 --authrpc.vhosts localhost --authrpc.jwtsecret /tmp/jwtsecret\n</code></pre>"},{"location":"eth1.html#2-leave-the-execution-client-running","title":"2. Leave the execution client running","text":"<p>The execution client needs to be running at all times in order for the beacon node to be able to support validators. It will start its syncing process as soon as the beacon node connects to it. Once both are synced, they will continue to work in tandem to validate the latest Ethereum state.</p> <p>It is safe to start the beacon node even if the execution client is not yet fully synced, and vice versa.</p>"},{"location":"eth1.html#3-pass-the-url-and-jwt-secret-to-nimbus","title":"3. Pass the URL and JWT secret to Nimbus","text":"<p>The <code>--el</code> option informs the beacon node how to connect to the execution client \u2014 both <code>http://</code> and <code>ws://</code> URLs are supported.</p> <p>Info</p> <p>By default, the execution client accepts connections on the localhost interface (<code>127.0.0.1</code>), with default authenticated RPC port <code>8551</code>. When the <code>--el</code> option is not explicitly specified, Nimbus will assume that the execution client is running on the same machine with such default settings.</p> <p>Once started, the execution client will create a file containing a JWT secret token. The token file is needed for Nimbus to authenticate itself with the execution client and perform trusted operations. You will need to pass the path to the token file to Nimbus together with the web3 URL.</p> MainnetHolesky <pre><code>./run-mainnet-beacon-node.sh \\\n  --el=http://127.0.0.1:8551 \\\n  --jwt-secret=/tmp/jwtsecret\n</code></pre> <pre><code>./run-holesky-beacon-node.sh \\\n  --el=http://127.0.0.1:8551 \\\n  --jwt-secret=/tmp/jwtsecret\n</code></pre>"},{"location":"eth1.html#upgrade-execution-client","title":"Upgrade execution client","text":"NimbusGethNethermindBesu <p>In the <code>nimbus-eth1</code> directory, run the following commands: <pre><code>git pull\nmake -j4 update\nmake -j4 nimbus\n</code></pre></p> <p>Following Geth update instructions, to update Geth you need to:</p> <ol> <li>stop the node,</li> <li>download the latest release (follow installation instructions),</li> <li>restart the node.</li> </ol> <p>There are several ways of updating Nethermind, depending on the installation method. Follow Nethermind upgrade instructions.</p> <p>Follow Besu upgrade instructions.</p>"},{"location":"eth1.html#advanced-setups","title":"Advanced setups","text":""},{"location":"eth1.html#running-multiple-execution-clients","title":"Running multiple execution clients","text":"<p>You can increase the resilience of your setup and eliminate any downtime during upgrade procedure of the execution client software by allowing your beacon node to manage multiple execution clients. To enable this mode, just specify multiple URLs through the <code>--el</code> option when starting your beacon node:</p> <pre><code>./run-mainnet-beacon-node.sh \\\n  --el=http://127.0.0.1:8551 \\\n  --el=ws://other:8551 \\\n  --jwt-secret=/tmp/jwtsecret\n</code></pre> <p>Tip</p> <p>You can use a different secret for each connection by specifying <code>jwt-secret</code> or <code>jwt-secret-file</code> as a query parameter in the anchor section of the URL (e.g. <code>http://127.0.0.1:8551/#jwt-secret=0x12345...</code> or <code>http://127.0.0.1:8551/#jwt-secret-file=/tmp/jwtsecret</code>). If you use a TOML config file, you can also use the following, more natural, syntax:</p> <pre><code>data-dir = \"my-data-dir\"\nrest = true\n...\n\n[[el]]\nurl = \"http://127.0.0.1:8551\"\njwt-secret-file=\"/path/to/jwt/file\"\n\n[[el]]\nurl = \"http://192.168.1.2:8551\"\njwt-secret = \"\"\n</code></pre> <p>As long as any of execution clients remains operational and fully synced, Nimbus will keep performing all validator duties.</p> <p>Tip</p> <p>To carry out an upgrade procedure without any downtime, just restart the execution clients one by one, waiting for each instance to re-sync before moving to the next one.</p> <p>If you use this mode with different execution client implementations, Nimbus will act as an execution layer consensus violation detector, preventing the publishing of blocks that may trigger a catastrophic partitioning in the network.</p>"},{"location":"execution-client.html","title":"Execution client","text":"<p>Pre-release software</p> <p>The Nimbus execution client is currently available as a proof of concept - all aspects of it, including resource requirements, command line interface and in particular the database format will change!</p> <p>Have fun with it and let us know how it goes while keeping the above in mind.</p> <p>If you're looking for information about setting up an execution client for validator duties or any other production usage, see the execution clients guide.</p> <p>The Nimbus execution client is a light-weight implementation of the Ethereum execution protocol. Paired with a beacon node or light client, it provides access to Ethereum blockchain for dapps and users alike via the standard Web3 API.</p>"},{"location":"execution-client.html#building-from-source","title":"Building from source","text":"<p>The Nimbus execution client is currently only provided as a source code distribution.</p>"},{"location":"execution-client.html#clone-the-nimbus-eth1-repository","title":"Clone the <code>nimbus-eth1</code> repository","text":"<pre><code>git clone https://github.com/status-im/nimbus-eth1\ncd nimbus-eth1\n</code></pre>"},{"location":"execution-client.html#run-the-build-process","title":"Run the build process","text":"<p>To build the Nimbus execution client and its dependencies, make sure you have all prerequisites and then run:</p> <pre><code>make -j4 nimbus nrpc\n</code></pre> <p>This may take a few minutes.</p> <p>When the process finishes, the <code>nimbus_execution_client</code> and <code>nrpc</code> executables can be found in the <code>build</code> subdirectory.</p>"},{"location":"execution-client.html#import-era-files","title":"Import era files","text":"<p>Syncing Nimbus requires a set of <code>era1</code> and <code>era</code> files. These can be generated from a <code>geth</code> and <code>nimbus</code> consensus client respectively or downloaded from a third-party repository.</p> <p>In addition to the era files themselves, you will need at least 200GB of free space on a fast SSD in your data directory, as set by the <code>--data-dir</code> command line option.</p> <p><code>era</code> file download locations</p> <p><code>era</code> and <code>era1</code> files for testing purposes could at the time of writing be found here - these sources may or may not be available:</p> MainnetHoleskySepolia <ul> <li>https://mainnet.era.nimbus.team/</li> <li>https://era1.ethportal.net/</li> </ul> <ul> <li>https://holesky.era.nimbus.team/</li> </ul> <p>The Holesky network does not have <code>era1</code> files since it never operated as a proof-of-work chain</p> <ul> <li>https://sepolia.era.nimbus.team/</li> <li>https://sepolia.era1.nimbus.team/</li> </ul> <p>It is recommended that you place the era files in the data directory under <code>era1</code> and <code>era</code> respectively. Era files can be shared between multiple nodes and can reside on a slow drive - use the <code>--era1-dir</code> and <code>--era-dir</code> options if they are located outside of the data directory.</p> <p>See the era file guide for more information.</p> <p>Future versions of Nimbus will support other methods of syncing</p> MainnetHoleskySepolia <p>Performing a full sync of mainnet from era files takes several days - its speed varies greatly depending on hardware. Use one of the testnets to get started more quickly!</p> <pre><code>build/nimbus_execution_client --data-dir=build/mainnet import\n</code></pre> <pre><code>build/nimbus_execution_client --network=holesky --data-dir=build/holesky import\n</code></pre> <pre><code>build/nimbus_execution_client --network=sepolia --data-dir=build/sepolia import\n</code></pre>"},{"location":"execution-client.html#launch-the-client","title":"Launch the client","text":"<p>In order for the execution client to operate, you need to connect a consensus node. This can be the Nimbus beacon node, a supported consensus client or a light client.</p> <p>The consensus node connects to the execution client via the Engine API which is enabled using <code>--engine-api</code> and by default runs on port <code>8551</code>.</p> <p>During startup, a <code>jwt.hex</code> file will be placed in the data directory containing authentication information that the consensus node uses to connect - make sure to use the same <code>jwt.hex</code> file on both consensus and execution node.</p> MainnetHoleskySepolia <pre><code>build/nimbus_execution_client --data-dir=build/mainnet --engine-api\n</code></pre> <pre><code>build/nimbus_execution_client --network=holesky --data-dir=build/holesky --engine-api\n</code></pre> <pre><code>build/nimbus_execution_client --network=sepolia --data-dir=build/sepolia --engine-api\n</code></pre>"},{"location":"execution-client.html#top-up-blocks-from-the-consensus-node","title":"Top up blocks from the consensus node","text":"<p>While era files cover the majority of chain history, Nimbus currenty relies on the consensus node to sync the most recent blocks using the <code>nrpc</code> helper.</p> <p>This method of syncing loads blocks from the consensus node and passes them to the execution client via the Engine API.</p> MainnetHoleskySepolia <pre><code># Start `nrpc` every 2 seconds in case there is a fork or the execution client goes out of sync\nwhile true; do build/nrpc sync --beacon-api=http://localhost:5052 --el-engine-api=http://localhost:8550 --jwt-secret=build/mainnet/jwt.hex; sleep 2; done\n</code></pre> <pre><code># Start `nrpc` every 2 seconds in case there is a fork or the execution client goes out of sync\nwhile true; do build/nrpc sync --network=holesky --beacon-api=http://localhost:5052 --el-engine-api=http://localhost:8550 --jwt-secret=build/holesky/jwt.hex; sleep 2; done\n</code></pre> <pre><code># Start `nrpc` every 2 seconds in case there is a fork or the execution client goes out of sync\nwhile true; do build/nrpc sync --network=sepolia --beacon-api=http://localhost:5052 --el-engine-api=http://localhost:8550 --jwt-secret=build/sepolia/jwt.hex; sleep 2; done\n</code></pre> <p>Future versions of Nimbus will support other methods of syncing</p>"},{"location":"external-block-builder.html","title":"Set up block builders / MEV","text":"<p>Nimbus supports outsourcing block production to an external block builder, thus presenting the opportunity to capture Maximal Extractable Value (MEV).</p> <p>When external block building is enabled, the beacon node connects to a service using the builder API with the execution client acting as a fallback.</p> <p>Setting up external block building typically involves running an additional service on your server which is configured to choose the best block from one or more relays and having the beacon node connect to this service.</p> <p>Warning</p> <p>External block builders introduce additional risk to the block building process which may cause loss of rewards.</p> <p>In particular, once Nimbus has signed the block header proposed by the external builder, the execution client can no longer be used as fallback, and the external builder is trusted to complete the building process.</p> <p>Note</p> <p>By default, priority and maximum gas fees determine transaction inclusion in blocks.</p> <p>External block builders may use other strategies for transaction selection, including regulatory constraints and extracted value. For further information, check the documentation of the block builder.</p>"},{"location":"external-block-builder.html#command-line","title":"Command line","text":"<p>External block building is must be enabled on both beacon node and validator client using the <code>--payload-builder=true</code> flag.</p> <p>You can use the <code>--local-block-value-boost</code> option to give preference to the best block provided by an execution client, as long as its value is within the specified percentage of the value advertised by the best external builder.</p> <p>Tip</p> <p>Setting this flag to a non-zero value is recommended due to the additional risk introduced by the usage of an external block builder.</p> <p>Additionally, the URL of the service exposing the builder API must be provided to the beacon node:</p> Mainnet Beacon NodeHolesky Beacon NodeValidator Client <pre><code>./run-mainnet-beacon-node.sh --payload-builder=true --payload-builder-url=https://${HOST}:${PORT}/\n</code></pre> <pre><code>./run-holesky-beacon-node.sh --payload-builder=true --payload-builder-url=https://${HOST}:${PORT}/\n</code></pre> <pre><code>build/nimbus_validator_client --payload-builder=true\n</code></pre>"},{"location":"external-block-builder.html#useful-resources","title":"Useful resources","text":"<ul> <li> <p>EthStaker MEV setup guide</p> </li> <li> <p>EthStaker MEV relay list</p> </li> <li> <p>Mainnet Relay Overview</p> </li> <li> <p>Holesky Relay Overview</p> </li> </ul>"},{"location":"faq.html","title":"Frequently Asked Questions","text":""},{"location":"faq.html#general","title":"General","text":""},{"location":"faq.html#can-i-run-nimbus-on-my-machine","title":"Can I run Nimbus on my machine?","text":"<p>Check our system requirements and how to prepare your machine. Note that it is also possible to run Nimbus on Raspberry Pi.</p>"},{"location":"faq.html#im-currently-using-prysm-lighthouse-teku-how-do-i-migrate-to-nimbus","title":"I'm currently using Prysm / Lighthouse / Teku, how do I migrate to Nimbus?","text":"<p>See our migration guide.</p>"},{"location":"faq.html#which-version-of-nimbus-am-i-running","title":"Which version of Nimbus am I running?","text":"<p>You can check the version through a number of methods:</p> <pre><code># Run the beacon node with the --version flag:\nbuild/nimbus_beacon_node --version\n\n# Query the metrics server - requires running with the '--metrics' option\ncurl -s http://localhost:8008/metrics | grep version\n\n# Query the REST API - requires running with the '--rest' option\ncurl -s http://localhost:9100/eth/v1/node/version\n</code></pre>"},{"location":"faq.html#how-to-upgrade-nimbus-to-a-newer-version","title":"How to upgrade Nimbus to a newer version?","text":"<p>See our upgrading guide.</p>"},{"location":"faq.html#why-are-metrics-not-working","title":"Why are metrics not working?","text":"<p>The metrics server is disabled by default. Enable it by passing <code>--metrics</code> to the run command:</p> <pre><code>build/nimbus_beacon_node --metrics ...\n</code></pre>"},{"location":"faq.html#why-is-the-rest-server-not-working","title":"Why is the REST server not working?","text":"<p>The REST server is disabled by default. Enable it by passing <code>--rest</code> to the run command:</p> <pre><code>build/nimbus_beacon_node --rest ...\n</code></pre>"},{"location":"faq.html#why-does-my-validator-miss-two-epochs-of-attestations-after-restarting","title":"Why does my validator miss two epochs of attestations after (re)starting?","text":"<p>When a validator is started (or restarted), it listens for 2 epochs for attestations from a validator with the same public key (a doppelganger), before sending an attestation itself. This is a simple way of handling the case where one validator comes online with the same key as another validator that's already online, e.g. one device was started without switching the other off.</p> <p>While this strategy requires the client to wait two whole epochs on restart before attesting, a couple of missed attestations is a very minor price to pay in exchange for significantly reducing the risk of an accidental slashing. You can think of it as a small penalty that you pay only on first launch and restarts. When you take into account the total runtime of your validator, the impact should be minimal.</p> <p>While we strongly recommend against it, you can disable doppelganger detection with an explicit flag (<code>--doppelganger-detection=false</code>) if you don't plan on moving your setup.</p>"},{"location":"faq.html#what-is-the-best-way-to-stress-test-my-executionconsensus-setup-before-committing-with-real-eth","title":"What is the best way to stress test my execution+consensus setup before committing with real ETH?","text":"<p>We recommend running a Nimbus beacon node on Holesky and a mainnet execution client on the same machine. This will simulate the load of running a mainnet validator.</p> <p>To stress test it, add <code>--subscribe-all-subnets</code> to the beacon node options. This simulates the maximum load that the consensus layer will put on the machine should you run 64 validators or more on it.</p>"},{"location":"faq.html#how-do-i-add-an-additional-validator","title":"How do I add an additional validator?","text":"<p>See the information here.</p>"},{"location":"faq.html#what-does-syncedopt-mean-in-the-slot-start-message","title":"What does <code>synced/opt</code> mean, in the \"Slot start\" message?","text":"<p>When <code>/opt</code> is present in the \"Slot start\" message, it means the node is optimistically synced and is waiting for the execution client to finish its syncing process. Until that happens, validator duties are disabled.</p>"},{"location":"faq.html#syncing-is-very-slow-can-this-be-sped-up","title":"Syncing is very slow, can this be sped up?","text":"<p>A complete sync might take several hours or even days. We recommend you to do a trusted node sync, which takes only few minutes.</p>"},{"location":"faq.html#how-can-i-automate-running-my-beacon-node","title":"How can I automate running my beacon node?","text":"<p>You can set up a systemd service. See our systemd guide.</p>"},{"location":"faq.html#folder-permissions","title":"Folder Permissions","text":"<p>To protect against key loss, Nimbus requires that files and directories be owned by the user running the application. Furthermore, they should not be readable by others.</p> <p>It may happen that the wrong permissions are applied, particularly when creating the directories manually.</p> <p>The following errors are a sign of this:</p> <ul> <li><code>Data folder has insecure ACL</code></li> <li><code>Data directory has insecure permissions</code></li> <li><code>File has insecure permissions</code></li> </ul> <p>See the data directory page for instructions on how to fix this.</p>"},{"location":"faq.html#networking","title":"Networking","text":""},{"location":"faq.html#how-can-i-improve-my-peer-count","title":"How can I improve my peer count?","text":"<p>See the networking guide.</p>"},{"location":"faq.html#how-do-i-fix-the-discovered-new-external-address-warning-log","title":"How do I fix the discovered new external address warning log?","text":"<pre><code>WRN 2021-03-15 02:23:37.569+00:00 Discovered new external address but ENR auto update is off topics=\"discv5\"...\n</code></pre> <p>It's possible that your ISP has changed your dynamic IP address without you knowing.</p> <p>The first thing to do it to try relaunching the beacon node with <code>--enr-auto-update</code> (pass it as an option in the command line).</p> <p>If this doesn't fix the problem, the next thing to do is to check your external (public) IP address and detect open ports on your connection: you can use https://www.yougetsignal.com/tools/open-ports/. Note that Nimbus <code>TCP</code> and <code>UDP</code> ports are both set to <code>9000</code> by default.</p> <p>See here for how to set up port forwarding.</p>"},{"location":"faq.html#validating","title":"Validating","text":""},{"location":"faq.html#what-exactly-is-a-validator","title":"What exactly is a validator?","text":"<p>A validator is an entity that participates in the consensus of the Ethereum protocol, and has staked 32 ETH to do so.</p> <p>Or, in plain English, a human running a computer process. This process proposes and vouches for new blocks to be added to the blockchain.</p> <p>In other words, you can think of a validator as a voter for new blocks. The more votes a block gets, the more likely it is to be added to the chain.</p> <p>Importantly, a validator's vote is weighted by the amount it has at stake.</p>"},{"location":"faq.html#do-i-need-a-separate-validator-client","title":"Do I need a separate validator client?","text":"<p>No, Nimbus doesn't require setting up a separate validator client process \u2014 the beacon node can itself perform validator duties.</p>"},{"location":"faq.html#what-is-a-deposit-contract","title":"What is a deposit contract?","text":"<p>You can think of it as a transfer of funds between Ethereum 1.0 accounts and Ethereum 2.0 validators.</p> <p>It specifies who is staking, who is validating, how much is being staked, and who can withdraw the funds.</p>"},{"location":"faq.html#why-do-validators-need-to-have-funds-at-stake","title":"Why do validators need to have funds at stake?","text":"<p>Validators need to have funds at stake so they can be penalized for behaving dishonestly. In other words: to keep them honest, their actions need to have financial consequences.</p>"},{"location":"faq.html#how-much-eth-does-a-validator-need-to-stake","title":"How much ETH does a validator need to stake?","text":"<p>Before a validator can start to secure the network, they need to stake 32 ETH. This forms the validator's initial balance.</p>"},{"location":"faq.html#is-there-any-advantage-to-having-more-than-32-eth-at-stake","title":"Is there any advantage to having more than 32 ETH at stake?","text":"<p>No, there is no advantage to having more than 32 ETH staked.</p> <p>Limiting the maximum stake to 32 ETH encourages decentralization of power as it prevents any single validator from having an excessively large vote on the state of the chain.</p> <p>Remember that a validator\u2019s vote is weighted by the amount it has at stake.</p>"},{"location":"faq.html#can-i-stop-my-validator-for-a-few-days-and-then-start-it-back-up-again","title":"Can I stop my validator for a few days and then start it back up again?","text":"<p>You can, but, under normal conditions, you will lose an amount of ETH roughly equivalent to the amount of ETH you would have gained in that period. In other words, if you stood to earn \u22480.01 ETH, you would instead be penalized \u22480.01 ETH.</p>"},{"location":"faq.html#how-can-i-keep-track-of-my-validator","title":"How can I keep track of my validator?","text":"<p>One way of keeping track is using an online service such as beaconcha.in: Mainnet or Holesky.</p> <p>Another way is to set up validator monitoring together with a dashboard to keep track of its performance.</p>"},{"location":"faq.html#i-want-to-switch-my-validator-keys-to-another-machine-how-long-do-i-need-to-wait-to-avoid-getting-slashed","title":"I want to switch my validator keys to another machine, how long do I need to wait to avoid getting slashed?","text":"<p>We recommend waiting 2 epochs (around 15 minutes), before restarting Nimbus on a different machine.</p>"},{"location":"faq.html#when-should-i-top-up-my-validators-balance","title":"When should I top up my validator's balance?","text":"<p>The answer to this question very much depends on how much ETH you have at your disposal.</p> <p>You should certainly top up if your balance is close to 16 ETH: this is to ensure you don't get removed from the validator set (which automatically happens if your balance falls below 16 ETH).</p> <p>At the other end of the spectrum, if your balance is closer to 31 ETH, it's probably not worth your while adding the extra ETH required to get back to 32.</p>"},{"location":"faq.html#when-can-i-withdraw-my-funds-and-whats-the-difference-between-exiting-and-withdrawing","title":"When can I withdraw my funds, and what's the difference between exiting and withdrawing?","text":"<p>After the Capella hard-fork, activated on 12th of April 2023, all exited validators that use <code>0x01</code> withdrawal credentials will have their funds automatically withdrawn. Please see our dedicated guide for withdrawals for further information.</p>"},{"location":"faq.html#how-are-validators-incentivized-to-stay-active-and-honest","title":"How are validators incentivized to stay active and honest?","text":"<p>In addition to being penalized for being offline, validators are penalized for behaving maliciously (for example, attesting to invalid or contradicting blocks).</p> <p>On the other hand, they are rewarded for proposing / attesting to blocks that are included in the chain.</p> <p>The key concept is the following:</p> <ul> <li>Rewards are given for actions that help the network reach consensus.</li> <li>Minor penalties are given for inadvertent actions (or inactions) that hinder consensus.</li> <li>And major penalties \u2014 or slashings \u2014 are given for malicious actions.</li> </ul> <p>In other words, validators that maximize their rewards also provide the greatest benefit to the network as a whole.</p>"},{"location":"faq.html#how-are-rewardspenalties-issued","title":"How are rewards/penalties issued?","text":"<p>Remember that each validator has its own balance, with the initial balance outlined in the deposit contract. This balance is updated periodically by the Ethereum network rules as the validator carries (or fails to carry) out his or her responsibilities.</p> <p>Put another way, rewards and penalties are reflected in the validator's balance over time.</p>"},{"location":"faq.html#how-often-are-rewardspenalties-issued","title":"How often are rewards/penalties issued?","text":"<p>Approximately every six and a half minutes \u2014 a period of time known as an epoch.</p> <p>Every epoch, the network measures the actions of each validator and issues rewards or penalties appropriately.</p>"},{"location":"faq.html#how-large-are-the-rewardspenalties","title":"How large are the rewards/penalties?","text":"<p>There is no easy answer to this question as there are many factors that go into this calculation.</p> <p>Arguably the most impactful factor on rewards earned for validating transactions is the total amount of stake in the network. In other words, the total amount of validators. Depending on this figure the max annual return rate for a validator can be anywhere between 2 and 20%.</p> <p>Given a fixed total number of validators, the rewards/penalties predominantly scale with the balance of the validator: attesting with a higher balance results in larger rewards/penalties whereas attesting with a lower balance results in lower rewards/penalties.</p> <p>Note however that this scaling mechanism works in a non-obvious way. To understand the precise details of how it works requires understanding a concept called effective balance. If you're not yet familiar with this concept, we recommend you read through this excellent post.</p>"},{"location":"faq.html#why-do-rewards-depend-on-the-total-number-of-validators-in-the-network","title":"Why do rewards depend on the total number of validators in the network?","text":"<p>Block rewards are calculated using a sliding scale based on the total amount of ETH staked on the network.</p> <p>In plain English: if the total amount of ETH staked is low, the reward (interest rate) is high, but as the total stake rises, the reward (interest) paid out to each validator starts to fall.</p> <p>Why a sliding scale? While we won't get into the gory details here, the basic intuition is that there needs to be a minimum number of validators (and hence a minimum amount of ETH staked) for the network to function properly. So, to incentivize more validators to join, it's important that the interest rate remains high until this minimum number is reached.</p> <p>Afterwards, validators are still encouraged to join (the more validators the more decentralized the network), but it's not absolutely essential that they do so (so the interest rate can fall).</p>"},{"location":"faq.html#how-badly-will-a-validator-be-penalized-for-being-offline","title":"How badly will a validator be penalized for being offline?","text":"<p>It depends. In addition to the impact of effective balance, there are two important scenarios to be aware of:</p> <ol> <li> <p>Being offline while a supermajority (2/3) of validators is still online leads to relatively small penalties as there are still enough validators online for the chain to finalize. This is the expected scenario.</p> </li> <li> <p>Being offline at the same time as more than 1/3 of the total number of validators leads to harsher penalties, since blocks do not finalize anymore. This scenario is very extreme and unlikely to happen.</p> </li> </ol> <p>Note that in the second (unlikely) scenario, validators stand to progressively lose up to 50% (16 ETH) of their stake over 21 days. After 21 days they are ejected out of the validator pool. This ensures that blocks start finalizing again at some point.</p>"},{"location":"faq.html#how-great-does-an-honest-validators-uptime-need-to-be-for-it-to-be-net-profitable","title":"How great does an honest validator's uptime need to be for it to be net profitable?","text":"<p>Overall, validators are expected to be net profitable as long as their uptime is greater than 50%.</p> <p>This means that validators don't need to go to extreme lengths with backup clients or redundant internet connections as the repercussions of being offline are not so severe.</p>"},{"location":"faq.html#how-much-will-a-validator-be-penalized-for-acting-maliciously","title":"How much will a validator be penalized for acting maliciously?","text":"<p>Again, it depends. Behaving maliciously, e.g. attesting to invalid or contradicting blocks, will lead to a validator's stake being slashed.</p> <p>If a malicious behavior is detected, 1/32 of validator's staked ether (up to a maximum of 1 ETH) is immediately slashed and a 36-day removal period begins. During this period, the validator's stake is gradually slashed and at day 18 an additional penalty is applied: the amount depends on the number of other slashed validators \u2014 the more validators are slashed, the magnitude of the slash increases.</p> <p>The idea behind this is to minimize the losses from honest mistakes, but strongly discouraging coordinated attacks.</p>"},{"location":"faq.html#what-exactly-is-slashing","title":"What exactly is slashing?","text":"<p>Slashing has two purposes:</p> <ol> <li>to make it prohibitively expensive to attack eth2, and</li> <li>to stop validators from being lazy by checking that they actually perform their duties.</li> </ol> <p>Slashing a validator is to destroy (a portion of) the validator\u2019s stake if they act in a provably destructive manner.</p> <p>Validators that are slashed are prevented from participating in the protocol further and are forcibly exited.</p>"},{"location":"faq.html#what-happens-i-lose-my-signing-key","title":"What happens I lose my signing key?","text":"<p>If the signing key is lost, the validator can no longer propose or attest.</p> <p>However, all is not lost. Assuming validators derive their keys using EIP2334 (as per the default onboarding flow) then validators can always recalculate their signing key from their withdrawal key.</p>"},{"location":"faq.html#what-happens-if-i-lose-my-withdrawal-key","title":"What happens if I lose my withdrawal key?","text":"<p>If the withdrawal key is lost, there is no way to obtain access to the funds held by the validator. As such, it's a good idea to create your keys from mnemonics which act as another backup. This will be the default for validators who join via this site's onboarding process.</p> <p>If the validator can no longer propose or attest, their balance will decrease over time as they are punished for not participating in the consensus process. When the validator's balance reaches 16 ETH, they will be automatically exited from the validator pool, and 16 ETH will be transferred to their withdrawal address (as long it's specified).</p> <p>Note</p> <p>After the Capella hard-fork, activated on 12th of April 2023, all exited validators that use <code>0x01</code> withdrawal credentials will have their funds automatically withdrawn. Please see our dedicated guide for withdrawals for further information.</p>"},{"location":"faq.html#what-happens-if-my-withdrawal-key-is-stolen","title":"What happens if my withdrawal key is stolen?","text":"<p>If the withdrawal key is stolen, the thief can transfer the validator\u2019s balance, but only once the validator has exited.</p> <p>If the signing key is not under the thief\u2019s control, the thief cannot exit the validator.</p> <p>The user with the signing key could attempt to quickly exit the validator and then transfer the funds \u2014 with the withdrawal key \u2014 before the thief.</p>"},{"location":"faq.html#why-two-keys-instead-of-one","title":"Why two keys instead of one?","text":"<p>In a nutshell, security. The signing key must be available at all times. As such, it will need to be held online. Since anything online is vulnerable to being hacked, it's not a good idea to use the same key for withdrawals.</p>"},{"location":"goerli-eth.html","title":"Obtain Goerli ETH","text":"<p>To participate in an eth2 testnet, you need to stake 32 testnet ETH. You can request this testnet ETH by joining the ethstaker discord - look for the <code>#request-goerli-eth</code> channel.</p>"},{"location":"graffiti.html","title":"Set up Graffiti","text":"<p>You can use your node's graffiti flag to include a short text in the blocks that your node creates. You will be able to see it using the block explorer.</p> <p>The graffiti can be either a string or, if you want to specify raw bytes, you can use 0x-prefixed hex value.</p>"},{"location":"graffiti.html#command-line","title":"Command line","text":"MainnetHolesky <pre><code>./run-mainnet-beacon-node.sh --graffiti=\"&lt;YOUR_WORDS&gt;\"\n</code></pre> <pre><code>./run-holesky-beacon-node.sh --graffiti=\"&lt;YOUR_WORDS&gt;\"\n</code></pre>"},{"location":"hardware.html","title":"System requirements","text":"<p>The recommended system requirements for running the Nimbus beacon node are:</p> What Recommended Operating system Linux 64-bit, Windows 64-bit, macOS 11+ Memory 4GB (running) or 8GB (building) Disk space 200GB Network Reliable broadband <p>Note</p> <p>While the consensus client will work with a classic, spinning, hard disks, if you plan to run an execution client make sure you use an SSD, either SATA or NVMe.</p>"},{"location":"hardware.html#execution-client","title":"Execution client","text":"<p>In addition to the beacon node, you will need to run an execution client. Check the documentation of the client of choice and add them to the above requirements.</p> <p>Broadly, to run both an execution and a consensus client on the same machine, we recommend a 2 TB SSD and 16 GB RAM.</p>"},{"location":"hardware.html#minimal-requirements","title":"Minimal requirements","text":"<p>Nimbus has been optimized to also run well on hardware significantly less powerful than the recommended system requirements \u2014 the more validators you run on the same node, the more hardware resources and network bandwidth will it will use.</p>"},{"location":"health.html","title":"Monitor the health of your node","text":"<p>The most important thing for the health, performance and stability of your node and the overall network is the strength of your node's network connectivity / peer count.</p> <p>See here for our networking related tips and tricks.</p>"},{"location":"health.html#keep-track-of-your-attestation-effectiveness","title":"Keep track of your attestation effectiveness","text":"<p>Attestation effectiveness is a metric that directly affects your validator rewards.</p> <p>The interval between a validator performing its duty and an attestation is called the inclusion distance of an attestation. As long as your validator is within the allowed inclusion distance, you will get the full reward.</p> <p>You can verify your validator's effectiveness on the beaconcha.in website.</p> <p></p> <p>Ideally you want to see a value above 95%.</p> <p>While attestation effectiveness depends on a variety of factors \u2014 attestation network propagation, your network connectivity, and the peers you are connected to \u2014 your network connectivity is likely the most important factors you can control to improve this metric. Apart from the tips outlined on this guide, you could also experiment with subscribing to all subnets.</p>"},{"location":"health.html#monitor-your-systems-network-io-usage","title":"Monitor your system's network I/O usage","text":"<p>If you're a Linux user and want to track how much network I/O your system uses over time, you can install a nice utility called <code>vnstat</code>.</p> <p>To install, run:</p> <pre><code>sudo apt install vnstat\n</code></pre> <p>To run it:</p> <p>TBC - See here for more info</p>"},{"location":"history.html","title":"Historical data","text":"<p>This feature is available from Nimbus <code>v23.1.0</code> onwards.</p> <p>Ethereum consensus nodes are required to keep a minimum of 5 months of historical block data ensuring the health of the network.</p> <p>Nimbus can be configured to either retain or remove historical data past that point using the <code>--history</code> option. By default, Nimbus prunes historical data.</p> <p>EIP-4844 blob archival</p> <p>In the default <code>prune</code> mode, EIP-4844 blobs are retained for ~18 days. To retain blobs beyond that, enable <code>--history=archive</code> which also archives blob data in the Nimbus database.</p> <p>Future versions of Nimbus will allow exporting retained blobs to erb files.</p>"},{"location":"history.html#history-modes","title":"History modes","text":"<p>The history mode controls how far back Nimbus supports answering historical queries in the REST API. It does not affect the ability to perform validator duties.</p> <p>In <code>prune</code> mode, blocks and states past that point are removed from the database continuously and the freed space is reused for more recent data.</p> <p>Database size</p> <p>Although blocks and states are pruned, the database will not shrink in size: instead, the freed space is reused for new data.</p> <p>In <code>archive</code> mode, queries can be as far back as the state that the database was created with \u2014 the checkpoint state in the case of trusted node sync or genesis.</p>"},{"location":"history.html#switching-between-modes","title":"Switching between modes","text":"<p>It is possible to switch between <code>prune</code> and <code>archive</code> modes.</p> <p>When switching to <code>prune</code> mode, deep history will be removed from the database and the prune point will be updated continuously as usual.</p> <p>As noted above, the database will not shrink in size. To reclaim space, perform a trusted node sync using a fresh database.</p> <p>When switching to <code>archive</code> mode, the node will start keeping history from the most recent prune point, but will not recreate deep history.</p> <p>In order to recreate deep history in a pruned node, download the era archive of deep history and reindex the database \u2014 this operation may take several hours.</p>"},{"location":"history.html#command-line","title":"Command line","text":"MainnetHolesky <pre><code>./run-mainnet-beacon-node.sh --history=prune ...\n</code></pre> <pre><code>./run-holesky-beacon-node.sh --history=prune ...\n</code></pre>"},{"location":"holesky.html","title":"Hole\u0161ky testnet","text":"<p><code>holesky</code> is the main long-running Ethereum staking, infrastructure and protocol-developer testnet. For testing decentralized applications, smart contracts, and other EVM functionality, please use Sepolia testnet! <code>holesky</code> replaces the Prater/G\u00f6rli network which has been deprecated since early 2023.</p> <p>It provides an opportunity to verify your setup works as expected through the proof-of-stake transition and in a post-merge context as well as to safely practice node operations such as adding and removing validators, migrating between clients, and performing upgrades and backups. If you come across any issues, please report them here.</p>"},{"location":"holesky.html#general-preparation","title":"General Preparation","text":"<ol> <li> <p>Generate the JWT secret with <code>openssl rand -hex 32 | tr -d \"\\n\" &gt; \"/opt/jwtsecret\"</code>. This file needs to be passed to both the execution client and the consensus client.</p> </li> <li> <p>Choose an Ethereum address to receive transaction fees.    This ETH will be immediately available, not part of the staking contract.</p> </li> <li> <p>Download the latest release and install it by unpacking the archive.</p> </li> <li> <p>Choose one of Nethermind, Besu, Erigon, or Geth as an execution client.    Download, install, and run it.</p> NethermindErigonBesu <pre><code>cd nethermind/src/Nethermind/Nethermind.Runner\ndotnet run -c Release -- --config holesky \\\n  --JsonRpc.Host=0.0.0.0 \\\n  --JsonRpc.JwtSecretFile=/opt/jwtsecret\n</code></pre> <pre><code>./build/bin/erigon --chain=holesky \\\n  --datadir holesky-testnet \\\n  --authrpc.jwtsecret=/opt/jwtsecret \\\n  --http --http.api=engine,net,eth\n</code></pre> <pre><code>build/install/besu/bin/besu     \\\n  --network=holesky             \\\n  --rpc-http-enabled=true       \\\n  --rpc-http-host=\"0.0.0.0\"     \\\n  --rpc-http-cors-origins=\"*\"   \\\n  --sync-mode=\"X_SNAP\"          \\\n  --data-storage-format=\"BONSAI\"\\\n  --Xmerge-support=true         \\\n  --rpc-ws-host=\"0.0.0.0\"       \\\n  --host-allowlist=\"*\"          \\\n  --engine-rpc-enabled=true     \\\n  --engine-host-allowlist=\"*\"   \\\n  --engine-jwt-enabled=true     \\\n  --engine-jwt-secret=/opt/jwtsecret\n</code></pre> </li> <li> <p>Start syncing the node consisting of Nimbus and chosen execution client, for example by running:     <pre><code>nimbus-eth2/build/nimbus_beacon_node \\\n    --network=holesky \\\n    --web3-url=http://127.0.0.1:8551 \\\n    --rest \\\n    --metrics \\\n    --jwt-secret=\"/opt/jwtsecret\" \\\n    --suggested-fee-recipient=&lt;Enter-eth-address-here&gt;\n</code></pre></p> <p>Tip</p> <p>If you want the syncing process to complete much faster, you can sync from a trusted node.</p> <p>One might consider here to set up a systemd service to ensure this runs automatically, including after restarts.</p> </li> <li> <p>Once this Hole\u0161ky node is completely synced, use the Holesky launchpad to obtain Holesky validators. It might require some time before these enter and are activated on the beacon chain. If one does this before the node which will attest and propose using those validators has synced, one might miss attestations and block proposals.</p> </li> <li> <p>Follow our validating guide from step 2 (import the validator keys) onward.</p> </li> </ol>"},{"location":"holesky.html#sync-the-beacon-node-and-execution-client","title":"Sync the beacon node and execution client","text":""},{"location":"holesky.html#obtaining-genesis-file-optional","title":"Obtaining genesis file (optional)","text":"<p>By default, Nimbus will automatically download the genesis state of Hole\u0161ky from Github through the HTTPS protocol. If something prevents you from using this method, you may be able to work-around the issue by either instructing Nimbus to use a different URL by specifying the <code>--genesis-state-url</code> command-line parameter (for example, you can point it to the <code>/eth/v2/debug/beacon/states/genesis</code> endpoint of a trusted beacon node or a checkpoint provider) or by downloading the <code>genesis.ssz</code> file of the network through some other means and then supplying its path through the <code>--genesis-state</code> command-line parameter.</p>"},{"location":"holesky.html#begin-validating","title":"Begin validating","text":""},{"location":"holesky.html#useful-resources","title":"Useful resources","text":"<ul> <li> <p>Holesky landing page: view block explorers, request funds from the faucet, and connect to a JSON RPC endpoint.</p> </li> <li> <p>Holesky EF launchpad notes: how to run a node; contains instructions for how to build Nimbus from source for this purpose</p> </li> <li> <p>Holesky consensus layer beacon chain explorer</p> </li> <li> <p>Holesky execution layer transaction explorer</p> </li> </ul>"},{"location":"infura-guide.html","title":"Infura guide","text":"<p>This page has been removed - following the merge it is no longer possible to use Infura for validation duties.</p>"},{"location":"install.html","title":"Prepare your machine","text":"<p>The Nimbus beacon node runs on Linux, macOS, Windows, and Android.</p>"},{"location":"install.html#system-requirements","title":"System requirements","text":"<p>Check that your machine matches the minimal system requirements.</p>"},{"location":"install.html#build-prerequisites","title":"Build prerequisites","text":"<p>Tip</p> <p>If you are planning to use the precompiled binaries, you can skip this section and go straight to the binaries!</p> <p>When building from source, you will need additional build dependencies to be installed:</p> <ul> <li>Developer tools (C compiler, Make, Bash, Git)</li> <li>CMake</li> </ul> LinuxmacOSWindowsAndroid <p>On common Linux distributions the dependencies can be installed with:</p> <pre><code># Debian and Ubuntu\nsudo apt-get install build-essential git-lfs cmake\n\n# Fedora\ndnf install @development-tools cmake\n\n# Arch Linux, using an AUR manager\nyourAURmanager -S base-devel git-lfs cmake\n</code></pre> <p>With Homebrew:</p> <pre><code>brew install cmake\n</code></pre> <p>To build Nimbus on Windows, the MinGW-w64 build environment is recommended.</p> <p>Install Mingw-w64 for your architecture using the \"MinGW-W64 Online Installer\":</p> <ol> <li>Select your architecture in the setup menu (<code>i686</code> on 32-bit, <code>x86_64</code> on 64-bit).</li> <li>Set threads to <code>win32</code>.</li> <li>Set exceptions to \"dwarf\" on 32-bit and \"seh\" on 64-bit.</li> <li>Change the installation directory to <code>C:\\mingw-w64</code> and add it to your system PATH in <code>\"My Computer\"/\"This PC\" -&gt; Properties -&gt; Advanced system settings -&gt; Environment Variables -&gt; Path -&gt; Edit -&gt; New -&gt; C:\\mingw-w64\\mingw64\\bin</code> (<code>C:\\mingw-w64\\mingw32\\bin</code> on 32-bit).</li> </ol> <p>Note</p> <p>If the online installer isn't working you can try installing <code>mingw-w64</code> through MSYS2.</p> <p>Install Git for Windows and use a \"Git Bash\" shell to clone and build <code>nimbus-eth2</code>.</p> <ul> <li>Install the Termux app from FDroid or the Google Play store</li> <li>Install a PRoot of your choice following the instructions for your preferred distribution. Note, the Ubuntu PRoot is known to contain all Nimbus prerequisites compiled on Arm64 architecture (the most common architecture for Android devices).</li> </ul> <p>Assuming you use Ubuntu PRoot:</p> <pre><code>apt install build-essential git-lfs\n</code></pre>"},{"location":"install.html#time","title":"Time","text":"<p>The beacon chain relies on your computer having the correct time set (\u00b10.5 seconds). It is important that you periodically synchronize the time with an NTP server.</p> <p>If the above sounds like Latin to you, don't worry. You should be fine as long as you haven't changed the time and date settings on your computer (they should be set automatically).</p> LinuxWindows, macOS <p>On Linux, it is recommended to install chrony.</p> <p>To install it:</p> <pre><code># Debian and Ubuntu\nsudo apt-get install -y chrony\n\n# Fedora\nsudo dnf install chrony\n\n# Archlinux, using an AUR manager\nyourAURmanager chrony\n</code></pre> <p>Make sure that the options for setting time automatically are enabled.</p>"},{"location":"intro.html","title":"Intro","text":"<p>Moved</p>"},{"location":"keep-an-eye.html","title":"Keep an eye on your validator","text":"<p>Once your validator has been activated, you can set up validator monitoring together with a dashboard to keep track of its performance.</p> <p>Another way of keeping track is using an online service such as beaconcha.in: Mainnet or Holesky.</p> <p>Both online services and dashboards allow setting up alerts for when the validator is offline.</p>"},{"location":"keep-an-eye.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"keep-an-eye.html#make-sure-your-validator-is-attached","title":"Make sure your validator is attached","text":"<p>On startup, you should see a log message that reads <code>Local validator attached</code>. This has a <code>pubkey</code> field which should be the public key of your validator.</p>"},{"location":"keep-an-eye.html#keep-track-of-your-syncing-progress","title":"Keep track of your syncing progress","text":"<p>To keep track of your sync progress, pay attention to the <code>Slot start</code> messages in your logs:</p> <pre><code>INF 2022-06-16 13:23:11.008+02:00 Slot start\n  topics=\"beacnde\"\n  slot=4046214\n  epoch=126444\n  sync=\"00h37m (99.38%) 11.0476slots/s (DDQQDDDPDD:4021215)\"\n  peers=55\n  head=5d59aba3:4021234\n  finalized=125661:82616f78\n  delay=8ms245us608ns\n</code></pre> <p>Where:</p> <ul> <li><code>slot</code> is the current time on the beacon chain, measured in \"slots\"</li> <li><code>epoch</code> shows the current epoch: each epoch has 32 slots, and each validator performs one attestation per epoch</li> <li><code>peers</code> tells you how many peers you're currently connected to: depending on the number of attached validators, you may need anywhere from 10 to 60 peers connected</li> <li><code>sync</code> tells you if your client is synced and can perform duties, or how long it will take to get there</li> <li><code>/opt</code> means that the node is optimistically synced: it is waiting for the execution client to finish syncing</li> <li>in the case of trusted node sync it may also show <code>backfill</code> in which case duties are being performed but more bandwidth than usual is being used to download historical blocks</li> <li><code>head</code> tells you the most recent block you've synced to so far (<code>5d59aba3</code> is the first part of the block hash, <code>4021234</code> is the slot number)</li> <li><code>finalized</code> tells you the most recent finalized epoch you've synced to so far (<code>125661</code> is the epoch, <code>82616f78</code> is the checkpoint hash)</li> </ul> <p>The string of letters -- what we call the <code>sync worker map</code> (in the above case represented by <code>DDQQDDDPDD</code>) represents the peers you are syncing from, where:</p> <pre><code>    s - sleeping (idle),\n    w - waiting for a peer from PeerPool,\n    R - requesting blocks from peer\n    D - downloading blocks from peer\n    Q - queued/waiting for ancestor blocks\n    P - processing/verifying blocks\n    U - updating peer's status information\n</code></pre> <p>Tip</p> <p>You can also use you calls outlined in the REST API page to retrieve similar information.</p>"},{"location":"keep-updated.html","title":"Upgrade / downgrade","text":"<p>Make sure you stay on the lookout for any critical updates to Nimbus. The best way to do so is through the announcements channel on our discord. The release page can be found here.</p> <p>Note</p> <p>If your beacon node is already running, you'll need to restart it for the changes to take effect.</p> <p>To update to the latest version, either download the binary or compile the beacon node release (see below), then restart the service.</p> <p>Tip</p> <p>To check which version of Nimbus you're currently running, run <code>build/nimbus_beacon_node --version</code></p>"},{"location":"keep-updated.html#upgrade-to-the-latest-version","title":"Upgrade to the latest version","text":"Manual installationDebian / UbuntuBuild from source <p>Open the Nimbus release page and download the file that corresponds to your operation system and machine.</p> <p>Once downloaded, unpack the binaries in the same folder as your current version, overwriting the existing files.</p> <pre><code>wget &lt;insert download link here&gt;\ntar -xzf nimbus-eth2_Linux_arm64v8*.tar.gz --strip-components 1 -C nimbus-eth2\nrm nimbus-eth2_Linux_arm64v8*.tar.gz\n</code></pre> <p>Update Nimbus via the package manager as usual</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade\n</code></pre> <p>Upgrading Nimbus when built from source is similar to the installation process.</p> <p>Run:</p> <pre><code># Download the updated source code\ngit pull &amp;&amp; make update\n\n# Build the newly downloaded version\nmake -j4 nimbus_beacon_node\n</code></pre> <p>Tip</p> <p>If you want to minimize downtime, you can build Nimbus while the node is running!</p> <p>Complete the upgrade by restarting the node!</p>"},{"location":"keep-updated.html#urgency-guidelines","title":"Urgency guidelines","text":"<p>Nimbus releases are marked with the following tags:</p> <ul> <li><code>low-urgency</code>: update at your own convenience, sometime within our normal update cycle of two weeks</li> <li><code>medium-urgency</code>: may contain an important stability fix, it is better to update sooner rather than later</li> <li><code>high-urgency</code>: update as soon as you can, this is a critical update required for Nimbus to function correctly</li> </ul>"},{"location":"keep-updated.html#install-a-specific-version","title":"Install a specific version","text":"<p>Occasionally, you may need to either upgrade or downgrade to a specific version of Nimbus.</p> <p>Nimbus can safely be downgraded to any version targeting the current hard fork of the chain, unless otherwise noted among the release notes.</p> Manual installationDebian / UbuntuBuild from source <p>Download the desired version from Github and replace the binaries, similar to upgrading.</p> <p>Use the package manager to install a specific version:</p> <pre><code>sudo apt-get install nimbus-beacon-node=23.2.0\n</code></pre> <p>To pull a specific version of Nimbus (e.g. <code>v22.9.1</code>), run:</p> <pre><code># Switch source code to the desired version\ngit checkout v22.9.1 &amp;&amp; make update\n\n# Run the build command as usual\nmake -j4 nimbus_beacon_node\n</code></pre> <p>When later you want to go back to the stable release:</p> <pre><code># Switch source code to the stable version\ngit checkout stable &amp;&amp; make update\n\n# Run the build command as usual\nmake -j4 nimbus_beacon_node\n</code></pre> <p>Now, restart your node.</p>"},{"location":"keymanager-api.html","title":"Keymanager API","text":"<p>The standardized Keymanager API can be used to add, remove, or migrate validators on the fly while the beacon node is running.</p>"},{"location":"keymanager-api.html#configuration","title":"Configuration","text":"<p>By default, we disable the Keymanager API. To enable it, start the beacon node with the <code>--keymanager</code> option enabled:</p> <pre><code>./run-holesky-beacon-node.sh --keymanager\n</code></pre> <p>Once the node is running, you'll be able to access the API from http://localhost:5052/.</p>"},{"location":"keymanager-api.html#authorization-bearer-scheme","title":"Authorization: Bearer scheme","text":"<p>All requests must be authorized through the <code>Authorization: Bearer</code> scheme with a token matching the contents of a file provided at the start of the node through the <code>--keymanager-token-file</code> parameter.</p>"},{"location":"keymanager-api.html#enabling-connections-from-outside-machines","title":"Enabling connections from outside machines","text":"<p>By default, only connections from the same machine are entertained. If you wish to change this you can configure the port and listening address with the <code>--keymanager-port</code> and <code>--keymanager-address</code> options respectively.</p> <p>Warning</p> <p>The Keymanager API port should only be exposed through a secure channel (e.g. HTTPS, an SSH tunnel, a VPN, etc.)</p>"},{"location":"keymanager-api.html#specification","title":"Specification","text":"<p>The specification is documented here. The  README is also extremely useful and is documented here.</p>"},{"location":"keys.html","title":"Keys","text":"<p>This page has been removed.</p> <p>Follow our validating guide.</p>"},{"location":"light-client-data.html","title":"Light client data","text":"<p>Nimbus is configured by default to serve data that allows light clients to stay in sync with the Ethereum network. Light client data is imported incrementally and does not affect validator performance. Information about the light client sync protocol can be found in the Ethereum consensus specs.</p> <p>Note</p> <p>Nimbus also implements a standalone light client that may be used to sync an execution layer (EL) client.</p>"},{"location":"light-client-data.html#configuration","title":"Configuration","text":"<p>The following configuration options adjust the import and serving of light client data:</p> Option Description <code>--light-client-data-serve</code> <ul><li><code>false</code>: Disable light client data serving</li><li><code>true</code> (default): Provide imported light client data to others</li></ul> <code>--light-client-data-import-mode</code> <ul><li><code>none</code>: Do not import new light client data</li><li><code>only-new</code> (default): Incrementally import new light client data</li><li><code>full</code>: Import historic light client data (slow startup)</li><li><code>on-demand</code>: Like <code>full</code>, but import on demand instead of on start</li></ul> <code>--light-client-data-max-periods</code> <ul><li>Controls the maximum number of sync committee periods to retain light client data</li><li>When unspecified (default), light client data is never pruned</li></ul> <p>Warning</p> <p>Setting <code>--light-client-data-import-mode</code> to <code>full</code> or <code>on-demand</code> imports historic light client data which is computationally expensive. While importing historic light client data, validator duties may be missed.</p>"},{"location":"log-levels.html","title":"Log levels","text":"<p>This information has moved to logging.</p>"},{"location":"log-rotate.html","title":"Set up log rotation","text":"<p>Nimbus logs are written to <code>stdout</code>, and can be redirected to a file. Writing to a file for a long-running process may lead to difficulties when the file grows large. This is typically solved with a log rotator. A log rotator is responsible for switching the written-to file, as well as compressing and removing old logs.</p>"},{"location":"log-rotate.html#using-logrotate","title":"Using <code>logrotate</code>","text":"<p>logrotate provides log rotation and compression. The corresponding package will install its Cron hooks (or Systemd timer) -- all you have to do is add a configuration file for Nimbus in <code>/etc/logrotate.d/nimbus-eth2</code>:</p> <pre><code>/var/log/nimbus-eth2/*.log {\n    compress\n    missingok\n    copytruncate\n}\n</code></pre> <p>The above assumes you've configured Nimbus to write its logs to <code>/var/log/nimbus-eth2/</code> (usually by redirecting <code>stdout</code> and <code>stderr</code> from your init script).</p> <p><code>copytruncate</code> is required because, when it comes to moving the log file, <code>logrotate</code>'s default behaviour requires application support for re-opening that log file at runtime (something which is currently lacking). So, instead of a move, we tell <code>logrotate</code> to do a copy and a truncation of the existing file. A few log lines may be lost in the process.</p> <p>You can control rotation frequency and the maximum number of log files kept by using the global configuration file, <code>/etc/logrotate.conf</code>:</p> <pre><code># rotate daily\ndaily\n# only keep logs from the last 7 days\nrotate 7\n</code></pre>"},{"location":"log-rotate.html#using-rotatelogs","title":"Using <code>rotatelogs</code>","text":"<p>rotatelogs captures <code>stdout</code> logging and redirects it to a file, rotating and compressing on the fly.</p> <p>It is available on most servers and can be used with <code>Docker</code>, <code>Systemd</code> and manual setups to write rotated logs files.</p> <p>In particular, when <code>systemd</code> and its accompanying <code>journald</code> log daemon are used, this setup avoids clogging the system log by keeping the Nimbus logs in a separate location.</p>"},{"location":"log-rotate.html#compression","title":"Compression","text":"<p><code>rotatelogs</code> works by reading <code>stdin</code> and redirecting it to a file based on a name pattern. Whenever the log is about to be rotated, the application invokes a shell script with the old and new log files. Our aim is to compress the log file to save space. The Nimbus-eth2 repo provides a helper script that does this:</p> <pre><code># Create a rotation script for rotatelogs\ncat &lt;&lt; EOF &gt; rotatelogs-compress.sh\n#!/bin/sh\n\n# Helper script for Apache rotatelogs to compress log files on rotation - `$2` contains the old log file name\n\nif [ -f \"$2\" ]; then\n    # \"nice\" prevents hogging the CPU with this low-priority task\n    nice gzip -9 \"$2\"\nfi\nEOF\n\nchmod +x rotatelogs-compress.sh\n</code></pre>"},{"location":"log-rotate.html#run","title":"Run","text":"<p>The final step is to redirect logs to <code>rotatelogs</code> using a pipe when starting Nimbus:</p> <pre><code>build/nimbus_beacon_node \\\n  --network:holesky \\\n  --web3-url=\"$WEB3URL\" \\\n  --data-dir:$DATADIR 2&gt;&amp;1 | rotatelogs -L \"$DATADIR/nbc_bn.log\" -p \"/path/to/rotatelogs-compress.sh\" -D -f -c \"$DATADIR/log/nbc_bn_%Y%m%d%H%M%S.log\" 3600\n</code></pre> <p>The options used in this example do the following:</p> <ul> <li><code>-L nbc_bn.log</code> - symlinks to the latest log file, for use with <code>tail -F</code></li> <li><code>-p \"/path/to/rotatelogs-compress.sh\"</code> - runs <code>rotatelogs-compress.sh</code> when rotation is about to happen</li> <li><code>-D</code> - creates the <code>log</code> directory if needed</li> <li><code>-f</code> - opens the log immediately when starting <code>rotatelogs</code></li> <li><code>-c \"$DATADIR/log/nbc_bn_%Y%m%d%H%M%S.log\"</code> - includes timestamp in log filename</li> <li><code>3600</code> - rotates logs every hour (3600 seconds)</li> </ul>"},{"location":"log-rotate.html#deleting-old-logs","title":"Deleting old logs","text":"<p><code>rotatelogs</code> will not do this for you, so you'll need a Cron script (or Systemd timer):</p> <pre><code># delete log files older than 7 days\nfind \"$DATADIR/log\" -name 'nbc_bn_*.log' -mtime +7 -exec rm '{}' \\+\n</code></pre>"},{"location":"logging.html","title":"Logging","text":"<p>Nimbus offers several options for logging. By default, logs are written to stdout using the chronicles <code>textlines</code> format which is convenient to read and can be used with tooling for heroku/logfmt.</p>"},{"location":"logging.html#change-log-level","title":"Change log level","text":"<p>You can customise Nimbus' verbosity with the <code>--log-level</code> option.</p> <p>For example:</p> <pre><code>./run-mainnet-beacon-node.sh --log-level=WARN\n</code></pre> <p>The default value is <code>INFO</code>.</p> <p>Possible values (in order of decreasing verbosity) are:</p> <pre><code>TRACE\nDEBUG\nINFO\nNOTICE\nWARN\nERROR\nFATAL\nNONE\n</code></pre>"},{"location":"logging.html#change-logging-style","title":"Change logging style","text":"<p>Nimbus supports three log formats: <code>colors</code>, <code>nocolors</code> and <code>json</code>. In <code>auto</code> mode, logs will be printed using either <code>colors</code> or <code>nocolors</code>.</p> <p>You can choose a log format with the <code>--log-format</code> option, which also understands <code>auto</code> and <code>none</code>:</p> <pre><code>./run-mainnet-beacon-node.sh --log-format=none # disable logging to std out\n./run-mainnet-beacon-node.sh --log-format=json # print json logs, one line per item\n</code></pre>"},{"location":"logging.html#logging-to-a-file","title":"Logging to a file","text":"<p>To send logs to a file, you can redirect the stdout logs:</p> <pre><code># log json to filename.jsonl\n./run-mainnet-beacon-node.sh --log-format=json &gt; filename.jsonl\n</code></pre> <p>We recommend keeping an eye on the growth of this file with a log rotator. Logs are written in the \"JSON Lines\" format - one <code>json</code> entry per line.</p>"},{"location":"merge.html","title":"Merge","text":"<p>This page has been removed; all Ethereum Foundation-affiliated Ethereum networks have merged.</p>"},{"location":"metrics-pretty-pictures.html","title":"Grafana and Prometheus","text":"<p>In this page we'll cover how to use Grafana and Prometheus to help you visualize important real-time metrics concerning your validator and/or beacon node.</p> <p>Prometheus is an open-source systems monitoring and alerting toolkit. It runs as a service on your computer and its job is to capture metrics. You can find more information about Prometheus here.</p> <p>Grafana is a tool for beautiful dashboard monitoring that works well with Prometheus. You can learn more about Grafana here.</p>"},{"location":"metrics-pretty-pictures.html#simple-metrics","title":"Simple metrics","text":"<p>To enable the metrics server, run the beacon node  with the <code>--metrics</code> flag:</p> <pre><code>./run-holesky-beacon-node.sh --metrics\n</code></pre> <p>Visit http://127.0.0.1:8008/metrics with a browser or <code>curl</code>. You should see a plaintext page that looks something like this:</p> <pre><code># HELP nim_runtime_info Nim runtime info\n# TYPE nim_runtime_info gauge\nnim_gc_mem_bytes 6275072.0\nnim_gc_mem_occupied_bytes 1881384.0\nnim_gc_heap_instance_occupied_bytes{type_name=\"KeyValuePairSeq[digest.Eth2Digest, block_pools_types.BlockRef]\"} 25165856.0\nnim_gc_heap_instance_occupied_bytes{type_name=\"BlockRef\"} 17284608.0\nnim_gc_heap_instance_occupied_bytes{type_name=\"string\"} 6264507.0\nnim_gc_heap_instance_occupied_bytes{type_name=\"seq[SelectorKey[asyncdispatch.AsyncData]]\"} 409632.0\nnim_gc_heap_instance_occupied_bytes{type_name=\"OrderedKeyValuePairSeq[Labels, seq[Metric]]\"} 122720.0\nnim_gc_heap_instance_occupied_bytes{type_name=\"Future[system.void]\"} 79848.0\nnim_gc_heap_instance_occupied_bytes{type_name=\"anon ref object from /Users/hackingresearch/nimbus/clone/nim-beacon-chain/vendor/nimbus-build-system/vendor/Nim/lib/pure/asyncmacro.nim(319, 33)\"} 65664.0\nnim_gc_heap_instance_occupied_bytes{type_name=\"anon ref object from /Users/hackingresearch/nimbus/clone/nim-beacon-chain/vendor/nimbus-build-system/vendor/Nim/lib/pure/asyncnet.nim(506, 11)\"} 43776.0\nnim_gc_heap_instance_occupied_bytes{type_name=\"seq[byte]\"} 37236.0\nnim_gc_heap_instance_occupied_bytes{type_name=\"seq[TrustedAttestation]\"} 29728.0\n\n...\n</code></pre> <p>Note</p> <p>Metrics are by default only accessible from the same machine as the beacon node is running on. To fetch metrics from a remote machine, an SSH tunnel is recommended.</p> <p>The metrics server offers one snapshot in time of the state of the beacon node. Metrics, however, are at their most useful when collected over time \u2014 for this, we'll need to set up two more pieces of software: Prometheus and Grafana.</p>"},{"location":"metrics-pretty-pictures.html#prometheus-and-grafana","title":"Prometheus and Grafana","text":"<p>The following steps will take you through how to use Prometheus and Grafana to spin up a beautiful and useful monitoring dashboard for your validator and beacon node.</p>"},{"location":"metrics-pretty-pictures.html#steps","title":"Steps","text":""},{"location":"metrics-pretty-pictures.html#1-download-prometheus","title":"1. Download Prometheus","text":"<p>Use your favourite package manager to download Prometheus: for example <code>apt-get install prometheus</code> on Ubuntu, or <code>brew install prometheus</code> on MacOS, should do the trick.</p> <p>Note</p> <p>If you don't use a package manager, you can download the latest release of directly from Prometheus website. To extract it, run:</p> <pre><code>tar xvfz prometheus-*.tar.gz\ncd prometheus-*\n</code></pre>"},{"location":"metrics-pretty-pictures.html#2-copy-the-binary","title":"2. Copy the binary","text":"<p>The Prometheus server is a single binary called prometheus (or prometheus.exe on Microsoft Windows). Copy it over to <code>/usr/local/bin</code>:</p> <pre><code>cp prometheus-2.20.1.linux-amd64/prometheus /usr/local/bin/\n</code></pre>"},{"location":"metrics-pretty-pictures.html#3-run-prometheus-with-the-default-configuration-file","title":"3. Run Prometheus with the default configuration file","text":"<p>Prometheus relies on a YAML configuration file to let it know where, and how often, to scrape data.</p> <p>Example config file:</p> <pre><code>global:\n  scrape_interval: 12s\n\nscrape_configs:\n  - job_name: \"nimbus\"\n    static_configs:\n      - targets: ['127.0.0.1:8008']\n</code></pre> <p>Save the above as <code>prometheus.yml</code> in the <code>nimbus-eth2</code> repo.</p> <p>Then run Prometheus:</p> <pre><code>prometheus --config.file=./prometheus.yml --storage.tsdb.path=./prometheus\n</code></pre> <p>You should see the following confirmation in the logs:</p> <pre><code>level=info ts=2021-01-22T14:52:10.604Z caller=main.go:673 msg=\"Server is ready to receive web requests.\"\n</code></pre>"},{"location":"metrics-pretty-pictures.html#4-download-grafana","title":"4. Download Grafana","text":"<p>Download the latest release of Grafana for your platform. You need version 7.2 or newer.</p> <p>Note</p> <p>If you use a package manager, you can also download Grafana that way -- for example <code>apt-get install grafana</code> on Ubuntu, or <code>brew install grafana</code> on MacOS, should do the trick.</p>"},{"location":"metrics-pretty-pictures.html#5-install-and-start-grafana","title":"5. Install and start Grafana","text":"<p>Follow the instructions for your platform to install and start Grafana.</p>"},{"location":"metrics-pretty-pictures.html#6-configure-login","title":"6. Configure login","text":"<p>Go to http://localhost:3000/, you should see a Grafana login screen that looks like this:</p> <p></p> <p>Type in <code>admin</code> for both the username and password. You'll be asked to change the password (and we recommend you do so).</p>"},{"location":"metrics-pretty-pictures.html#7-add-a-data-source","title":"7. Add a data source","text":"<p>Hover your mouse over the gear icon in the left menu bar, and click on the <code>Data Sources</code> option in the sub-menu that pops up.</p> <p></p> <p>Now click on the <code>Add Data Source</code> button in the center of the screen</p> <p></p> <p>Select <code>Prometheus</code></p> <p></p> <p>Enter <code>http://localhost:9090</code> in the URL field</p> <p></p> <p>Set the \"Scrape interval\" field to the same value you used in the Prometheus config (\"15s\" in our example below).</p> <p>Scroll to the bottom and click on <code>Save and Test</code></p> <p></p> <p>If everything is working correctly you should see a green <code>Data source is working</code> box pop up</p> <p></p>"},{"location":"metrics-pretty-pictures.html#8-import-a-dashboard","title":"8. Import a dashboard","text":"<p>Now, let's import a dashboard; hover your mouse over the <code>+</code> icon in the left menu bar and select <code>import</code> from the pop-up menu</p> <p></p> <p>Click on <code>Upload JSON file</code></p> <p></p> <p>Select the <code>beacon_nodes_Grafana_dashboard.json</code>  from the <code>nimbus-eth2/grafana/</code> folder and click on <code>Import</code></p> <p></p> <p>You'll be directed to the dashboard where you'll be able to gain insights into the performance of <code>nimbus-eth2</code> and your validators</p> <p></p> <p>Note</p> <p>The dashboard is very much a work in progress. Some of the highlights right now include received and proposed blocks, received and sent attestations, peers, memory and cpu usage stats. But keep an eye out for additional metrics in the near future.</p> <p>And voil\u00e0! That's all there is to it :)</p>"},{"location":"metrics-pretty-pictures.html#community-dashboards","title":"Community dashboards","text":""},{"location":"metrics-pretty-pictures.html#joe-clapis","title":"Joe Clapis","text":"<p>Joe \u2014 who\u2019s done some brilliant work integrating Nimbus with Rocket Pool \u2014 has created a wonderful guide where he takes you through how to set up a Grafana server on your Pi, using his dashboard as an example.</p> <p>In his words:</p> <p>This captures just about every metric I think I\u2019d like to see at a glance.</p> <p>Whether or not you're running a Pi, we recommend you check out his guide.</p>"},{"location":"metrics-pretty-pictures.html#metanull","title":"Metanull","text":"<p>A dashboard aimed primarily at users rather than developers.</p> <p>Note that this dashboard does rely heavily on three prometheus exporter tools: <code>node_exporter</code> for system metrics, <code>json_exporter</code> for ETH price, and <code>blackbox_exporter</code> for ping times.</p> <p>The good news is that you don't need to use all these tools, as long as you take care of removing the related panels.</p> <p>See here for a detailed guide explaining how to use it.</p>"},{"location":"migration-options.html","title":"Client migration (advanced)","text":"<p>The main migration guide is located here. Here we document a couple of advanced options you can use if you wish to have more fine-grained control.</p>"},{"location":"migration-options.html#export-validators","title":"Export validators","text":"<p>The default command for exporting your slashing protection history is:</p> <pre><code>build/nimbus_beacon_node slashingdb export database.json\n</code></pre> <p>This will export your history in the correct format to <code>database.json</code>.</p> <p>On success you will have a message similar to:</p> <pre><code>Exported slashing protection DB to 'database.json'\nExport finished: '$HOME/.cache/nimbus/BeaconNode/validators/slashing_protection.sqlite3' into 'interchange.json'\n</code></pre>"},{"location":"migration-options.html#export-from-a-specific-validators-directory","title":"Export from a specific validators directory","text":"<p>The validator directory contains your validator's setup.</p> <pre><code>build/nimbus_beacon_node slashingdb export database.json --validators-dir=path/to/validatorsdir/\n</code></pre>"},{"location":"migration-options.html#export-from-a-specific-data-directory","title":"Export from a specific data directory","text":"<p>The data directory (<code>data-dir</code>) contains your beacon node setup.</p> <pre><code>build/nimbus_beacon_node slashingdb export database.json --data-dir=path/to/datadir/\n</code></pre>"},{"location":"migration-options.html#partial-exports","title":"Partial exports","text":"<p>You can perform a partial export by specifying the public key of the relevant validator you wish to export.</p> <pre><code>build/nimbus_beacon_node slashingdb export database.json --validator=0xb5da853a51d935da6f3bd46934c719fcca1bbf0b493264d3d9e7c35a1023b73c703b56d598edf0239663820af36ec615\n</code></pre> <p>If you wish to export multiple validators, you must specify the <code>--validator</code> option multiple times.</p>"},{"location":"migration-options.html#import-validators","title":"Import validators","text":"<p>The default command for importing your validator's slashing protection history into the database is:</p> <pre><code>build/nimbus_beacon_node slashingdb import database.json\n</code></pre>"},{"location":"migration-options.html#import-to-a-specific-validators-directory","title":"Import to a specific validators directory","text":"<p>The validator directory contains your validator's setup.</p> <pre><code>build/nimbus_beacon_node slashingdb import database.json --validators-dir=path/to/validatorsdir/\n</code></pre>"},{"location":"migration-options.html#import-to-a-specific-data-directory","title":"Import to a specific data directory","text":"<p>The data directory contains your beacon node's setup.</p> <pre><code>build/nimbus_beacon_node slashingdb import database.json --data-dir=path/to/datadir/\n</code></pre>"},{"location":"migration.html","title":"Migrate from another client","text":"<p>This guide will take you through the basics of how to migrate to Nimbus from another client. See here for advanced options.</p> <p>Please take your time to get this right. Don't hesitate to reach out to us in the <code>#helpdesk</code> channel of our discord if you come across a stumbling block. We are more than happy to help guide you through the migration process. Given what's at stake, there is no such thing as a stupid question.</p> <p>Unlike other clients, Nimbus does not require a separate validator client. Instead, validators run in the beacon node process.</p> <p>Warning</p> <p>The most important takeaway is that you ensure that two clients will never validate with the same keys at the same time. In other words, you must ensure that your original client is stopped, and no longer validating, before importing your keys into Nimbus.</p>"},{"location":"migration.html#steps","title":"Steps","text":""},{"location":"migration.html#1-sync-the-nimbus-beacon-node","title":"1. Sync the Nimbus beacon node","text":"<p>No matter which client you are migrating over from, the first step is to sync the Nimbus beacon node.</p> <p>The easiest and fastest way to do this is to follow the beacon node quick start guide and perform a trusted node sync from the source client.</p> <p>Once your Nimbus beacon node has synced and you're satisfied that it's working, move to Step 2.</p> <p>Tip</p> <p>You can keep track of your syncing progress with the following command:</p> <p><pre><code>curl -X GET http://localhost:5052/eth/v1/node/syncing\n</code></pre> Look for an <code>\"is_syncing\":false</code> in the response to confirm that your node has synced.</p>"},{"location":"migration.html#2-stop-your-existing-client-and-export-your-slashing-protection-history","title":"2. Stop your existing client and export your slashing protection history","text":"<p>As part of the migration process, you need to stop your existing client and export its slashing protection database.</p> PrysmLighthouseTekuNimbus <p>Tip</p> <p>To be extra sure that your validator has stopped, wait a few epochs and confirm that your validator has stopped attesting (check its recent history on beaconcha.in). Only after that, continue with the next step of this guide.</p>"},{"location":"migration.html#1-disable-the-prysm-validator-client","title":"1. Disable the Prysm validator client","text":"<p>Stop and disable the Prysm validator client (you can also stop the Prysm beacon node if you wish).</p> <p>If you're using systemd and your service is called <code>prysmvalidator</code>, run the following commands to stop and disable the service:</p> <pre><code>sudo systemctl stop prysmvalidator.service\nsudo systemctl disable prysmvalidator.service\n</code></pre> <p>It is important that you disable the Prysm validator as well as stopping it, to prevent it from starting up again on reboot.</p>"},{"location":"migration.html#2-export-slashing-protection-history","title":"2. Export slashing protection history","text":"<p>Run the following to export your Prysm validator's slashing protection history:</p> <pre><code>prysm.sh validator slashing-protection-history export \\\n--datadir=/your/prysm/wallet \\\n--slashing-protection-export-dir=/path/to/export_dir\n</code></pre> <p>You will then find the <code>slashing-protection.json</code> file in your specified <code>/path/to/export_dir</code> folder.</p>"},{"location":"migration.html#1-disable-the-lighthouse-validator-client","title":"1. Disable the Lighthouse validator client","text":"<p>The validator client needs to be stopped in order to export, to guarantee that the data exported is up to date.</p> <p>If you're using systemd and your service is called <code>lighthousevalidator</code>, run the following command to stop and disable the service:</p> <pre><code>sudo systemctl stop lighthousevalidator\nsudo systemctl disable lighthousevalidator\n</code></pre> <p>You may also wish to stop the beacon node:</p> <pre><code>sudo systemctl stop lighthousebeacon\nsudo systemctl disable lighthousebeacon\n</code></pre> <p>It is important that you disable the service as well as stopping it, to prevent it from starting up again on reboot.</p>"},{"location":"migration.html#2-export-slashing-protection-history_1","title":"2. Export slashing protection history","text":"<p>You can export Lighthouse's database with this command:</p> <pre><code>lighthouse account validator slashing-protection export slashing-protection.json\n</code></pre> <p>This will export your history in the correct format to <code>slashing-protection.json</code>.</p>"},{"location":"migration.html#1-disable-teku","title":"1. Disable Teku","text":"<p>If you're using systemd and your service is called <code>teku</code>, run the following command to stop and disable the service:</p> <pre><code>sudo systemctl stop teku\nsudo systemctl disable teku\n</code></pre> <p>It is important that you disable the service as well as stopping it, to prevent it from starting up again on reboot.</p>"},{"location":"migration.html#2-export-slashing-protection-history_2","title":"2. Export slashing protection history","text":"<p>You can export Teku's database with this command:</p> <pre><code>teku slashing-protection export --data-path=/home/me/me_node --to=/home/slash/slashing-protection.json\n</code></pre> <p>Where:</p> <ul> <li><code>--data-path</code> specifies the location of the Teku data directory.</li> <li><code>--to</code> specifies the file to export the slashing-protection data to (in this case <code>/home/slash/slashing-protection.json</code>).</li> </ul>"},{"location":"migration.html#1-disable-the-nimbus-validator-client","title":"1. Disable the Nimbus validator client","text":"<p>Once your Nimbus beacon node on your new setup has synced and you're satisfied that it's working, stop and disable the Nimbus validator client on your current setup.</p> <p>If you're using systemd and your service is called <code>nimbus-eth2-mainnet</code>, run the following commands to stop and disable the service:</p> <pre><code>sudo systemctl stop nimbus-eth2-mainnet.service\nsudo systemctl disable nimbus-eth2-mainnet.service\n</code></pre> <p>It is important that you disable the service as well as stopping it, to prevent it from starting up again on reboot.</p>"},{"location":"migration.html#2-export-slashing-protection-history_3","title":"2. Export slashing protection history","text":"<p>Run the following to export your Nimbus validator's slashing protection history:</p> <pre><code>build/nimbus_beacon_node slashingdb export slashing-protection.json\n</code></pre> <p>This will export your history in the correct format to <code>slashing-protection.json</code>.</p>"},{"location":"migration.html#3-import-your-validator-keys-into-nimbus","title":"3. Import your validator key(s) into Nimbus","text":"<p>To import your validator key(s), follow the instructions in our validator guide.</p> <p>Tip</p> <p>To check that your key(s) has been successfully imported, look for a file named after your public key in <code>build/data/shared_mainet_0/secrets/</code>.</p> <p>If you run into an error at this stage, it's probably because the wrong permissions have been set on either a folder or file. See here for how to fix this.</p>"},{"location":"migration.html#4-import-your-slashing-protection-history","title":"4. Import your slashing protection history","text":"<p>To import the slashing protection history you exported in step 2, from the <code>nimbus-eth2</code> directory run:</p> <pre><code>build/nimbus_beacon_node slashingdb import path/to/export_dir/slashing-protection.json\n</code></pre> <p>Replacing <code>/path/to/export_dir</code> with the file/directory you specified when you exported your slashing protection history.</p> <p>Tip</p> <p>Additional slashing protection information can be safely added to slashing protection databases.</p>"},{"location":"migration.html#5-start-the-nimbus-validator","title":"5. Start the Nimbus validator","text":"<p>Follow the instructions in our validator guide to start your validator using our pre-built binaries.</p> <p>If you prefer to use Docker, see our Docker guide.</p> <p>For a quick guide on how to set up a systemd service, see our systemd guide.</p>"},{"location":"migration.html#final-thoughts","title":"Final thoughts","text":"<p>If you are unsure of the safety of a step, please get in touch with us directly on discord. Additionally, we recommend testing the migration works correctly on a testnet before going ahead on mainnet.</p>"},{"location":"more-keys.html","title":"Recover lost keys and generate new ones","text":"<p>When generating your first deposit, you will be asked to save a mnemonic in a safe location.</p> <p>This mnemonic can be used to recover lost keys and generate new ones.</p> <p>Every time you generate a keystore from your mnemonic, that keystore is assigned an index. The first keystore you generate has index 0, the second index 1, etc. You can recover any key using your mnemonic and that key's index. For more on how keys are derived, see this excellent post.</p> <p>To stay consistent with the rest of the book, we'll take you though how to do this using the deposit-cli's binary executable.</p> <p>Specifically, we'll be using the <code>existing-mnemonic</code> command. Here's a description of the command from the deposit-cli's README:</p> <p>This command is used to re-generate or derive new keys from your existing mnemonic. Use this command, if (i) you have already generated keys with this CLI before, (ii) you want to reuse your mnemonic that you know is secure that you generated elsewhere (reusing your eth1 mnemonic .etc), or (iii) you lost your keystores and need to recover your keys.</p>"},{"location":"more-keys.html#recover-existing-key","title":"Recover existing key","text":"<p>Warning</p> <p>Recovering validator keys from a mnemonic should only be used as a last resort. Exposing your mnemonic to a computer at any time puts it at risk of being compromised. Your mnemonic is not encrypted and if leaked, can be used to steal your funds.</p> <p>Note</p> <p>The commands below assume you are trying to recover the first key you created, hence <code>--validator_start_index</code> has been set to <code>0</code>.</p> <p>Run the following command from the directory which contains the <code>deposit</code> executable:</p> MainnetHolesky <pre><code>./deposit existing-mnemonic \\\n--validator_start_index 0 \\\n--num_validators 1 \\\n--chain mainnet\n</code></pre> <pre><code>./deposit existing-mnemonic \\\n--validator_start_index 0 \\\n--num_validators 1 \\\n--chain holesky\n</code></pre> <p>You'll be prompted to enter your mnemonic, and a new password for your keystore.</p> <p>Check that the <code>validator_keys</code> directory contains your keystore.</p> <p>Copy the <code>validator_keys</code> directory to <code>nimbus-eth2</code> and then follow the key import instructions of our validator guide. Your key will be added to your node on next restart.</p>"},{"location":"more-keys.html#generate-another-key","title":"Generate another key","text":"<p>Warning</p> <p>If you wish to use your new key with a separate client instance, make sure not to include your first key in the second setup \u2014 doing so will lead to it being slashed!</p> <p>Note</p> <p>The commands below assume you already have one key and wish to generate a second, hence <code>--validator_start_index</code> has been set to <code>1</code> (as <code>0</code> would be the original key)</p> <p>Run the following command from the directory which contains the <code>deposit</code> executable:</p> MainnetHolesky <pre><code>./deposit existing-mnemonic \\\n--validator_start_index 1 \\\n--num_validators 1 \\\n--chain mainnet\n</code></pre> <pre><code>./deposit existing-mnemonic \\\n--validator_start_index 1 \\\n--num_validators 1 \\\n--chain holesky\n</code></pre> <p>You'll be prompted to enter your mnemonic and a new password for your keystore.</p> <p>Check that the <code>validator_keys</code> directory contains an extra keystore.</p> <p>Copy the <code>validator_keys</code> directory to <code>nimbus-eth2</code>.</p> <p>Make sure you've made a deposit for your new keystore, and then follow the key import instructions of our validator guide. Your key will be added to your node on the next restart.</p>"},{"location":"networking.html","title":"Networking","text":"<p>Nimbus will automatically connect to peers based on the health and quality of peers that it's already connected to. Depending on the network and the number of validators attached to the node, Nimbus may need anywhere from 10 to 60 peers connected to operate well.</p> <p>In addition to making outgoing connections, the beacon node node works best when others can connect to it \u2014 this speeds up the process of finding good peers.</p> <p>To allow incoming connections, the node must be reachable via a public IP address. It must also be aware of this address, so that it can advertise it to its peers.</p>"},{"location":"networking.html#upnp","title":"UPnP","text":"<p>By default, Nimbus uses UPnP to set up port forwarding and detect your external IP address. If you do not have UPnP enabled, you may need to pass additional command-line options to the node, as explained in the subsequent sections.</p> <p>Enabling UPnP is usually as simple as checking a box in your router's configuration.</p>"},{"location":"networking.html#monitor-your-peer-count","title":"Monitor your Peer count","text":"<p>Note</p> <p>The <code>--max-peers</code> setting should not be set below 70. Lowering <code>max-peers</code> does not significantly improve bandwidth usage, but does increase the risk of missed attestations.</p> <p>If your Peer count is low (less than <code>15</code>) and/or you repeatedly see either of the following warnings:</p> <p><code>Peer count low, no new peers discovered...</code></p> <p>or</p> <p><code>No peers for topic, skipping publish...</code></p> <p>It means that Nimbus is unable to find a sufficient number of peers to guarantee stable operation, and you may miss attestations and blocks as a result.</p> <p>Most commonly, this happens when your computer is not reachable from the outside and therefore won't be able to accept any incoming peer connections.</p> <p>If you're on a home network, the fix here is to set up port forwarding (this may require you to pass the extip option and set enr-auto-update).</p> <p>The first step however, is to check for incoming connections.</p>"},{"location":"networking.html#check-for-incoming-connections","title":"Check for incoming connections","text":"<p>To check if you have incoming connections set, run:</p> <pre><code>curl -s http://localhost:8008/metrics | grep libp2p_open_streams\n</code></pre> <p>In the output, look for a line that looks like:</p> <pre><code>libp2p_open_streams{type=\"ChronosStream\",dir=\"in\"}\n</code></pre> <p>If there are no <code>dir=in</code> ChronosStreams, incoming connections are not working.</p> <p>Note</p> <p>You need to run the client with the <code>--metrics</code> option enabled in order for this to work</p>"},{"location":"networking.html#set-an-explicit-external-ip","title":"Set an explicit external IP","text":"<p>If you have a static public IP address, use the <code>--nat:extip:$EXT_IP_ADDRESS</code> option to pass it to the client,  where <code>$EXT_IP_ADDRESS</code> is your public IP. See here for how to determine your public IP address.</p> <p>Note</p> <p>If you have a dynamic IP, you can use <code>extip</code> the initial setting, but should also enable <code>--enr-auto-update</code> to keep it up-to-date.</p>"},{"location":"networking.html#set-enr-auto-update","title":"Set ENR auto update","text":"<p>The <code>--enr-auto-update</code> feature keeps your external IP address up to date based on information received from other peers on the network. This option is useful with ISPs that assign IP addresses dynamically.</p> <p>In practice this means relaunching the beacon node with <code>--enr-auto-update:true</code> (pass it as an option in the command line).</p>"},{"location":"networking.html#set-up-port-forwarding","title":"Set up port forwarding","text":"<p>If you're running on a home network and want to ensure you are able to receive incoming connections you may need to set up port forwarding (though some routers automagically set this up for you).</p> <p>Note</p> <p>If you are running your node on a virtual public server (VPS) instance, you can safely ignore this section.</p> <p>While the specific steps required vary based on your router, they can be summarised as follows:</p> <ol> <li>Determine your public IP address</li> <li>Determine your private IP address</li> <li>Browse to the management website for your home router (http://192.168.1.1 for most routers)</li> <li>Log in as admin</li> <li>Find the section to configure port forwarding</li> <li>Configure a port forwarding rule with the following values:<ul> <li>External port: <code>9000</code></li> <li>Internal port: <code>9000</code></li> <li>Protocol: <code>TCP</code></li> <li>IP Address: Private IP address of the computer running Nimbus</li> </ul> </li> <li>Configure a second port forwarding rule with the following values:<ul> <li>External port: <code>9000</code></li> <li>Internal port: <code>9000</code></li> <li>Protocol: <code>UDP</code></li> <li>IP Address: Private IP address of the computer running Nimbus</li> </ul> </li> </ol>"},{"location":"networking.html#determine-your-public-ip-address","title":"Determine your public IP address","text":"<p>To determine your public IP address, visit http://v4.ident.me/ or run this command:</p> <pre><code>curl v4.ident.me\n</code></pre>"},{"location":"networking.html#determine-your-private-ip-address","title":"Determine your private IP address","text":"<p>To determine your private IP address, run the appropriate command for your OS:</p> LinuxWindowsmacOS <pre><code>ip addr show | grep \"inet \" | grep -v 127.0.0.1\n</code></pre> <pre><code>ipconfig | findstr /i \"IPv4 Address\"\n</code></pre> <pre><code>ifconfig | grep \"inet \" | grep -v 127.0.0.1\n</code></pre>"},{"location":"networking.html#check-open-ports-on-your-connection","title":"Check open ports on your connection","text":"<p>Use the open ports tool to check your external (public) IP address and detect open ports on your connection (Nimbus TCP and UDP ports are both set to <code>9000</code> by default).</p>"},{"location":"networking.html#reading-the-logs","title":"Reading the logs","text":"<ul> <li> <p><code>No peers for topic, skipping publish...</code></p> <p>This is printed when the client lacks quality peers to publish attestations to - this is the most important indication that the node is having trouble keeping up. If you see this, you are missing attestations.</p> </li> <li> <p><code>Peer count low, no new peers discovered...</code></p> <p>This is a sign that you may be missing attestations.</p> </li> <li> <p><code>No external IP provided for the ENR...</code></p> <p>This message basically means that the software did not manage to find a public IP address (by either looking at your routed interface IP address, and/or by attempting to get it from your gateway through UPnP or NAT-PMP).</p> </li> <li> <p><code>Discovered new external address but ENR auto update is off...</code></p> <p>It's possible that your ISP has changed your IP address without you knowing. The first thing to do it to try relaunching the beacon node with with <code>--enr-auto-update:true</code> (pass it as an option in the command line).</p> <p>If this doesn't fix the problem, the next thing to do is to check your external (public) IP address and detect open ports on your connection - you can use this site. Note that Nimbus <code>TCP</code> and <code>UDP</code> ports are both set to <code>9000</code> by default. See above for how to set up port forwarding.</p> </li> </ul>"},{"location":"optimistic-sync.html","title":"Optimistic sync","text":"<p>Optimistic sync is the process of syncing an execution and consensus client concurrently, without having the consensus client wait for the execution client. During optimistic sync, the consensus client quickly syncs up to the latest consensus but delays verifying block execution payloads: it continuously informs the execution client of the latest consensus head, allowing the execution client to perform a snapshot sync directly to the latest state.</p> <p>Once the execution client has caught up, the consensus and execution clients work in lock-step each validating the block.</p> <p>Both execution and consensus clients must be fully synced to perform validation duties: while optimistically synced, validator duties (attestation, sync committee and block production work) are skipped.</p> <p>Running without execution client</p> <p>Nimbus continues to sync optimistically when the execution client is not available thanks to its built-in execution payload verifier.</p>"},{"location":"optimistic-sync.html#identifying-optimistic-sync","title":"Identifying optimistic sync","text":"<p>An optimistically synced node can be identified by examining the \"Slot start\" log message. When optimistically synced, the <code>sync</code> key will have a <code>/opt</code> suffix, indicating that it's waiting for the execution client to catch up:</p> <pre><code>INF 2022-10-26 18:57:35.000+02:00 Slot start        topics=\"beacnde\" slot=4998286 epoch=156196 sync=synced/opt peers=29 head=f21d399e:4998285 finalized=156194:91e2ebaf delay=467us953ns\n</code></pre>"},{"location":"options.html","title":"Command line","text":"<p>Command line options allow you to customize the way your beacon node operates.</p> <p>You pass options to the beacon node by adding them to the command line. For example, if you want to launch Nimbus on mainnet with different base ports than the default <code>9000/udp</code> and <code>9000/tcp</code>, say <code>9100/udp</code> and <code>9100/tcp</code>, run:</p> <pre><code>./run-mainnet-beacon-node.sh --tcp-port=9100 --udp-port=9100\n</code></pre>"},{"location":"options.html#available-options","title":"Available options","text":"<p>To see the full list of command line options available to you, with descriptions, run:</p> <pre><code>build/nimbus_beacon_node --help\n</code></pre> <p>You should see the following output:</p> <pre><code>Usage:\n\nnimbus_beacon_node [OPTIONS]... command\n\nThe following options are available:\n\n     --config-file             Loads the configuration from a TOML file.\n     --log-level               Sets the log level for process and topics (e.g. \"DEBUG; TRACE:discv5,libp2p;\n                               REQUIRED:none; DISABLED:none\") [=INFO].\n     --log-file                Specifies a path for the written JSON log file (deprecated).\n     --network                 The Eth2 network to join [=mainnet].\n -d, --data-dir                The directory where nimbus will store all blockchain data.\n     --validators-dir          A directory containing validator keystores.\n     --verifying-web3-signer-url  Remote Web3Signer URL that will be used as a source of validators.\n     --proven-block-property   The field path of a block property that will be sent for verification to the\n                               verifying Web3Signer (for example \".execution_payload.fee_recipient\").\n     --web3-signer-url         Remote Web3Signer URL that will be used as a source of validators.\n     --web3-signer-update-interval  Number of seconds between validator list updates [=3600].\n     --secrets-dir             A directory containing validator keystore passwords.\n     --wallets-dir             A directory containing wallet files.\n     --web3-url                One or more execution layer Engine API URLs.\n     --el                      One or more execution layer Engine API URLs.\n     --no-el                   Don't use an EL. The node will remain optimistically synced and won't be able to\n                               perform validator duties [=false].\n     --non-interactive         Do not display interactive prompts. Quit on missing configuration.\n     --netkey-file             Source of network (secp256k1) private key file (random|&lt;path&gt;) [=random].\n     --insecure-netkey-password  Use pre-generated INSECURE password for network private key file [=false].\n     --agent-string            Node agent string which is used as identifier in network [=nimbus].\n     --subscribe-all-subnets   Subscribe to all subnet topics when gossiping [=false].\n     --num-threads             Number of worker threads (\"0\" = use as many threads as there are CPU cores\n                               available) [=0].\n     --jwt-secret              A file containing the hex-encoded 256 bit secret key to be used for\n                               verifying/generating JWT tokens.\n -b, --bootstrap-node          Specifies one or more bootstrap nodes to use when connecting to the network.\n     --bootstrap-file          Specifies a line-delimited file of bootstrap Ethereum network addresses.\n     --listen-address          Listening address for the Ethereum LibP2P and Discovery v5 traffic [=*].\n     --tcp-port                Listening TCP port for Ethereum LibP2P traffic [=9000].\n     --udp-port                Listening UDP port for node discovery [=9000].\n     --max-peers               The target number of peers to connect to [=160].\n     --hard-max-peers          The maximum number of peers to connect to. Defaults to maxPeers * 1.5.\n     --nat                     Specify method to use for determining public address. Must be one of: any, none,\n                               upnp, pmp, extip:&lt;IP&gt; [=any].\n     --enr-auto-update         Discovery can automatically update its ENR with the IP address and UDP port as\n                               seen by other nodes it communicates with. This option allows to enable/disable\n                               this functionality [=false].\n     --weak-subjectivity-checkpoint  Weak subjectivity checkpoint in the format block_root:epoch_number.\n     --external-beacon-api-url  External beacon API to use for syncing (on empty database).\n     --sync-light-client       Accelerate sync using light client [=true].\n     --trusted-block-root      Recent trusted finalized block root to sync from external beacon API (with\n                               `--external-beacon-api-url`). Uses the light client sync protocol to obtain the\n                               latest finalized checkpoint (LC is initialized from trusted block root).\n     --trusted-state-root      Recent trusted finalized state root to sync from external beacon API (with\n                               `--external-beacon-api-url`).\n     --finalized-checkpoint-state  SSZ file specifying a recent finalized state.\n     --genesis-state           SSZ file specifying the genesis state of the network (for networks without a\n                               built-in genesis state).\n     --genesis-state-url       URL for obtaining the genesis state of the network (for networks without a\n                               built-in genesis state).\n     --finalized-deposit-tree-snapshot  SSZ file specifying a recent finalized EIP-4881 deposit tree snapshot.\n     --node-name               A name for this node that will appear in the logs. If you set this to 'auto', a\n                               persistent automatically generated ID will be selected for each --data-dir\n                               folder.\n     --graffiti                The graffiti value that will appear in proposed blocks. You can use a\n                               0x-prefixed hex encoded string to specify raw bytes.\n     --metrics                 Enable the metrics server [=false].\n     --metrics-address         Listening address of the metrics server [=127.0.0.1].\n     --metrics-port            Listening HTTP port of the metrics server [=8008].\n     --status-bar              Display a status bar at the bottom of the terminal screen [=true].\n     --status-bar-contents     Textual template for the contents of the status bar.\n     --rest                    Enable the REST server [=false].\n     --rest-port               Port for the REST server [=5052].\n     --rest-address            Listening address of the REST server [=127.0.0.1].\n     --rest-allow-origin       Limit the access to the REST API to a particular hostname (for CORS-enabled\n                               clients such as browsers).\n     --rest-statecache-size    The maximum number of recently accessed states that are kept in memory. Speeds\n                               up requests obtaining information for consecutive slots or epochs. [=3].\n     --rest-statecache-ttl     The number of seconds to keep recently accessed states in memory [=60].\n     --rest-request-timeout    The number of seconds to wait until complete REST request will be received\n                               [=infinite].\n     --rest-max-body-size      Maximum size of REST request body (kilobytes) [=16384].\n     --rest-max-headers-size   Maximum size of REST request headers (kilobytes) [=128].\n     --keymanager              Enable the REST keymanager API [=false].\n     --keymanager-port         Listening port for the REST keymanager API [=5052].\n     --keymanager-address      Listening port for the REST keymanager API [=127.0.0.1].\n     --keymanager-allow-origin  Limit the access to the Keymanager API to a particular hostname (for\n                               CORS-enabled clients such as browsers).\n     --keymanager-token-file   A file specifying the authorization token required for accessing the keymanager\n                               API.\n     --light-client-data-serve  Serve data for enabling light clients to stay in sync with the network [=true].\n     --light-client-data-import-mode  Which classes of light client data to import. Must be one of: none, only-new,\n                               full (slow startup), on-demand (may miss validator duties) [=only-new].\n     --light-client-data-max-periods  Maximum number of sync committee periods to retain light client data.\n     --in-process-validators   Disable the push model (the beacon node tells a signing process with the private\n                               keys of the validators what to sign and when) and load the validators in the\n                               beacon node itself [=true].\n     --discv5                  Enable Discovery v5 [=true].\n     --dump                    Write SSZ dumps of blocks, attestations and states to data dir [=false].\n     --direct-peer             The list of privileged, secure and known peers to connect and maintain the\n                               connection to. This requires a not random netkey-file. In the multiaddress\n                               format like: /ip4/&lt;address&gt;/tcp/&lt;port&gt;/p2p/&lt;peerId-public-key&gt;, or enr format\n                               (enr:-xx). Peering agreements are established out of band and must be\n                               reciprocal.\n     --doppelganger-detection  If enabled, the beacon node prudently listens for 2 epochs for attestations from\n                               a validator with the same index (a doppelganger), before sending an attestation\n                               itself. This protects against slashing (due to double-voting) but means you will\n                               miss two attestations when restarting. [=true].\n     --validator-monitor-auto  Monitor validator activity automatically for validators active on this beacon\n                               node [=true].\n     --validator-monitor-pubkey  One or more validators to monitor - works best when --subscribe-all-subnets is\n                               enabled.\n     --validator-monitor-details  Publish detailed metrics for each validator individually - may incur significant\n                               overhead with large numbers of validators [=false].\n     --suggested-fee-recipient  Suggested fee recipient.\n     --suggested-gas-limit     Suggested gas limit [=defaultGasLimit].\n     --payload-builder         Enable external payload builder [=false].\n     --payload-builder-url     Payload builder URL.\n     --local-block-value-boost  Increase execution layer block values for builder bid comparison by a percentage\n                               [=10].\n     --history                 Retention strategy for historical data (archive/prune) [=HistoryMode.Prune].\n\n...\n</code></pre> <p>Any <code>debug</code>-prefixed flags are considered ephemeral and subject to removal without notice.</p>"},{"location":"options.html#configuration-files","title":"Configuration files","text":"<p>All command line options can also be provided in a TOML config file specified through the <code>--config-file</code> flag. Within the config file, you need to use the long names of all options. Please note that certain options such as <code>web3-url</code>, <code>bootstrap-node</code>, <code>direct-peer</code>, and <code>validator-monitor-pubkey</code> can be supplied more than once on the command line: in the TOML file, you need to supply them as arrays.</p> <p>There are also some minor differences in the parsing of certain option values in the TOML files in order to conform more closely to existing TOML standards. For example, you can freely use keywords such as <code>on</code>, <code>off</code>, <code>yes</code> and <code>no</code> on the command-line as synonyms for the canonical values <code>true</code> and <code>false</code> which are mandatory to use in TOML. Options affecting Nimbus sub-commands should appear in a section of the file matching the sub-command name.</p> <p>Here is an example config file illustrating all of the above:</p> <p>nimbus-eth2.toml</p> <pre><code># Comments look like this\ndoppelganger-detection = true\nweb3-url = [\"http://127.0.0.1:8551\"]\nnum-threads = 0\n\n[trustedNodeSync]\ntrusted-node-url = \"http://192.168.1.20:5052\"\n</code></pre>"},{"location":"options.html#exit-codes","title":"Exit Codes","text":"Exit code Description 0 Successful exit 1 Generic failure or unspecified error 129 Doppelganger detection; one might prefer not to restart automatically"},{"location":"pi-guide.html","title":"Raspberry Pi","text":"<p>I expect the new Raspberry Pi 4 (4GB RAM option, external SSD) to handle an Eth2 validator node without breaking a sweat. That's $100 of hardware running at 10 Watts to support a 32 ETH node (currently ~$10K stake).</p>\u2014 Justin \u00d0rake (@drakefjustin) June 24, 2019 <p>Note</p> <p>While this guide is based on Raspberry Pi 4 which was the newest version at the time of writing, growth of the validator set and chain complexity has led to increased hardware requirements for running a node. A Pi 4 might still be able to keep up, but your experience will be much better with the 8GB version of Pi 5 (or similar single-board computer such as Rock 5B).</p> <p>In addition to this guide, we highly recommend this wonderful and complementary resource by community member Joe Clapis.</p>"},{"location":"pi-guide.html#introduction","title":"Introduction","text":"<p>This page will take you through how to use your laptop to program your Raspberry Pi.</p> <p>One of the most important aspects of the Raspberry Pi experience is trying to make it as easy as possible to get started. As such, we try our best to explain things from first-principles.</p>"},{"location":"pi-guide.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Raspberry Pi 4 4GB (8GB recommended if also running execution client)</li> <li>64GB microSD Card</li> <li>microSD USB adapter</li> <li>5V 3A USB-C charger</li> <li>Reliable Wi-Fi connection</li> <li>Laptop</li> <li>Basic understanding of the command line</li> <li>200GB SSD (2TB recommended if also running execution client)</li> </ul> <p>Note</p> <p>You will need an SSD to run the Nimbus: mechanical hard drives are typically too slow to run an Ethereum node. You have two options:</p> <ol> <li>Use an USB portable SSD disk such as the Samsung T5 Portable SSD.</li> <li>Use an USB 3.0 External Hard Drive Case with a SSD Disk.    For example, Ethereum on Arm use an Inateck 2.5 Hard Drive Enclosure FE2011.    Make sure to buy a case with an UASP compliant chip, particularly, one of these: JMicron (JMS567 or JMS578) or ASMedia (ASM1153E).</li> </ol> <p>In both cases, avoid low quality SSD disks (the SSD is a key component of your node and can drastically affect both the performance and sync time). Keep in mind that you need to plug the disk to an USB 3.0 port (the blue port).</p> <p>Note</p> <p>If you have a Raspberry Pi 4 and are getting bad speeds transferring data to/from USB3.0 SSDs, please read this recommended fix.</p>"},{"location":"pi-guide.html#steps","title":"Steps","text":""},{"location":"pi-guide.html#1-download-raspberry-pi-imager","title":"1. Download Raspberry Pi Imager","text":"<p>Raspberry Pi Imager is an imaging utility that makes it simple to manage your microSD card with Raspberry Pi OS (the free Pi operating system based on Debian, previously called Raspbian).</p> <p>You can find the download link for your operating system here: Windows, macOS, Ubuntu.</p>"},{"location":"pi-guide.html#2-download-64-bit-raspberry-pi-os","title":"2. Download 64-bit Raspberry Pi OS","text":"<p>You need to install the 64-bit version of Raspberry Pi OS. You can find the latest version, here.</p>"},{"location":"pi-guide.html#3-plug-in-sd-card","title":"3. Plug in SD card","text":"<p>Use your microSD to USB adapter to plug the SD card into your computer.</p>"},{"location":"pi-guide.html#4-download-raspberry-pi-os","title":"4. Download Raspberry Pi OS","text":"<p>Open Raspberry Pi Imager and click on CHOOSE OS:</p> <p></p> <p>Scroll down and click on Use custom:</p> <p></p> <p>Find the OS you downloaded in step 2:</p> <p></p>"},{"location":"pi-guide.html#4b-write-to-sd-card","title":"4b. Write to SD card","text":"<p>Click on CHOOSE SD CARD. You should see a menu pop-up with your SD card listed -- Select it</p> <p></p> <p>Click on WRITE</p> <p></p> <p>Click YES</p> <p></p> <p>Make a cup of coffee :)</p>"},{"location":"pi-guide.html#5-set-up-wireless-lan","title":"5. Set up wireless LAN","text":"<p>Since you have loaded Raspberry Pi OS onto a blank SD card, you will have two partitions. The first one, which is the smaller one, is the <code>boot</code> partition.</p> <p>Create a <code>wpa_supplicant</code> configuration file in the <code>boot</code> partition with the following content:</p> <pre><code># wpa_supplicant.conf\n\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=&lt;Insert 2 letter ISO 3166-1 country code here&gt;\n\nnetwork={\n    ssid=\"&lt;Insert your Wifi network's name here&gt;\"\n    psk=\"&lt;Insert your Wifi network's password here&gt;\"\n}\n</code></pre> <p>Note</p> <p>Don't forget to replace the placeholder <code>country</code>, <code>ssid</code>, and <code>psk</code> values. See Wikipedia for a list of 2 letter <code>ISO 3166-1</code> country codes.</p>"},{"location":"pi-guide.html#6-enable-ssh-using-linux-or-macos","title":"6. Enable SSH (using Linux or macOS)","text":"<p>You can access the command line of a Raspberry Pi remotely from another computer or device on the same network using SSH.</p> <p>While SSH is not enabled by default, you can enable it by placing a file named <code>ssh</code>, without any extension, onto the boot partition of the SD card.</p> <p>When the Pi boots, it will look for the <code>ssh</code> file. If it is found, SSH is enabled and the file is deleted. The content of the file does not matter; it can contain text, or nothing at all.</p> <p>To create an empty <code>ssh</code> file, from the home directory of the <code>boot</code> partition file, run:</p> <pre><code>touch ssh\n</code></pre>"},{"location":"pi-guide.html#7-find-your-pis-ip-address","title":"7. Find your Pi's IP address","text":"<p>Since Raspberry Pi OS supports Multicast_DNS out of the box, you can reach your Raspberry Pi by using its hostname and the <code>.local</code> suffix.</p> <p>The default hostname on a fresh Raspberry Pi OS install is <code>raspberrypi</code>, so any Raspberry Pi running Raspberry Pi OS should respond to:</p> <pre><code>ping raspberrypi.local\n</code></pre> <p>The output should look more or less as follows:</p> <pre><code>PING raspberrypi.local (195.177.101.93): 56 data bytes\n64 bytes from 195.177.101.93: icmp_seq=0 ttl=64 time=13.272 ms\n64 bytes from 195.177.101.93: icmp_seq=1 ttl=64 time=16.773 ms\n64 bytes from 195.177.101.93: icmp_seq=2 ttl=64 time=10.828 ms\n...\n</code></pre> <p>Keep note of your Pi's IP address. In the above case, that's <code>195.177.101.93</code></p>"},{"location":"pi-guide.html#8-ssh-using-linux-or-macos","title":"8. SSH (using Linux or macOS)","text":"<p>Connect to your Pi by running:</p> <pre><code>ssh pi@195.177.101.93\n</code></pre> <p>You'll be prompted to enter a password: <pre><code>pi@195.177.101.93's password:\n</code></pre></p> <p>Enter the Pi's default password: <code>raspberry</code></p> <p>You should see a message that looks like the following: <pre><code>Linux raspberrypi 5.4.51-v8+ #1333 SMP PREEMPT Mon Aug 10 16:58:35 BST 2020 aarch64\n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\nLast login: Thu Aug 20 12:59:01 2020\n\nSSH is enabled and the default password for the 'pi' user has not been changed.\nThis is a security risk - please login as the 'pi' user and type 'passwd' to set a new password.\n</code></pre></p> <p>Followed by a command-line prompt indicating a successful connection:</p> <pre><code>pi@raspberrypi:~ $\n</code></pre>"},{"location":"pi-guide.html#9-increase-swap-size-to-2gb","title":"9. Increase swap size to 2GB","text":"<p>The first step is to increase the swap size to 2GB (2048MB).</p> <p>Note</p> <p>Swap acts as a breather to your system when the RAM is exhausted. When the RAM is exhausted, your Linux system uses part of the hard disk memory and allocates it to the running application.</p> <p>Use the Pi's built-in text editor nano to open up the swap file:</p> <pre><code>sudo nano /etc/dphys-swapfile\n</code></pre> <p>Change the value assigned to <code>CONF_SWAPSIZE</code> from <code>100</code> to <code>2048</code>:</p> <pre><code>...\n\n# set size to absolute value, leaving empty (default) then uses computed value\n#   you most likely don't want this, unless you have a special disk situation\nCONF_SWAPSIZE=2048\n\n...\n</code></pre> <p>Save (<code>Ctrl+S</code>) and exit (<code>Ctrl+X</code>).</p>"},{"location":"pi-guide.html#10-reboot","title":"10. Reboot","text":"<p>Reboot your Pi to have the above changes take effect:</p> <pre><code>sudo reboot\n</code></pre> <p>This will cause your connection to close. So you'll need to <code>ssh</code> into your Pi again:</p> <pre><code>ssh pi@195.177.101.93\n</code></pre> <p>Note</p> <p>Remember to replace <code>195.177.101.93</code> with the IP address of your Pi.</p>"},{"location":"pi-guide.html#10b-boot-from-external-ssd","title":"10b. Boot from external SSD","text":"<p>Follow this RPi4 guide to copy the contents of your SD card over to your SSD, and boot your Pi from your SSD.</p> <p>Tip</p> <p>Make sure you connect your SSD the Pi's USB 3 port (the blue port).</p> <p>If your Pi is headless (no monitor attached) you can use the <code>rpi-clone</code> repository to copy the contents of the SD over to the SSD; in a nutshell, replace steps 14 and 15 of the above guide with the following commands (which you should run from the Pi's <code>home</code> directory):</p> <pre><code>git clone https://github.com/billw2/rpi-clone.git\ncd rpi-clone\nsudo cp rpi-clone rpi-clone-setup /usr/local/sbin\nsudo rpi-clone-setup -t testhostname\nrpi-clone sda\n</code></pre> <p>For more on <code>raspi-config</code>, see here.</p> <p>Tip</p> <p>To shutdown your Pi safely, run <code>sudo shutdown -h now</code></p> <p>Once you're done, <code>ssh</code> back into your Pi.</p>"},{"location":"pi-guide.html#11-overclocking","title":"11. Overclocking","text":"<p>Nimbus requires the Raspberry Pi to be overclocked.</p> <p>To overclock your Raspberry Pi, you need to add two lines to the <code>/boot/firmware/usercfg.txt</code> file:</p> <pre><code>sudo nano /boot/firmware/usercfg.txt\n</code></pre> <p>Add the following two lines to the end of the file:</p> <pre><code>arm_freq=1800\nover_voltage=3\n</code></pre> <p>Save the file and reboot. This increases the CPU clock from 1500 MHz to 1800 MHz and raises the CPU voltage from 0.88 V to 0.93 V.</p> <p>To read more about testing the stability of an overclock and benchmarking, follow the RPi overclocking guide by Joe Clapis.</p>"},{"location":"pi-guide.html#12-install-the-beacon-node","title":"12. Install the beacon node","text":"Using package managerManual installation <ol> <li> <p>Add Status APT repository to your system.</p> <pre><code>echo 'deb https://apt.status.im/nimbus all main' | sudo tee /etc/apt/sources.list.d/nimbus.list\n\n# Import the GPG key used to sign the releases:\nsudo curl https://apt.status.im/pubkey.asc -o /etc/apt/trusted.gpg.d/apt-status-im.asc\n</code></pre> </li> <li> <p>Install Nimbus using APT:</p> <pre><code>sudo apt-get update\nsudo apt-get install nimbus-beacon-node nimbus-validator-client\n</code></pre> </li> </ol> <p>Open the Nimbus eth2 releases page, go to the Assets on the bottom of the page, and copy the link for the file that starts with <code>nimbus-eth2_Linux_arm64v8</code>.</p> <p>Run this in your home directory to download nimbus-eth2:</p> <pre><code>mkdir nimbus-eth2\nwget &lt;insert download link here&gt;\ntar -xzf nimbus-eth2_Linux_arm64v8*.tar.gz -C nimbus-eth2\nrm nimbus-eth2_Linux_arm64v8*.tar.gz\n</code></pre> <p>Now you can find the software in the nimbus-eth2 directory.</p>"},{"location":"pi-guide.html#13-copy-signing-key-over-to-pi","title":"13. Copy signing key over to Pi","text":"<p>Note</p> <p>If you haven't generated your validator key(s) and/or made your deposit yet, follow the deposit instructions of our validator guide before carrying on.</p> <p>We'll use the <code>scp</code> command to send files over SSH. It allows you to copy files between computers, say from your Raspberry Pi to your desktop/laptop, or vice-versa.</p> <p>Copy the folder containing your validator key(s) from your computer to your <code>pi</code>'s home folder by opening up a new terminal window and running the following command:</p> <pre><code>scp -r &lt;VALIDATOR_KEYS_DIRECTORY&gt; pi@195.177.101.93:\n</code></pre> <p>Note</p> <p>Don't forget the colon (:) at the end of the command!</p> <p>As usual, replace <code>195.177.101.93</code> with your Pi's IP address, and <code>&lt;VALIDATOR_KEYS_DIRECTORY&gt;</code> with the full pathname of your <code>validator_keys</code> directory (if you used the Launchpad command line app this would have been created for you when you generated your keys).</p> <p>Tip</p> <p>Run <code>pwd</code> in your <code>validator_keys</code> directory to print the full pathname to the console.</p>"},{"location":"pi-guide.html#14-import-signing-key-into-nimbus","title":"14. Import signing key into Nimbus","text":"<p>Depending on your installation method, run these commands to import your signing key into Nimbus:</p> Using package managerManual installation <pre><code># Run import command as the `nimbus` user\nsudo -u nimbus /usr/bin/nimbus_beacon_node deposits import --data-dir=/var/lib/nimbus/shared_holesky_0 /path/to/keys\n</code></pre> <p>To import your signing key into Nimbus, from the <code>nimbus-eth2</code> directory run.</p> <pre><code>build/nimbus_beacon_node deposits import --data-dir=build/data/shared_holesky_0 ../validator_keys\n</code></pre> <p>You'll be asked to enter the password you created to encrypt your keystore(s).  Don't worry, this is entirely normal.  Your validator client needs both your signing keystore(s) and the password encrypting it to import your key (since it needs to decrypt the keystore in order to be able to use it to sign on your behalf).</p>"},{"location":"pi-guide.html#15-connect-to-holesky","title":"15. Connect to Holesky","text":"<p>We're finally ready to connect to the Holesky testnet!</p> <p>Note</p> <p>If you haven't already, we recommend registering for, and running, your own eth1 node in parallel. For instructions on how to do so, see the eth1 page.</p> <p>To connect to Holesky, run:</p> Using package managerManual installation <pre><code>sudo -u nimbus /usr/bin/nimbus_beacon_node --network=holesky --data-dir=/var/lib/nimbus/shared_holesky_0\n</code></pre> <pre><code>./run-holesky-beacon-node.sh\n</code></pre>"},{"location":"pi-guide.html#16-check-for-successful-connection","title":"16. Check for successful connection","text":"<p>If you look near the top of the logs printed to your console, you should see confirmation that your beacon node has started, with your local validator attached:</p> <pre><code>INF 2023-10-01 11:25:33.487+01:00 Launching beacon node\n...\nINF 2023-10-01 11:25:34.556+01:00 Loading block dag from database            topics=\"beacnde\" tid=19985314 file=nimbus_beacon_node.nim:198 path=build/data/shared_holesky_0/db\nINF 2023-10-01 11:25:35.921+01:00 Block dag initialized\nINF 2023-10-01 11:25:37.073+01:00 Generating new networking key\n...\nNTC 2023-10-01 11:25:45.267+00:00 Local validator attached                   tid=22009 file=validator_pool.nim:33 pubkey=95e3cbe88c71ab2d0e3053b7b12ead329a37e9fb8358bdb4e56251993ab68e46b9f9fa61035fe4cf2abf4c07dfad6c45 validator=95e3cbe8\n...\nNTC 2023-10-01 11:25:59.512+00:00 Eth1 sync progress                         topics=\"eth1\" tid=21914 blockNumber=3836397 depositsProcessed=106147\nNTC 2023-10-01 11:26:02.574+00:00 Eth1 sync progress                         topics=\"eth1\" tid=21914 blockNumber=3841412 depositsProcessed=106391\n...\nINF 2023-10-01 11:26:31.000+00:00 Slot start                                 topics=\"beacnde\" tid=21815 file=nimbus_beacon_node.nim:505 lastSlot=96566 scheduledSlot=96567 beaconTime=1w6d9h53m24s944us774ns peers=7 head=b54486c4:96563 headEpoch=3017 finalized=2f5d12e4:96479 finalizedEpoch=3014\nINF 2023-10-01 11:26:36.285+00:00 Slot end                                   topics=\"beacnde\" tid=21815 file=nimbus_beacon_node.nim:593 slot=96567 nextSlot=96568 head=b54486c4:96563 headEpoch=3017 finalizedHead=2f5d12e4:96479 finalizedEpoch=3014\n</code></pre> <p>To keep track of your syncing progress, have a look at the output at the very bottom of the terminal window in which your validator is running. You should see something like:</p> <pre><code>peers: 15 \u276f finalized: ada7228a:8765 \u276f head: b2fe11cd:8767:2 \u276f time: 9900:7 (316807) \u276f sync: wPwwwwwDwwDPwPPPwwww:7:1.2313:1.0627:12h01m(280512)\n</code></pre> <p>Keep an eye on the number of peers you're currently connected to (in the above case that's <code>15</code>), as well as your sync progress.</p> <p>Note</p> <p>15 - 20 peers and an average sync speed of 0.5 - 1.0 blocks per second is normal on <code>Holesky</code> with a Pi. If your sync speed is much slower than this, the root of the problem may be your USB3.0 to SSD adapter. See this post for a recommended workaround.</p>"},{"location":"pi-guide.html#mainnet-advice","title":"Mainnet advice","text":"<p>Whether or not your Pi is up to the task will depend on a number of factors such as SSD speed, network connectivity, etc. As such, it's best to verify performance on a testnet first.</p> <p>The best thing you can do is to set your Pi to run Holesky. If you have no trouble syncing and attesting on Holesky, your setup should good enough for mainnet as well.</p> <p>We've been running lots of PIs and NanoPCs 24/7 for 3 years and never got a hardware fail. It is easy (and cheap) to get redundancy of components (even spare PIs in different locations, more of this to come).</p>\u2014 Ethereum on ARM (@EthereumOnARM) November 28, 2020 <p>Although we don't expect a modern Pi to fail, we recommend buying a spare Pi, and enterprise grade SSD, on the off-chance it does; keep your original SD around, to make it easy for you to copy the image over.</p>"},{"location":"pi-guide.html#systemd","title":"Systemd","text":"<p>Now that you have Nimbus up and running, we recommend setting up a systemd service with an autorestart on boot (should you experience an unexpected power outage, this will ensure your validator restarts correctly).</p> <p>Systemd will also ensure your validator keeps running when you exit your ssh session (<code>Ctrl-C</code>) and/or switch off your laptop.</p> <p>For the details on how to do this, see our systemd guide.</p>"},{"location":"prater.html","title":"Prater","text":"<p>This page has been removed.</p> <p>Use the Hole\u0161ky testnet.</p>"},{"location":"preparation.html","title":"Mainnet checklist","text":""},{"location":"preparation.html#latest-software","title":"Latest software","text":"<p>Please check that you are running the latest stable Nimbus software release.</p> <p>Tip</p> <p>In order to stay on top of new releases you should subscribe to our mailing list.</p>"},{"location":"preparation.html#more-than-15-peers","title":"More than 15 peers","text":"<p>Please check that your node has at least 15 peers. To monitor your peer count, pay attention to the <code>Slot start</code> messages in your logs. See the networking page for more tips.</p>"},{"location":"preparation.html#validator-attached","title":"Validator attached","text":"<p>Please check that your validator is attached to your node.</p>"},{"location":"preparation.html#systemd","title":"Systemd","text":"<p>We recommend setting up a systemd service with an autorestart on boot. Should you experience an unexpected power outage, this will ensure your validator restarts correctly.</p> <p>Systemd will also ensure your validator keeps running when you exit your ssh session (<code>Ctrl-C</code>) and/or switch off your laptop.</p>"},{"location":"preparation.html#ethereum-foundations-checklist","title":"Ethereum Foundation's Checklist","text":"<p>As a final check, we recommend you also go through the EF'S staker checklist.</p>"},{"location":"profits.html","title":"Optimize for profitability","text":"<p>Key insights:</p> <ul> <li>Profitability depends heavily on the network and peer quality.</li> <li>While block proposals are more lucrative than attestations, they are much rarer.</li> </ul>"},{"location":"profits.html#check-for-next-action-before-restarting","title":"Check for next action before restarting","text":"<p>To see when your validator is next due to make an attestation or proposal pay attention to the <code>Slot end</code> messages in your logs: <pre><code>INF 2021-05-31 17:46:11.094+02:00 Slot end\ntopics=\"beacnde\" tid=213670 file=nimbus_beacon_node.nim:932\nslot=1304329\nnextSlot=1304330\nhead=cffee454:38460\nheadEpoch=1201\nfinalizedHead=077da232:38368\nfinalizedEpoch=1199\nnextAttestationSlot=338638\nnextProposalSlot=-1\nnextActionWait=4m35s874ms405us837ns\n</code></pre></p> <p>Specifically, have a look at <code>nextActionWait</code> time.</p> <p>If you're concerned about missing an attestation or proposal, wait until <code>nextActionWait</code> is greater than 4 minutes or so before restarting Nimbus.</p> <p>You can also use the <code>nimbus-eth2</code> API. For example, to check if your validator has a next Proposal slot assigned, run:</p> <pre><code>curl -d '{\"jsonrpc\":\"2.0\",\"method\":\"get_v1_validator_duties_proposer\",\"params\":[${HEAD_EPOCH_NUMBER}],\"id\":1}' -H 'Content-Type: application/json' localhost:9190 -s | jq \".result[]\" | grep ${PATTERN_WHICH_MATCHES_VALIDATOR_PUBLIC_KEYS}\n</code></pre>"},{"location":"profits.html#subscribe-to-all-subnets","title":"Subscribe to all subnets","text":"<p>Launching the beacon node with the <code>--subscribe-all-subnets</code> option increases bandwidth and cpu usage, but helps the network and makes the block production algorithm perform slightly better.</p> <p>To elaborate a little, without this option enabled Nimbus only listens to a subset of the attestation traffic: in particular, Nimbus doesn't listen to all unaggregated traffic but instead relies on peers to aggregate attestations on the subnets it doesn't subscribe to. </p> <p>With this option enabled, Nimbus listens to all unaggregated channels (subscribes to all subnets). Practically speaking, this means that when producing a block, Nimbus can \"top up\" the aggregates that other peers have made with it's own unaggregated attestations. This can lead to better packing in some cases, which can lead to slightly greater rewards.</p>"},{"location":"profits.html#useful-resources","title":"Useful resources","text":"<ul> <li> <p>The journey of a validator balance</p> </li> <li> <p>Validator rewards in practice</p> </li> </ul>"},{"location":"quick-start.html","title":"Beacon node","text":"<p>This page takes you through the steps of getting a standard installation of the Nimbus beacon node running.</p> <p>The quickstart setup involves running two nodes: an execution client and a beacon node. Both are needed to run a full Ethereum setup.</p> <p>To become a validator, you first need to set up a beacon node.</p> <p>The beacon node connects to the beacon chain network, syncs historical data, and provides API's to monitor and interact with the beacon chain. Running a beacon node is a worthwhile endeavor even if you are not planning on validating yourself!</p> <p>The guide assumes Ubuntu Linux is being used, and therefore some familiarity with the Linux command line is needed.</p> <p>Tip</p> <p>You can practice running the node safely on the Holesky testnet. Throughout, we'll provide instructions for both Holesky and Mainnet.</p>"},{"location":"quick-start.html#steps","title":"Steps","text":""},{"location":"quick-start.html#1-prepare","title":"1. Prepare","text":"<p>Prepare your machine by installing Nimbus' dependencies.</p>"},{"location":"quick-start.html#2-set-up-an-execution-client","title":"2. Set up an execution client","text":"<p>To run a beacon node, you need to have access to an execution client exposing the web3 API. Throughout, we'll assume an execution client is running on the same machine as the beacon node, but this is not required.</p> <p>See the execution client guide for instructions on how to pick and install an execution client.</p>"},{"location":"quick-start.html#3-install-nimbus","title":"3. Install Nimbus","text":"Download binariesBuild from source <p>Binary releases are available from GitHub and our APT repository (Debian/Ubuntu).</p> <p>We currently have binaries available for Linux <code>AMD64</code>, <code>ARM</code> and <code>ARM64</code>, Windows <code>AMD64</code> and macOS (<code>AMD64</code> and <code>ARM64</code>).</p> <p>See the binaries guide on how to install them.</p> <p>Building Nimbus from source is simple and fully automated. Follow the build guide.</p>"},{"location":"quick-start.html#4-sync-from-a-trusted-node","title":"4. Sync from a trusted node","text":"<p>While this step is not mandatory, since Nimbus will automatically start syncing process on the first start, we recommend doing it as it will allow you to get started in minutes instead of hours or even days.</p> <p>Follow our trusted node sync guide.</p>"},{"location":"quick-start.html#5-start-the-node","title":"5. Start the node","text":"<p>Once you've completed previous steps, it is time to start the beacon node.</p> <p>If you have skipped the syncing from a trusted node step, starting the node will initiate the syncing process.</p> <pre><code>cd nimbus-eth2\n</code></pre> MainnetHolesky <pre><code># Start a mainnet node\n./run-mainnet-beacon-node.sh --web3-url=http://127.0.0.1:8551 --jwt-secret=/tmp/jwtsecret\n</code></pre> <pre><code># Start a holesky testnet node\n./run-holesky-beacon-node.sh --web3-url=http://127.0.0.1:8551 --jwt-secret=/tmp/jwtsecret\n</code></pre> <p>Once the beacon node starts, you'll see it logging information to the console, like so:</p> <pre><code>INF 2022-07-19 15:42:58.145+02:00 Launching beacon node                      topics=\"beacnde\" version=v22.10.1-97a1cdc4-stateofus ...\n</code></pre> <p>Congratulations! Your beacon node is up and running!</p> <p>What next?</p> <ul> <li>If you will be running the node on a regular basis, it is recommended that you set up a systemd service that automatically restarts your node if the computer reboots.</li> <li>If you wish to stake, continue your journey by following the validator quick start.</li> <li>The monitoring page contains information about how to keep your node healthy.</li> </ul>"},{"location":"resources.html","title":"Resources","text":"<ul> <li> <p>ethstaker discord: great place for tips and discussions</p> </li> <li> <p>Validator launchpad: to send deposits</p> </li> <li> <p>Beacon chain explorer: to monitor network health</p> </li> <li> <p>Nimbus discord: best place to ask questions and to stay up-to-date with critical updates</p> </li> <li> <p>Ethereum on ARM: Raspberry Pi 4 image + tutorial: turn your Raspberry Pi 4 into an eth1 or eth2 node just by flashing the MicroSD card</p> </li> </ul>"},{"location":"rest-api.html","title":"Beacon API","text":"<p>Nimbus exposes an extremely fast implementation of the standard Beacon API. The API allows you to use Nimbus together with third-party tooling such as validator clients, block explorers, as well as your own monitoring infrastructure.</p> <p>The Beacon API is a <code>REST</code> interface accessed via <code>http</code>. If you wish to expose the beacon node to the public internet, it is recommended to use a proxy such as <code>nginx</code> to provide caching and SSL support.</p> <p>Warning</p> <p>If you are running validators with your beacon node, do not expose the REST API to the public internet or use the same beacon node for deep historical queries: doing so may negatively affect validator performance.</p>"},{"location":"rest-api.html#test-your-tooling-against-our-servers","title":"Test your tooling against our servers","text":"<p>The API is available from:</p> <ul> <li><code>http://testing.mainnet.beacon-api.nimbus.team/</code></li> <li><code>http://unstable.mainnet.beacon-api.nimbus.team/</code></li> <li><code>http://unstable.holesky.beacon-api.nimbus.team/</code></li> </ul> <p>You can make requests as follows (here we are requesting the version the Nimbus software version of the node in question):</p> Mainnet testing branchMainnet unstable branchHolesky unstable branch <pre><code>curl -X GET http://testing.mainnet.beacon-api.nimbus.team/eth/v1/node/version\n</code></pre> <pre><code>curl -X GET http://unstable.mainnet.beacon-api.nimbus.team/eth/v1/node/version\n</code></pre> <pre><code>curl -X GET  http://unstable.holesky.beacon-api.nimbus.team/eth/v1/node/version\n</code></pre> <p>The test endpoints are part of pre-release testing and run an unstable version of Nimbus. We welcome reports about any problems you might have with them.</p> <p>They may also be unresponsive at times: please do not rely on them for validation. We may also disable them at any time without warning.</p>"},{"location":"rest-api.html#configure-your-node-to-run-a-local-rest-server","title":"Configure your node to run a local REST server","text":"<p>By default, the REST interface is disabled. To enable it, start the beacon node with the <code>--rest</code> option:</p> <pre><code>./run-mainnet-beacon-node.sh --rest\n</code></pre> <p>Then access the API from <code>http://localhost:5052/</code>. For example, to get the version of the Nimbus software your node is running:</p> <pre><code>curl -X GET http://localhost:5052/eth/v1/node/version\n</code></pre> <p>By default, only connections from the same machine are entertained. The port and listening address can be further configured through the options <code>--rest-port</code> and <code>--rest-address</code>.</p> <p>Warning</p> <p>If you are using a validator client with a Nimbus beacon node, and running a Nimbus version prior to <code>v1.5.5</code>, then you will need to launch the node with the <code>--subscribe-all-subnets</code> option enabled (in addition to the <code>--rest</code> option).</p>"},{"location":"rest-api.html#some-useful-commands","title":"Some useful commands","text":""},{"location":"rest-api.html#standard-endpoints","title":"Standard endpoints","text":"<p>While these are all well documented in the official docs, here are a handful of simple examples to get you started:</p>"},{"location":"rest-api.html#genesis","title":"Genesis","text":"<p>Retrieve details of the chain's genesis which can be used to identify chain.</p> With our mainnet testing serverWith your own local server <pre><code>curl -X GET http://unstable.mainnet.beacon-api.nimbus.team/eth/v1/beacon/genesis\n</code></pre> <pre><code>curl -X GET http://localhost:5052/eth/v1/beacon/genesis\n</code></pre>"},{"location":"rest-api.html#deposit-contract","title":"Deposit contract","text":"<p>Get deposit contract address (retrieve Eth1 deposit contract address and chain ID).</p> With our mainnet testing serverWith your own local server <pre><code>curl -X GET http://unstable.mainnet.beacon-api.nimbus.team/eth/v1/config/deposit_contract\n</code></pre> <pre><code>curl -X GET http://localhost:5052/eth/v1/config/deposit_contract\n</code></pre>"},{"location":"rest-api.html#peer-count","title":"Peer count","text":"<p>Get peer count:</p> With our mainnet testing serverWith your own local server <pre><code>curl -X GET http://unstable.mainnet.beacon-api.nimbus.team/eth/v1/node/peer_count\n</code></pre> <pre><code>curl -X GET http://localhost:5052/eth/v1/node/peer_count\n</code></pre>"},{"location":"rest-api.html#syncing-status","title":"Syncing status","text":"<p>Get node syncing status (requests the beacon node to describe if it's currently syncing or not, and if it is, what block it is up to)</p> With our mainnet testing serverWith your own local server <pre><code>curl -X GET http://unstable.mainnet.beacon-api.nimbus.team/eth/v1/node/syncing\n</code></pre> <pre><code>curl -X GET http://localhost:5052/eth/v1/node/syncing\n</code></pre>"},{"location":"rest-api.html#fork-schedule","title":"Fork schedule","text":"<p>Get scheduled upcoming forks (retrieve all forks, past present and future, of which this node is aware)</p> With our mainnet testing serverWith your own local server <pre><code>curl -X GET http://unstable.mainnet.beacon-api.nimbus.team/eth/v1/config/fork_schedule\n</code></pre> <pre><code>curl -X GET http://localhost:5052/eth/v1/config/fork_schedule\n</code></pre>"},{"location":"rest-api.html#nimbus-specific-endpoints","title":"Nimbus specific endpoints","text":"<p>In addition to supporting the standard endpoints, Nimbus has a set of specific endpoints which augment the standard API.</p>"},{"location":"rest-api.html#check-graffiti-string","title":"Check Graffiti String","text":"With our mainnet testing serverWith your own local server <pre><code>curl -X GET http://testing.mainnet.beacon-api.nimbus.team/nimbus/v1/graffiti\n</code></pre> <pre><code>curl -X GET http://localhost:5052/nimbus/v1/graffiti\n</code></pre>"},{"location":"rest-api.html#set-graffiti-string","title":"Set Graffiti String","text":"With your own local server <pre><code>curl -X POST http://localhost:5052/nimbus/v1/graffiti -H  \"Content-Type: text/plain\" -d \"new graffiti\"\n</code></pre>"},{"location":"rest-api.html#set-log-level","title":"Set Log Level","text":"<p>TBA</p>"},{"location":"rest-api.html#specification","title":"Specification","text":"<ul> <li> <p>The complete API specification is well documented here</p> </li> <li> <p>See the repository Readme here</p> </li> </ul>"},{"location":"run-a-validator.html","title":"Validating","text":"<p>Once your beacon node is running, the next step is to set up a validator.</p> <p>Nimbus doesn't require setting up a separate validator client process \u2014 the beacon node can itself perform validator duties. This is a simple, safe and efficient way to get started.</p> <p>Separate validator client</p> <p>While not needed, advanced users may want to use a separate validator client instead.</p>"},{"location":"run-a-validator.html#overview","title":"Overview","text":"<p>To start validating, you need to do these three steps, explained in more detail below:</p> <ol> <li>Make a deposit for your validator.</li> <li>Import your validator keys into Nimbus.</li> <li>Start performing validator duties by restarting the node.</li> </ol>"},{"location":"run-a-validator.html#1-make-a-deposit-for-your-validator","title":"1. Make a deposit for your validator","text":"<p>To make a deposit, you will need to generate keys then submit a deposit transaction to the execution chain.</p> <p>Launchpad</p> <p>The process of setting up a validator is also documented at the Ethereum launchpad site:</p> <ul> <li>Mainnet</li> <li>Holesky EthStaker Launchpad or Holesky EF Launchpad</li> </ul> <p>Tip</p> <p>Before running your validator on Mainnet, you can (and should) verify that your setup works as expected by running it on the Holesky testnet.</p>"},{"location":"run-a-validator.html#1-download-the-deposit-tool","title":"1. Download the deposit tool","text":"<p>Start by downloading and unpacking the deposit tool provided by the Ethereum Foundation:</p> <pre><code># Enter the nimbus folder\ncd nimbus-eth2\n\n# Make sure to get the latest version from the download page\nwget https://github.com/ethereum/staking-deposit-cli/releases/download/v2.2.0/staking_deposit-cli-9ab0b05-linux-amd64.tar.gz\n\n# Unpack the archive\ntar xvf staking_deposit-cli-9ab0b05-linux-amd64.tar.gz --strip-components 2\n</code></pre>"},{"location":"run-a-validator.html#2-generate-keys","title":"2. Generate keys","text":"<p>Live image</p> <p>You can increase the security of this process by downloading a Live Linux image. To do so, copy <code>deposit</code> to a USB stick, boot into the live image, and run the tool from inside the image. Make sure you don't enable Wi-Fi and unplug any Ethernet cables when using this process.</p> <p>The deposit tool generates a seed phrase, and uses this to create validator and withdrawal keys.</p> <p>Seed phrase</p> <p>If you lose you seed phrase and your withdrawal key, your funds will be lost forever!</p> MainnetHolesky <pre><code># Run the deposit tool and follow the instructions on screen\n./deposit new-mnemonic --chain mainnet\n</code></pre> <pre><code># Run the deposit tool and follow the instructions on screen\n./deposit new-mnemonic --chain holesky\n</code></pre>"},{"location":"run-a-validator.html#3-make-the-deposit","title":"3. Make the deposit","text":"<p>Once created, the keys are used to create a deposit transaction on the Ethereum execution chain. Follow the instructions here to upload the deposit data.</p> <p>Warning</p> <p>If you are making a mainnet deposit make sure you verify that the deposit contract you are interacting with is the correct one.</p> <p>You should verify that the address is indeed: 0x00000000219ab540356cBB839Cbe05303d7705Fa</p> <p>Once you send off your transaction(s), before your validator starts producing blocks and attestations, there are two waiting periods.</p> <p>First, you wait for the beacon chain to recognize the block containing the deposit. This usually takes around 13 hours. Then, you wait in the queue for validator activation.</p> <p>Getting through the queue may take a few hours or days (assuming the chain is finalizing). No validators are accepted into the validator set while the chain isn't finalizing. The <code>Pending Validators</code> metric on the beaconcha.in will give you the size of the queue.</p> <p>With the keys created, you're ready for the next step: importing your validator keys.</p>"},{"location":"run-a-validator.html#2-import-your-validator-keys","title":"2. Import your validator keys","text":"<p>Tip</p> <p><code>systemd</code> service file users will want to follow the service file guide instead!</p> <p>By finishing the first step, you will have a <code>validator_keys</code> folder containing several <code>.json</code> files in the <code>nimbus-eth2</code> directory.</p> <p>We'll import the signing key of each validator to the data directory using the <code>deposits import</code> command:</p> <p>You'll be asked to enter the password you used when creating your keystore(s).</p> MainnetHolesky <pre><code>build/nimbus_beacon_node deposits import --data-dir=build/data/shared_mainnet_0\n</code></pre> <pre><code>build/nimbus_beacon_node deposits import --data-dir=build/data/shared_holesky_0\n</code></pre> <p>On success, a message will be printed that your keys have been imported: <pre><code>NTC 2022-07-19 17:36:37.578+02:00 Keystore imported\n</code></pre></p> <p>After importing keys, it is time to restart the node and check that the keys have been picked up by the beacon node.</p> <p>All the keys</p> <p>You can read more about the different types of keys here \u2014 the <code>deposits import</code> command will import the signing key only.</p>"},{"location":"run-a-validator.html#command-line","title":"Command line","text":"<p>If your <code>validator_keys</code> folder is stored elsewhere, you can pass its location to the import command:</p> MainnetHolesky <pre><code>build/nimbus_beacon_node deposits import \\\n  --data-dir=build/data/shared_mainnet_0 \\\n  /path/to/keys\n</code></pre> <pre><code>build/nimbus_beacon_node deposits import \\\n  --data-dir=build/data/shared_holesky_0 \\\n  /path/to/keys\n</code></pre> <p>Replacing <code>/path/to/keys</code> with the full pathname of where the <code>validator_keys</code> directory is found.</p>"},{"location":"run-a-validator.html#optimized-import-for-a-large-number-of-validators","title":"Optimized import for a large number of validators","text":"<p>If you plan to use a large number of validators (e.g. more than 100) on a single beacon node or a validator client, you might benefit from running the <code>deposits import</code> command with the option <code>--method=single-salt</code>. This will force Nimbus to use the same password and random salt value when encrypting all of the imported keystores which will later enable it to load the large number of validator keys almost instantly. The theoretical downside of using this approach is that it makes the brute-force cracking of all imported keystores computationally equivalent to cracking just one of them. Nevertheless, the security parameters used by Ethereum are such that cracking even a single keystore is considered computationally infeasible with current hardware.</p>"},{"location":"run-a-validator.html#troubleshooting","title":"Troubleshooting","text":"<p>If you come across an error, make sure that:</p> <ul> <li>You are using the correct data directory.   For <code>systemd</code> users, look for the <code>--data-dir</code> option in the <code>.service</code> file.</li> <li>You are running the command as the correct user.   For <code>systemd</code> users, look for the <code>User=</code> option in the <code>.service</code>. Assuming the user is called <code>nimbus</code>,  prefix all commands with: <code>sudo -u nimbus</code>.</li> <li>Permissions for the data directory are wrong.   See folder permissions for how to fix this.</li> </ul>"},{"location":"run-a-validator.html#3-start-validating","title":"3. Start validating","text":"<p>Once your keys have been imported, it is time to configure a fee recipient and restart the beacon node to start validating.</p>"},{"location":"run-a-validator.html#1-choose-a-fee-recipient","title":"1. Choose a fee recipient","text":"<p>The fee recipient is an Ethereum address that receives transaction fees from the blocks that your validators produce. You can set up a separate address or reuse the address from which you funded your deposits.</p>"},{"location":"run-a-validator.html#2-restart-the-node","title":"2. (Re)start the node","text":"<p>Press <code>Ctrl-c</code> to stop the beacon node if it's running, then use the same command as before to run it again, this time adding the <code>--suggested-fee-recipient</code> option in addition to <code>--web3-url</code>:</p> MainnetHolesky <pre><code>./run-mainnet-beacon-node.sh --web3-url=http://127.0.0.1:8551 --suggested-fee-recipient=0x...\n</code></pre> <pre><code>./run-holesky-beacon-node.sh --web3-url=http://127.0.0.1:8551 --suggested-fee-recipient=0x...\n</code></pre>"},{"location":"run-a-validator.html#3-check-the-logs","title":"3. Check the logs","text":"<p>Your beacon node will launch and connect your validator to the beacon chain network. To check that keys were imported correctly, look for <code>Local validator attached</code> in the logs:</p> <pre><code>INF 2020-11-18 11:20:00.181+01:00 Launching beacon node\n...\nNTC 2020-11-18 11:20:02.091+01:00 Local validator attached\n</code></pre> <p>Congratulations! Your node is now ready to perform validator duties and earning a small amount of ETH every 6.4 minutes in return for keeping the Ethereum network secure! Depending on when the deposit was made, it may take a while before the first attestation is sent \u2014 this is normal.</p> <p>What next?</p> <p>While that's all there is to it, it is essential that you both keep an eye on your validator and keep Nimbus updated regularly. \ud83d\udcab</p>"},{"location":"security_issues.html","title":"Security issues","text":""},{"location":"security_issues.html#security-related-issues","title":"Security related issues","text":"<p>For any security related issues, follow responsible disclosure standards. Do not file public issues.</p> <p>Please file a report at the Ethereum bug bounty program in order to receive a reward for your findings.</p> <p>When in doubt, please send an encrypted email to security@status.im and ask (gpg key).</p> <p>Security related issues are (sufficient but not necessary criteria):</p> <ul> <li>Soundness of protocols (consensus model, p2p protocols): consensus liveness and integrity. </li> <li>Errors and failures in the cryptographic primitives </li> <li>RCE vulnerabilities</li> <li>Any issues causing consensus splits from the rest of the network</li> <li>Denial of service (DOS) vectors</li> <li>Broken Access Control </li> <li>Memory Errors</li> <li>Security Misconfiguration</li> <li>Vulnerable Dependencies </li> <li>Authentication Failures </li> <li>Data Integrity Failures</li> <li>Logging and Monitoring Vulnerabilities </li> </ul>"},{"location":"start-syncing.html","title":"Sync your node","text":"<p>Before you can use your node, it needs to sync with the network. Syncing starts automatically when you start your node, and may take several hours, or even days, depending on the performance of your hardware.</p> <p>Tip</p> <p>To get started more quickly, you can perform a trusted node sync instead. This requires access to a synced node or a third-party service.</p> <p>If you are planning to become a validator, you should ensure that your beacon node is completely synced before submitting your deposit; otherwise, you might miss attestations, proposal duties and sync committee duties until it has finished syncing.</p> <p>Note</p> <p>You need need to run an execution client (web3 provider) together with the beacon node. See here for instructions on how to do so.</p>"},{"location":"start-syncing.html#networks","title":"Networks","text":"<p>Using Nimbus, you can connect either to a testnet or mainnet. Mainnet is the main Ethereum network where real assets are at stake, while testnets are used by users and developers alike to test their node and setup before committing real assets.</p> <p>If this is the first time you're setting up your node, it is recommended you run it on a testnet first. Later, when everything is working, you can easily switch to mainnet.</p> TestnetMainnet <p>To start syncing the <code>holesky</code> testnet from the <code>nimbus-eth2</code> repository, run:</p> <pre><code> ./run-holesky-beacon-node.sh\n</code></pre> <p>To start syncing the Ethereum beacon chain mainnet, run:</p> <pre><code> ./run-mainnet-beacon-node.sh\n</code></pre>"},{"location":"start-syncing.html#log-output","title":"Log output","text":"<p>You should see the following output:</p> <pre><code>INF 2023-10-01 11:25:33.487+01:00 Launching beacon node\n...\nINF 2023-10-01 11:25:34.556+01:00 Loading block dag from database            topics=\"beacnde\" tid=19985314 path=build/data/shared_holesky_0/db\nINF 2023-10-01 11:25:35.921+01:00 Block dag initialized\nINF 2023-10-01 11:25:37.073+01:00 Generating new networking key\n...\nNTC 2023-10-01 11:25:59.512+00:00 Eth1 sync progress                         topics=\"eth1\" tid=21914 blockNumber=3836397 depositsProcessed=106147\nNTC 2023-10-01 11:26:02.574+00:00 Eth1 sync progress                         topics=\"eth1\" tid=21914 blockNumber=3841412 depositsProcessed=106391\n...\nINF 2023-10-01 11:26:31.000+00:00 Slot start                                 topics=\"beacnde\" tid=21815 file=nimbus_beacon_node.nim:505 lastSlot=96566 scheduledSlot=96567 beaconTime=1w6d9h53m24s944us774ns peers=7 head=b54486c4:96563 headEpoch=3017 finalized=2f5d12e4:96479 finalizedEpoch=3014\nINF 2023-10-01 11:26:36.285+00:00 Slot end                                   topics=\"beacnde\" tid=21815 file=nimbus_beacon_node.nim:593 slot=96567 nextSlot=96568 head=b54486c4:96563 headEpoch=3017 finalizedHead=2f5d12e4:96479 finalizedEpoch=3014\n...\n</code></pre>"},{"location":"start-syncing.html#data-directory","title":"Data directory","text":"<p>While running, the beacon node will store chain data and other information its data directory, which by default is found in <code>build/data</code>. For more information, see the data directory guide.</p>"},{"location":"start-syncing.html#command-line-options","title":"Command line options","text":"<p>You can add command line options to the startup command. For example, to change the port to 9100, use:</p> <pre><code>./run-holesky-beacon-node.sh --tcp-port=9100 --udp-port=9100\n</code></pre> <p>To see a list of the command line options available to you, with descriptions, run:</p> <pre><code>./build/nimbus_beacon_node --help\n</code></pre> <p>More information is available from the options page.</p>"},{"location":"start-syncing.html#keep-track-of-your-sync-progress","title":"Keep track of your sync progress","text":"<p>See here for how to keep track of your sync progress.</p>"},{"location":"start-syncing.html#checkpoint-sync","title":"Checkpoint sync","text":"<p>This feature is available from <code>v23.11.0</code> onwards.</p> <p>You can use an existing synced node or a third-party service to accelerate sync significantly. Instead of downloading and verifying the entire blockchain, you can point Nimbus to a trusted block.</p> <p>Warning</p> <p>Selecting a block from an untrusted source or using an outdated block or state may lead to Nimbus syncing to an unexpected state. Especially when running a validator, it is vital to pick a recent trusted block for checkpoint sync, and to verify that Nimbus is synced to the correct state before starting validator duties.</p> <p>Note</p> <p>The Nimbus database must be empty to use checkpoint sync. When using a pre-existing database, checkpoint sync options are ignored.</p> <p>Tip</p> <p>A list of community-operated checkpoint sync nodes can be found here.</p> <p>To use checkpoint sync, run the following commands (inserting the checkpoint sync endpoint and your own trusted block root):</p> HoleskyMainnet <pre><code>CHECKPOINT_SYNC_ENDPOINT=http://127.0.0.1:8551\nTRUSTED_BLOCK_ROOT=0x1234567890123456789012345678901234567890123456789012345678901234\n./run-holesky-beacon-node.sh \\\n    --external-beacon-api-url=$CHECKPOINT_SYNC_ENDPOINT \\\n    --trusted-block-root=$TRUSTED_BLOCK_ROOT\n</code></pre> <pre><code>TRUSTED_BLOCK_ROOT=0x1234567890123456789012345678901234567890123456789012345678901234\n./run-mainnet-beacon-node.sh \\\n    --external-beacon-api-url=$CHECKPOINT_SYNC_ENDPOINT \\\n    --trusted-block-root=$TRUSTED_BLOCK_ROOT\n</code></pre> <p>The following configuration options control checkpoint sync behaviour:</p> Option Description <code>--external-beacon-api-url</code> <ul><li>External beacon API to use for checkpoint sync</li></ul> <code>--trusted-block-root</code> <ul><li>Recent trusted finalized block root to sync from external beacon API</li><li>Uses the light client sync protocol to obtain the latest finalized checkpoint</li></ul> <code>--trusted-state-root</code> <ul><li>Recent trusted finalized state root to sync from external beacon API</li><li>Takes precedence over <code>--trusted-block-root</code> if both are specified</li></ul> <p>Info</p> <p>If the external beacon API does not support serving light client data, use the <code>--trusted-state-root</code> option instead of <code>--trusted-block-root</code>.</p>"},{"location":"suggested-fee-recipient.html","title":"Set up suggested fee recipient","text":"<p>The fee recipient is an Ethereum address that receives transaction fees from block production, separately from the proposer reward that accrues on the beacon chain.</p> <p>The fee recipient is forwarded to the execution client during block production. Each validator can have its own fee recipient set or a single recipient may be used.</p> <p>Warning</p> <p>The execution client is not required to follow the fee recipient suggestion and may instead send the fees to a different address \u2014 only use execution clients you trust!</p>"},{"location":"suggested-fee-recipient.html#setting-the-fee-recipient","title":"Setting the fee recipient","text":"<p>Nimbus supports setting fee recipient per validator, or using defaults in both the validator client and beacon node.</p> <p>Per-validator fee recipients are set using the keymanager API.</p> <p>Any validator without a per-validator recipient set will fall back to the <code>--suggested-fee-recipient</code> option if configured or the withdrawal address of the validator. For each validator, it selects from the first available, in the following order:</p> <ol> <li>The keymanager API per-validator suggested fee recipient</li> <li><code>--suggested-fee-recipient</code> in the validator client</li> <li><code>--suggested-fee-recipient</code> in the beacon node</li> <li>If the validator has an associated withdrawal address, it will be used a final fallback option.</li> </ol> <p>Warning</p> <p>If none of the above are present, the transaction fees are sent to the zero address, effectively causing them to be lost.</p> <p>For example, <code>nimbus_beacon_node --suggested-fee-recipient=0x70E47C843E0F6ab0991A3189c28F2957eb6d3842</code> suggests to the execution client that <code>0x70E47C843E0F6ab0991A3189c28F2957eb6d3842</code> might be the coinbase. If this Nimbus node has two validators, one of which has its own suggested fee recipient via the keymanager API and the other does not, the former would use its own per-validator suggested fee recipient, while the latter would fall back to <code>0x70E47C843E0F6ab0991A3189c28F2957eb6d3842</code>.</p> <p>Fee recipients are recorded publicly on-chain as part of proposed blocks, so suggested fee recipients should allow for this.</p>"},{"location":"suggested-fee-recipient.html#command-line","title":"Command line","text":"MainnetHoleskyValidator Client <pre><code>./run-mainnet-beacon-node.sh --suggested-fee-recipient=0x70E47C843E0F6ab0991A3189c28F2957eb6d3842\n</code></pre> <pre><code>./run-holesky-beacon-node.sh --suggested-fee-recipient=0x70E47C843E0F6ab0991A3189c28F2957eb6d3842\n</code></pre> <pre><code>./nimbus_validator_client --suggested-fee-recipient=0x70E47C843E0F6ab0991A3189c28F2957eb6d3842\n</code></pre>"},{"location":"suggested-fee-recipient.html#logs","title":"Logs","text":"<p>The configured fee recipient for every validator is logged at startup:</p> <pre><code>NTC 2022-11-10 08:27:02.530+01:00 Local validator attached ...\n    initial_fee_recipient=70E47C843E0F6ab0991A3189c28F2957eb6d3842\n</code></pre>"},{"location":"troubleshooting.html","title":"Troubleshooting","text":"<p>Note</p> <p>The commands on this page refer to mainnet. If you're running on <code>holesky</code> or another testnet, replace <code>mainnet</code> accordingly.</p> <p>We are continuously making improvements to both stability and resource usage. If you run into any problem with Nimbus and are not running the latest version, chances are they have already been fixed. See the update guide for instructions of how to upgrade.</p> <p>If you can't find a solution to your problem here, get in touch with us on our discord.</p> <p>Note</p> <p>When installing Nimbus, you will typically be using the latest <code>stable</code> release.</p> <p>However, the latest changes happen in the <code>unstable</code> branch. If you're looking to test the changes coming to the next Nimbus release, consider building Nimbus from source using the <code>unstable</code> branch.</p>"},{"location":"troubleshooting.html#networking","title":"Networking","text":"<p>A correctly configured network is key to getting good performance: the networking guide details everything you need to know!</p>"},{"location":"troubleshooting.html#low-peer-count","title":"Low peer count","text":"<p>If you see a message that looks like the following in your logs:</p> <pre><code>Peer count low, no new peers discovered...\n</code></pre> <p>Your node is finding it hard to find peers. It's possible that you  may be behind a firewall. Try restarting your client and passing <code>--nat:extip:$EXT_IP_ADDRESS</code> as an option to <code>./run-mainnet-beacon-node.sh</code>, where <code>$EXT_IP_ADDRESS</code> is your real IP. For example, if your real IP address is <code>1.2.3.4</code>, you'd run:</p> <pre><code>./run-mainnet-beacon-node.sh --nat:extip:1.2.3.4\n</code></pre> <p>If this doesn't improve things, you may need to set enr-auto-update and/or set up port forwarding.</p>"},{"location":"troubleshooting.html#no-peers-for-topic","title":"No peers for topic","text":"<p>If you see a message that looks like the following in your logs:</p> <pre><code>No peers for topic, skipping publish...\n</code></pre> <p>This means you've missed an attestation because either your peer count is too low, or the quality of your peers is lacking.</p> <p>There can be several reasons behind why this is the case. The first thing to check is that your max peer count (<code>--max-peers</code>) hasn't been set too low. In order to ensure your attestations are published correctly, <code>--max-peers</code> should be set to 70, at the very least.</p> <p>Note</p> <p>Nimbus manages peers slightly differently to other clients (we automatically connect to more peers than we actually use, in order not to have to do costly reconnects). As such, <code>--max-peers</code> is set to 160 by default.</p> <p>If this doesn't fix the problem, please double check your node is able to receive incoming connections.</p>"},{"location":"troubleshooting.html#misc","title":"Misc","text":""},{"location":"troubleshooting.html#console-hanging-for-too-long-on-update","title":"Console hanging for too long on update","text":"<p>To update and restart, run <code>git pull</code>, <code>make update</code>, followed by <code>make nimbus_beacon_node</code>:</p> <pre><code>cd nimbus-eth2\ngit pull\nmake update # Update dependencies\nmake nimbus_beacon_node # Rebuild beacon node\n./run-mainnet-beacon-node.sh # Restart using same keys as last run\n</code></pre> <p>If you find that <code>make update</code> causes the console to hang for too long, try running <code>make update V=1</code> or <code>make update V=2</code> instead (these will print a more verbose output to the console which may make it easier to diagnose the problem).</p> <p>Note</p> <p>Rest assured that when you restart the beacon node, the software will resume from where it left off, using the validator keys you have already imported.</p>"},{"location":"troubleshooting.html#starting-over-after-importing-wrong-keys","title":"Starting over after importing wrong keys","text":"<p>Your keys and secrets are stored in the data directory (usually <code>build/data/shared_mainnet_0</code>). If you imported the wrong keys, simply remove them from <code>validators</code> and <code>secrets</code> found in the data directory.</p>"},{"location":"troubleshooting.html#sync-problems","title":"Sync problems","text":"<p>If you\u2019re experiencing sync problems, make sure that your network is healthy and that you have a recent version installed.</p> <p>In rare cases, such as after an unclean shutdown, it may happen that the database has been corrupted and you need to restart the sync. To do so, remove the <code>db</code> folder from the data directory and restart the node. You can get re-synced faster using trusted node sync.</p>"},{"location":"troubleshooting.html#nocommand-does-not-accept-arguments","title":"noCommand does not accept arguments","text":"<p>If, on start,  you see <code>The command 'noCommand' does not accept arguments</code>.</p> <p>Double check to see if your command line flags are in the correct format, e.g. <code>--foo=bar</code>, <code>--baz</code>, or <code>--foo-bar=qux</code>.</p> <p>Tip</p> <p>All options accepting values need a <code>=</code> between the option name and the value!</p>"},{"location":"troubleshooting.html#address-already-in-use-error","title":"Address already in use error","text":"<p>If you're seeing an error that looks like:</p> <pre><code>Error: unhandled exception: (98) Address already in use [TransportOsError]\n</code></pre> <p>It means that you're running another node that is using the same port as the one you're trying to start or that you're trying to start a second instance of the same node.</p> <p>To change the base port, run:</p> <pre><code>./run-mainnet-beacon-node.sh --tcp-port=9100 --udp-port=9100\n</code></pre> <p>You can replace <code>9100</code> with a port of your choosing.</p>"},{"location":"troubleshooting.html#catching-up-on-validator-duties","title":"Catching up on validator duties","text":"<p>If you're being flooded with <code>Catching up on validator duties</code> messages, your CPU is probably too slow to run Nimbus. Please check that your setup matches our system requirements.</p>"},{"location":"troubleshooting.html#eth1-chain-monitor-failure","title":"Eth1 chain monitor failure","text":"<p>If you see an error that looks like the following:</p> <pre><code>{\"lvl\":\"ERR\",\"ts\":\"2021-05-11 09:05:53.547+00:00\",\"msg\":\"Eth1 chain monitoring failure, restarting\",\"topics\":\"eth1\",\"tid\":1,\"err\":\"Trying to access value with err: Failed to setup web3 connection\"}\n</code></pre> <p>It is because your node can't connect to the web3 provider you have specified. Please double check that you've correctly specified your provider.</p> <p>If you haven't done so already, we recommend allowing multiple execution clients.</p>"},{"location":"troubleshooting.html#discovered-new-external-address-warning-log","title":"Discovered new external address warning log","text":"<pre><code>WRN 2021-03-11 13:26:25.943-08:00\nDiscovered new external address but ENR auto update is off\ntopics=\"discv5\" tid=77655 file=protocol.nim:940 majority=Some(\"myIPaddressHere\":9000) previous=None[Address]\n</code></pre> <p>This message is displayed regularly when Nimbus cannot detect your correct IP address. It may be a sign that you have a dynamic IP address that keeps changing. Or that Nimbus is unable to get your IP from the UPnP.</p> <p>The first step is to try relaunching the beacon node with the <code>--enr-auto-update</code> option.</p> <p>If that doesn't fix the problem, double check that your ports are open and that you have port forwarding enabled on your gateway (assuming that you are behind a NAT).</p> <p>See our page on monitoring the health of your node for more.</p>"},{"location":"troubleshooting.html#raspberry-pi","title":"Raspberry Pi","text":""},{"location":"troubleshooting.html#trouble-transferring-data-tofrom-usb30-ssds","title":"Trouble transferring data to/from USB3.0 SSDs","text":"<p>We have seen reports of degraded performance when using several types of USB3.0 to SSD adapters or when using native USB3.0 disk drives. This post on RPi forums details why there is a difference in behaviour from models prior to Pi 4 and the recommended workaround.</p>"},{"location":"trusted-node-sync.html","title":"Sync from a trusted node","text":"<p>When you start the beacon node for the first time, it connects to the beacon chain network and starts syncing automatically \u2014 a process that can take several hours or even days.</p> <p>Trusted node sync allows you to get started more quickly by fetching a recent checkpoint from a trusted node \u2014 you can get started in minutes instead of hours or days.</p> <p>To use trusted node sync, you must have access to a node that you trust and that exposes the Beacon API (for example, a locally running backup node). Should this node, or your connection to it, be compromised, your node will not be able to detect whether or not it is being served false information.</p> <p>It is possible to use trusted node sync with a third-party API provider. See here for how to verify that the chain you are given corresponds to the canonical chain at the time.</p> <p>Tip</p> <p>A list of community-operated checkpoint sync nodes can be found here. Always verify after after a checkpoint sync that the right chain was provided by the node.</p>"},{"location":"trusted-node-sync.html#perform-a-trusted-node-sync","title":"Perform a trusted node sync","text":"<p>Tip</p> <p>Make sure to replace <code>http://localhost:5052</code> in the commands below with the appropriate endpoint of the trusted beacon node. <code>http://localhost:5052</code> is the default endpoint exposed by Nimbus, but this is not consistent across all clients.</p> <p>For example, if your trusted node is a Prysm node, it exposes <code>127.0.0.1:3500</code> by default. Which means you would run the commands below with <code>--trusted-node-url=http://127.0.0.1:3500</code></p> <p>Note</p> <p>The path specified for <code>--data-dir</code> must be an empty directory, as trusted node sync needs to be started from a fresh database.</p> <p>To start trusted node sync, run:</p> MainnetHolesky <pre><code>build/nimbus_beacon_node trustedNodeSync \\\n  --network:mainnet \\\n  --data-dir=build/data/shared_mainnet_0 \\\n  --trusted-node-url=http://localhost:5052\n</code></pre> <pre><code>build/nimbus_beacon_node trustedNodeSync \\\n  --network:holesky \\\n  --data-dir=build/data/shared_holesky_0 \\\n  --trusted-node-url=http://localhost:5052\n</code></pre> <p>If the command was executed successfully, following log lines will be visible:</p> <p><pre><code>Writing checkpoint state\nWriting checkpoint block\n</code></pre> And eventually: <pre><code>Done, your beacon node is ready to serve you! Don't forget to check that you're on the canonical chain by comparing the checkpoint root with other online sources.\nSee https://nimbus.guide/trusted-node-sync.html for more information.\n</code></pre></p> <p>After this the application will terminate and you can now start the beacon node as usual.</p> <p>Note</p> <p>Because trusted node sync by default copies blocks via REST, you may hit API limits if you are using a third-party provider. If this happens to you, you may need to use the <code>--backfill</code> option to delay the backfill of the block history.</p>"},{"location":"trusted-node-sync.html#verify-you-synced-the-correct-chain","title":"Verify you synced the correct chain","text":"<p>When performing a trusted node sync, you can manually verify that the correct chain was synced by comparing the head hash with other sources (e.g. your friends, forums, chats and web sites). If you're syncing using your own backup node you can retrieve the current head from the node using:</p> <pre><code># Make sure to enable the `--rest` option when running your node:\n\ncurl http://localhost:5052/eth/v1/beacon/blocks/head/root\n</code></pre> <p>The <code>head</code> root is also printed in the log output at regular intervals.</p> <p>Note</p> <p>The same Beacon API request works with any API provider.</p> <p>For example, to compare it out with our mainnet testing server, you can run: <code>curl -X GET http://testing.mainnet.beacon-api.nimbus.team/eth/v1/beacon/blocks/head/root</code></p>"},{"location":"trusted-node-sync.html#advanced","title":"Advanced","text":""},{"location":"trusted-node-sync.html#verify-the-downloaded-state-through-the-nimbus-light-client","title":"Verify the downloaded state through the Nimbus light client","text":"<p>This feature is available from <code>v23.4.0</code> onwards.</p> <p>The <code>--trusted-block-root</code> option enables you to leverage the Nimbus light client in order to minimize the required trust in the specified Beacon API endpoint. After downloading a state snapshot, the light client will verify that it conforms to the established consensus on the network. Note that the provided <code>--trusted-block-root</code> should be somewhat recent, and that additional security precautions such as comparing the state root against block explorers is still recommended.</p>"},{"location":"trusted-node-sync.html#sync-deposit-history","title":"Sync deposit history","text":"<p>The <code>--with-deposit-snapshot</code> allows syncing deposit history via REST, avoiding the need to search the execution client for this information and thus allowing the client to more quickly start producing blocks.</p> <p>Note</p> <p>The API endpoint for downloading this information is a relatively recent addition to the Beacon API specification. It is available on nodes running Nimbus, but if you're using other checkpoint sources, consult their documentation with regards to the <code>/eth/v1/beacon/deposit_snapshot</code> endpoint.</p> <p>Tip</p> <p>It's safe to always specify this option. Nimbus will produce a warning if the specified beacon node doesn't support the required endpoint. Future versions of Nimbus will enable the option by default.</p>"},{"location":"trusted-node-sync.html#delay-block-history-backfill","title":"Delay block history backfill","text":"<p>By default, both state and block history will be downloaded from the trusted node.</p> <p>It is possible to get started more quickly by delaying the backfill of the block history using the <code>--backfill=false</code> parameter. In this case, the beacon node will first sync to the current head so that it can start performing its duties, then backfill the blocks from the network.</p> <p>You can also resume the trusted node backfill at any time by simply running the trusted node sync command again.</p> <p>Note</p> <p>While backfilling blocks, your node will not be able to answer historical requests or sync requests. This might lead to you being de-scored, and eventually disconnected, by your peers.</p>"},{"location":"trusted-node-sync.html#modify-sync-point","title":"Modify sync point","text":"<p>By default, the node will sync up to the latest finalized checkpoint of the node that you're syncing with. While you can choose a different sync point using a state hash or a slot number, this state must fall on an epoch boundary:</p> <pre><code>build/nimbus_beacon_node trustedNodeSync \\\n  --network:mainnet \\\n  --data-dir=build/data/shared_mainnet_0 \\\n  --state-id:1024\n</code></pre>"},{"location":"trusted-node-sync.html#sync-from-checkpoint-files","title":"Sync from checkpoint files","text":"<p>If you have a state file available, you can start the node using the <code>--finalized-checkpoint-state</code>:</p> <pre><code># Obtain a state and a block from a Beacon API - these must be in SSZ format:\ncurl -o state.finalized.ssz \\\n  -H 'Accept: application/octet-stream' \\\n  http://localhost:5052/eth/v2/debug/beacon/states/finalized\n\n# Start the beacon node using the downloaded state as starting point\n./run-mainnet-beacon-node.sh \\\n  --finalized-checkpoint-state=state.finalized.ssz\n</code></pre>"},{"location":"trusted-node-sync.html#recreate-historical-state-access-indices","title":"Recreate historical state access indices","text":"<p>When performing trusted node sync, the historical state data from the time before the trusted is not available. To recreate the indices and caches necessary for historical state access, run trusted node sync with the <code>--reindex</code> flag \u2014 this can be done on an already-synced node as well, in which case the process will simply resume where it left off:</p> <p>To recreate a historical index from before the checkpoint, it is necessary to first download an era archive containing the deep block history.</p> <pre><code>build/nimbus_beacon_node trustedNodeSync \\\n  --network:mainnet \\\n  --data-dir=build/data/shared_mainnet_0 \\\n  --reindex=true\n</code></pre>"},{"location":"validator-client-options.html","title":"Validator client","text":"<p>In the most simple setup, a single beacon node paired with an execution client is all that is needed to run a successful validator setup.</p> <p>Nimbus however also provides options for running advanded setups that provide additional security and redundancy.</p> <p>See the validator client page to get started!</p>"},{"location":"validator-client-options.html#multiple-beacon-nodes","title":"Multiple beacon nodes","text":"<p>By default, the validator client will connect to a beacon node running on the same machine using the default port (<code>5052</code>).</p> <p>You can select one or more beacon nodes to connect to using the <code>--beacon-node</code> option:</p> <pre><code>build/nimbus_validator_client \\\n  --beacon-node=http://127.0.0.1:5052 \\\n  --beacon-node=http://127.0.0.1:5053\n</code></pre>"},{"location":"validator-client-options.html#beacon-node-roles","title":"Beacon node roles","text":"<p>When configuring multiple beacon nodes, each beacon node can be assigned to perform specific tasks on behalf of the validator client.</p> Role name Role calls attestation-data produceAttestationData() attestation-publish submitPoolAttestations() aggregated-data getAggregatedAttestation() aggregated-publish publishAggregateAndProofs() block-data produceBlockV2() block-publish publishBlock() sync-data getBlockRoot()produceSyncCommitteeContribution() sync-publish publishContributionAndProofs() submitPoolSyncCommitteeSignatures() duties getGenesis()getSpec() getSyncingStatus()getValidatorsActivity()getForkSchedule()getAttesterDuties()getProposerDuties()getSyncCommitteeDuties() getStateValidators()prepareSyncCommitteeSubnets()prepareBeaconCommitteeSubnet() <p>Also, there could be combinations:</p> Name Roles attestation attestation-data, attestation-publish aggregated aggregated-data, aggregated-publish block block-data, block-publish sync sync-data, sync-publish publish attestation-publish, aggregated-publish, block-publish, sync-publish data attestation-data, aggregated-data, block-data, sync-data all attestation, aggregated, block, sync, duty"},{"location":"validator-client-options.html#configuration","title":"Configuration","text":"<p>Roles are configured using the <code>#roles=</code> URL anchor. The default is <code>all</code>:</p> <p>Examples:</p> <ul> <li><code>http://127.0.0.1:5052/#roles=attestation-data,attestation-publish</code></li> <li><code>http://127.0.0.1:5053/#roles=block-proposal-data,block-proposal-publish</code></li> <li><code>http://127.0.0.1:5054/#roles=all</code></li> <li><code>http://127.0.0.1:5055/</code> also means <code>all</code> roles.</li> </ul> <p>Before usage, all the roles are stripped from beacon node URLs.</p>"},{"location":"validator-client-options.html#advanced-topologies","title":"Advanced topologies","text":""},{"location":"validator-client-options.html#fully-redundant-nodes","title":"Fully redundant nodes","text":"<p>Using multiple beacon nodes with the same role allows fully redundant setups.</p> <p>These setups are resilient against any single beacon node getting disconnected and provide additional \"entry points\" for the data that the validator client produces should any node experience poor connectivity.</p>"},{"location":"validator-client-options.html#sentry-node-setup","title":"Sentry node setup","text":"<p>In the Ethereum network, the block proposer is known up to 12 minutes before they propose the block. Because each validator sends attestations every 6 minutes, it is also possible to map the validator key to the beacon node IP address that serves it.</p> <p>Sentry nodes setups allow separating block production traffic from attestations and sync committee messages, making sure that a separate public IP address is used when proposing blocks. In this setup, there are two beacon nodes:</p> <ul> <li>One beacon node has all roles except <code>block</code></li> <li>The other beacon node has the <code>block</code> role</li> </ul> <p>Separating block production makes it harder for an attacker to target the specific IP address that the validator would otherwise use for block production.</p>"},{"location":"validator-client.html","title":"Run a separate validator client","text":"<p>Warning</p> <p>Some features of the validator client, such as the metrics server, are currently in BETA and details may change in response to community feedback. Please consult the <code>--help</code> screen for more details.</p> <p>By default, Nimbus integrates the validator client into the main beacon node process \u2014 this is a simple, safe and efficient way to run a validator.</p> <p>Advanced users may wish to run validators in a separate process, allowing more flexible deployment strategies. The Nimbus beacon node supports both its own and third-party validator clients via the built-in REST API.</p> <p>Warning</p> <p>So far, all slashings with known causes have been linked to overly complex setups involving separation between beacon node and validator client! Only use this setup if you've taken steps to mitigate the increased risk.</p>"},{"location":"validator-client.html#setup","title":"Setup","text":"<p>To run a separate validator client, you must first make sure that your beacon node has its REST API enabled: start it with the <code>--rest</code> option.</p> <p>Next, choose a data directory for the validator client and import the keys there:</p> <pre><code>build/nimbus_beacon_node deposits import \\\n  --data-dir:build/data/vc_shared_holesky_0 \"&lt;YOUR VALIDATOR KEYS DIRECTORY&gt;\"\n</code></pre> <p>Warning</p> <p>Do not use the same data directory for beacon node and validator client! They will both try to load the same keys which may result in slashing!</p> <p>Warning</p> <p>If you are migrating your keys from the beacon node to the validator client, simply move the <code>secrets</code> and <code>validators</code> folders in the beacon node data directory to the data directory of the validator client</p> <p>With the keys imported, you are ready to start validator client:</p> <pre><code>build/nimbus_validator_client \\\n  --data-dir:build/data/vc_shared_holesky_0\n</code></pre>"},{"location":"validator-client.html#options","title":"Options","text":"<p>See the validator client options page for more information about beacon node roles, redundant setups and sentry nodes!</p>"},{"location":"validator-monitor.html","title":"Validator monitoring","text":"<p>The validator monitoring feature allows for tracking the life cycle and performance of one or more validators in detail. Monitoring can be carried out for any validator, with slightly more detail for validators that are running in the same beacon node.</p> <p>Every time the validator performs a duty, the duty is recorded and the monitor keeps track of the reward-related events for having performed it. For example:</p> <ul> <li>When attesting, the attestation is added to an aggregate, then a block, before a reward is applied to the state</li> <li>When performing sync committee duties, likewise</li> </ul> <p>Validator actions can be traced either through logging, or comprehensive metrics that allow for creating alerts in monitoring tools.</p> <p>The metrics are broadly compatible with Lighthouse, thus dashboards and alerts can be used with either client with minor adjustments.</p>"},{"location":"validator-monitor.html#command-line-options","title":"Command line options","text":"<p>The monitor is by default enabled for all keys that are validating via the beacon node. It can also be configured to monitor a specific list of validators, or be disabled entirely with <code>--validator-monitor-auto=false</code>.</p> <p>The <code>--validator-monitor-details</code> flag can be used to enable the detailed monitor mode. In this mode, the performance of each validator is monitored individually in metrics leading to a more detailed view of performance.</p> <p>Tip</p> <p>The detailed mode significantly increases the total number of published metrics for each monitored validator. When used with more than 10 validators, it may adversely impact performance of metrics collection and display.</p> <pre><code># Disable automatic monitoring of all validators used with this beacon node beacon node\n./run-mainnet-beacon-node.sh --validator-monitor-auto=false ...\n\n# Enable monitoring of one or more specific validators\n./run-mainnet-beacon-node.sh \\\n  --validator-monitor-pubkey=0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c \\\n  --validator-monitor-pubkey=0xb2ff4716ed345b05dd1dfc6a5a9fa70856d8c75dcc9e881dd2f766d5f891326f0d10e96f3a444ce6c912b69c22c6754d ...\n\n# Publish detailed metrics for each monitored validator individually instead of an aggregate totals value\n./run-mainnet-beacon-node.sh --validator-monitor-details ...\n</code></pre>"},{"location":"validator-monitor.html#understanding-monitoring","title":"Understanding monitoring","text":"<p>When a validator performs a duty, such as signing an attestation or a sync committee message, this is broadcast to the network. Other nodes pick it up and package the message into an aggregate and later a block. The block is included in the canonical chain and a reward is given two epochs (~13 minutes) later.</p> <p>The monitor tracks each of these actions and will in detailed mode log each step at the <code>INF</code> level. If any step is missed (irrespective of detail mode), a <code>NTC</code> log is shown instead.</p> <p>The typical life cycle of an attestation might look something like the following:</p> <pre><code>INF 2021-11-22 11:32:44.228+01:00 Attestation seen                           topics=\"val_mon\" attestation=\"(aggregation_bits: 0b0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, data: (slot: 2656363, index: 11, beacon_block_root: \\\"bbe7fc25\\\", source: \\\"83010:a8a1b125\\\", target: \\\"83011:6db281cd\\\"), signature: \\\"b88ef2f2\\\")\" src=api epoch=83011 validator=b93c290b\nINF 2021-11-22 11:32:51.293+01:00 Attestation included in aggregate          topics=\"val_mon\" aggregate=\"(aggregation_bits: 0b1111111101011111001101111111101100111111110100111011111110110101110111111010111111011101111011101111111111101111100001111111100111, data: (slot: 2656363, index: 11, beacon_block_root: \\\"bbe7fc25\\\", source: \\\"83010:a8a1b125\\\", target: \\\"83011:6db281cd\\\"), signature: \\\"8576b3fc\\\")\" src=gossip epoch=83011 validator=b93c290b\nINF 2021-11-22 11:33:07.193+01:00 Attestation included in block              attestation_data=\"(slot: 2656364, index: 9, beacon_block_root: \\\"c7761767\\\", source: \\\"83010:a8a1b125\\\", target: \\\"83011:6db281cd\\\")\" block_slot=2656365 inclusion_lag_slots=0 epoch=83011 validator=b65b6e1b\n</code></pre> <p>The life cycle of a particular message can be traced by following the <code>epoch=.... validator=...</code> fields in the message.</p> <p>Failures at any point are recorded at a higher logging level, such as <code>NTC</code>:</p> <pre><code>NTC 2021-11-17 20:53:42.108+01:00 Attestation failed to match head           topics=\"chaindag\" epoch=81972 validator=...\n</code></pre> <p>Failures are reported with a lag of two epochs (~13 minutes). To examine the log for potential root causes, the logs from the epoch in the failure message should be looked at.</p> <p>Warning</p> <p>It should be noted that metrics are tracked for the current history. In the case of a reorg on the chain \u2014 in particular a deep reorg \u2014 no attempt is made to revisit previously reported values. In the case that finality is delayed, the risk of stale metrics increases.</p> <p>Likewise, many metrics, such as aggregation inclusion, reflect conditions on the network. It may happen that the same message is counted more than once under certain conditions.</p>"},{"location":"validator-monitor.html#monitoring-metrics","title":"Monitoring metrics","text":"<p>For instructions on how to use Prometheus and Grafana, see these instructions.</p> <p>The full list of metrics supported by the validator monitoring feature can be seen in the source code or by examining the metrics output:</p> <pre><code>curl -s localhost:8008/metrics | grep HELP.*validator_\n</code></pre>"},{"location":"voluntary-exit.html","title":"Perform a voluntary exit","text":"<p>Voluntary exits allow validators to permanently stop performing their duties, and eventually recover the deposit.</p> <p>Exits are subject to a wait period that depends on the length of the exit queue. While a validator is exiting, it still must perform its duties in order not to lose funds to inactivity penalities.</p> <p>Warning</p> <p>Voluntary exits are irreversible. You won't be able to validate again with the same key.</p> <p>Note</p> <p>Voluntary exits won't be processed if the chain isn't finalizing.</p> <p>To perform a voluntary exit, make sure your beacon node is running with the <code>--rest</code> option enabled (e.g. <code>./run-mainnet-beacon-node.sh --rest</code>), then run:</p> <pre><code>build/nimbus_beacon_node deposits exit --validator=&lt;VALIDATOR_KEYSTORE_PATH&gt;\n</code></pre> <p>Note</p> <p>In the command above, you must replace <code>&lt;VALIDATOR_KEYSTORE_PATH&gt;</code> with the file-system path of an Ethereum ERC-2335 Keystore created by a tool such as staking-deposit-cli or ethdo.</p> <p>Tip</p> <p>You can perform multiple voluntary exits at once by supplying the <code>--validator</code> option multiple times on the command-line. This is typically more convenient when the provided keystores share the same password - you'll be asked to enter it only once.</p>"},{"location":"voluntary-exit.html#rest-url-parameter","title":"<code>rest-url</code> parameter","text":"<p>The <code>--rest-url</code> parameter can be used to point the exit command to a specific node for publishing the request, as long as it's compatible with the REST API.</p>"},{"location":"web3signer.html","title":"Web3Signer","text":"<p>Web3Signer is a remote signing server developed by Consensys. It offers a standardized REST API allowing the Nimbus beacon node or validator client to operate without storing any validator keys locally.</p> <p>You can instruct Nimbus to connect to a Web3Signer instance by supplying the <code>--web3-signer-url</code> command-line option. Since Nimbus obtains the list of validator keys automatically through the <code>/api/v1/eth2/publicKeys</code> Web3Signer API endpoint, no further configuration is required.</p> <p>Info</p> <p>By default, the list of validators will be refreshed once per hour. You can change the number of seconds between two updates with the <code>--web3signer-update-interval</code> command-line option.</p> <p>Tip</p> <p>You can use multiple Web3Signer instances by specifying the <code>--web3-signer-url</code> parameter multiple times.</p> <p>Alternatively, if you prefer not to depend on the automatic validator discovery mechanism or wish to take advantage of the advanced configurations described below, you have the option to permanently add multiple remote validators to a particular Nimbus data directory. This can be accomplished in two ways:</p> <p>On-the-fly Addition: Utilize the <code>POST /eth/v1/remotekeys</code> request when the Keymanager API is enabled. This allows you to dynamically add and remove remote validators as needed.</p> <p>Manual Configuration: You can manually create a remote keystore file within the validators directory of the client. This configuration will be loaded during the next restart of the client. Here is an example <code>remote_keystore.json</code> file:</p> <pre><code>{\n  \"version\": 3,\n  \"description\": \"This is simple remote keystore file\",\n  \"type\": \"verifying-web3signer\",\n  \"pubkey\": \"0x8107ff6a5cfd1993f0dc19a6a9ec7dc742a528dd6f2e3e10189a4a6fc489ae6c7ba9070ea4e2e328f0d20b91cc129733\",\n  \"remote\": \"http://127.0.0.1:15052\",\n  \"ignore_ssl_verification\": true,\n  \"proven_block_properties\": [\n    { \"path\": \".execution_payload.fee_recipient\" }\n  ]\n}\n</code></pre> <p>The fields have the following semantics:</p> <ol> <li><code>version</code> - A decimal version number of the keystore format. This should be the first field.</li> <li><code>description</code> - An optional description of the keystore that can be set to any value by the user.</li> <li><code>type</code> - The type of the remote signer. The currently supported values are <code>web3signer</code> and <code>verifying-web3signer</code> (see below). Future versions may also support the protocol used by the Dirk signer.</li> <li><code>pubkey</code> - The validator's public key encoded in hexadecimal form.</li> <li><code>remote</code> - An URL of a remote signing server.</li> <li><code>remotes</code> - A distributed keystore configuration including two or more remote signing servers.</li> <li><code>ignore_ssl_verification</code> - An optional boolean flag allowing the use of self-signed certificates by the signing server.</li> <li><code>proven_block_properties</code> - When the <code>verifying-web3signer</code> type is used, this is a list of locations within the SSZ block body for which the block signing requests will contain additional Merkle proofs, allowing the signer to verify certain details about the signed blocks (e.g. the <code>fee_recipient</code> value).</li> </ol> <p>Info</p> <p>The current version of the remote keystore format is <code>3</code> which adds support for the experimental verifying web3signer setups. Version <code>2</code> introduced the support for distributed keystores.</p>"},{"location":"web3signer.html#distributed-keystores","title":"Distributed Keystores","text":"<p>Warn</p> <p>This functionality is not currently recommended for production use. All details described below are subject to change after a planned security audit of the implementation. Please refer to the Nimbus SSV Roadmap for more details.</p> <p>The distributed keystores offer a mechanism for spreading the work of signing validator messages over multiple signing servers in order to gain higher resilience (safety, liveness, or both) when compared to running a validator client on a single machine. When properly deployed, they can ensure that the validator key cannot be leaked to unauthorized third parties even when they have physical access to the machines where the signers are running. Furthermore, the scheme supports M-out-of-N threshold signing configurations that can remain active even when some of the signing servers are taken offline. For more information, please refer to the Distributed Validator Specification published by the EF.</p> <p>Currently, the distributed keystore support allows pairing a single Nimbus instance with multiple Web3Signer servers. Future versions may allow creating a highly available cluster of Nimbus instances that mutually act as signers for each other. Please refer to the Nimbus SSV Roadmap for more details.</p> <p>You can migrate any existing validator to a distributed keystore by splitting the key in multiple shares through the <code>ncli_split_keystore</code> program.</p> <p>Info</p> <p>Since this is a preview feature, the <code>ncli_split_keystore</code> program is currently available only when compiling from source. To build it, clone the nimbus-eth2 repository and run the <code>make ncli_split_keystore</code> command within its root. The resulting binary will be placed in the <code>build</code> folder sub-directory.</p> <p>Here is an example invocation of the command:</p> <pre><code>build/ncli_split_keystore \\\n    --data-dir=$NIMBUS_DATA_DIR \\\n    --key=$VALIDATOR_PUBLIC_KEY \\\n    --threshold=2 \\\n    --remote-signer=http://signer-1-url \\\n    --remote-signer=http://signer-2-url \\\n    --remote-signer=http://signer-3-url \\\n    --out-dir=$OUT_DIR\n</code></pre> <p>The specified output directory will contain the following files:</p> <pre><code>$OUT_DIR/$VALIDATOR_PUBLIC_KEY/remote_keystore.json\n$OUT_DIR/shares/secrets/1/$SHARE_1_PUBLIC_KEY\n$OUT_DIR/shares/secrets/2/$SHARE_2_PUBLIC_KEY\n$OUT_DIR/shares/secrets/3/$SHARE_3_PUBLIC_KEY\n$OUT_DIR/shares/validators/1/$SHARE_1_PUBLIC_KEY/keystore.json\n$OUT_DIR/shares/validators/2/$SHARE_2_PUBLIC_KEY/keystore.json\n$OUT_DIR/shares/validators/3/$SHARE_3_PUBLIC_KEY/keystore.json\n</code></pre> <p>The keystores under the created <code>shares</code> directory must be moved to the server where the respective remote signer will be running, while the directory containing the <code>remote_keystore.json</code> file must be placed in the validators directory of the Nimbus.</p> <p>The specified <code>threshold</code> value specifies the minimum number of signers that must remain online in order to create a signature. Naturally, this value must be lower than the total number of specified remote signers.</p> <p>If you are already using a threshold signing setup (e.g. based on Vouch and Dirk), you can migrate your partial keystores to any Web3Signer-compatible server and then manually create the <code>remote_keystore.json</code> file which must have the following structure:</p> <pre><code>{\n  \"version\": 3,\n  \"pubkey\": \"0x8107ff6a5cfd1993f0dc19a6a9ec7dc742a528dd6f2e3e10189a4a6fc489ae6c7ba9070ea4e2e328f0d20b91cc129733\",\n  \"remotes\": [\n    {\n      \"url\": \"http://signer-1-url\",\n      \"id\": 1,\n      \"pubkey\": \"83b26b1466f001d723e516b9a4f2ca13c01d9541b17a51a62ee8651d223dcc2dead9ce212e499815f43f7f96dddd4f5a\"\n    },\n    {\n      \"url\": \"http://signer-2-url\",\n      \"id\": 2,\n      \"pubkey\": \"897727ba999519a55ac96b617a39cbba543fcd061a99fa4bcac8340dd19126a1130a8b6c2574add4debd4ec4c0c29faf\"\n    },\n    {\n      \"url\": \"http://signer-3-url\",\n      \"id\": 3,\n  `   \"pubkey\": \"a68f3ac58974d993908a2e5796d04222411bcdfbb7e5b8c7a10df6717792f9b968772495c554d1b508d4a738014c49b4\"\n    }\n  ],\n  \"threshold\": 2,\n  \"type\": \"web3signer\"\n}\n</code></pre>"},{"location":"web3signer.html#verifying-web3signer","title":"Verifying Web3Signer","text":"<p>Warn</p> <p>This functionality is currently considered experimental. The described implementation may be incomplete and is subject to change in future releases.</p> <p>The verifying Web3Signer is an experimental extension to the Web3Signer protocol which allows the remote signer to verify certain details of the signed blocks before creating a signature (for example, the signer may require the signed block to have a particular fee recipient value).</p> <p>To enable this use case, the <code>BLOCK_V2</code> request type of the <code>/api/v1/eth2/sign/{identifier}</code> endpoint is extended with an additional array field named <code>proofs</code>. The array consists of objects with the properties <code>index</code>, <code>proof</code> and <code>value</code>, where <code>index</code> is an arbitrary generalized index of any property nested under the block body and <code>proof</code> is its corresponding Merkle proof against the block body root included in the request. The <code>value</code> property is optional and it is included only when the SSZ hash of the field included in the Merkle proof doesn't match its value.</p> <p>Since the generalized index of a particular field may change in a hard-fork, in the remote keystore format the proven fields are usually specified by their name:</p> <pre><code>{\n  \"version\": 3,\n  \"description\": \"This is simple remote keystore file\",\n  \"type\": \"verifying-web3signer\",\n  \"pubkey\": \"0x8107ff6a5cfd1993f0dc19a6a9ec7dc742a528dd6f2e3e10189a4a6fc489ae6c7ba9070ea4e2e328f0d20b91cc129733\",\n  \"remote\": \"http://127.0.0.1:15052\",\n  \"ignore_ssl_verification\": true,\n  \"proven_block_properties\": [\n    { \"path\": \".execution_payload.fee_recipient\" },\n    { \"path\": \".graffiti\" }\n  ]\n}\n</code></pre> <p>Nimbus automatically computes the generalized index depending on the currently active fork. The remote signer is expected to verify the incoming Merkle proof through the standardized is_valid_merkle_branch function by utilizing a similar automatic mapping mechanism for the generalized index.</p> <p>You can instruct Nimbus to use the verifying Web3Signer protocol by either supplying the <code>--verifying-web3-signer</code> command-line option or by creating a remote keystore file in the format described above. You can use the command-line option <code>--proven-block-property</code> once or multiple times to enumerate the properties of the block for which Merkle proofs will be supplied.</p>"},{"location":"withdrawals.html","title":"Withdraw your staked funds","text":"<p>Withdrawals are enabled for each validator once it's configured to use 0x01 withdrawal credentials which specify an execution layer address that will be the beneficiary of all withdrawn funds.</p> <p>If your validator was created with <code>0x01</code> withdrawal credentials, it's already fully prepared for withdrawals and you can safely skip the next step.</p>"},{"location":"withdrawals.html#updating-your-withdrawal-credentials","title":"Updating your withdrawal credentials","text":"<p>To migrate your validator from BLS to <code>0x01</code> withdrawal credentials, you have to use the same third-party tool that was used to generate the BLS key. You have to create a signed <code>BLS-to-Execution-Change</code> message that must be broadcast to the network (and eventually published in a beacon chain block) in order to execute the desired withdrawal credentials update.</p> <p>If you have used the staking-deposit-cli tool (formerly known as <code>eth2.0-deposit-cli</code>), please follow the steps provided here. Alternatively, if you have used ethdo, follow the steps provided here.</p> <p>If you have used other software for generating your BLS withdrawal credentials, please refer to its documentation or development team for further assistance regarding creating a signed <code>BLS-to-Execution-Change</code> message.</p> <p>Warning</p> <p>Your choice of withdrawal address is permanent. If you ever wish to switch it later, the only option is to exit your validator and then create a new one.</p> <p>Tip</p> <p>The specified withdrawal address doesn't need to match the fee recipient address used by your validator.</p> <p>Tip</p> <p>It's recommended that you prepare your <code>BLS-to-Execution-Change</code> message on a secure device, disconnected from the internet. You can use an USB drive to transfer the produced JSON file to the machine where Nimbus is running and then use the following command to broadcast the message to the network:</p> <pre><code>curl \\\n  -X POST \\\n  -H \u201cContent-type: application/json\u201d \\\n  -d @&lt;Bls-to-Execution-Change-Filename&gt; \\\n  http://localhost:5052/eth/v1/beacon/pool/bls_to_execution_changes\n</code></pre>"},{"location":"withdrawals.html#periodic-withdrawals-of-staking-rewards-partial-withdrawals","title":"Periodic withdrawals of staking rewards (partial withdrawals)","text":"<p>Once the validator is configured with <code>0x01</code> withdrawal credentials, all staking rewards will be periodically withdrawn as long as the validator balance is above 32 ETH. No user action is required.</p> <p>Info</p> <p>It is not possible to manually request specific amounts of ETH to be withdrawn</p>"},{"location":"withdrawals.html#full-withdrawals","title":"Full withdrawals","text":"<p>To withdrawal the entire staked balance of your validator, you must perform a voluntary validator exit.</p> <p>Warning</p> <p>Voluntary exits are irreversible. You won't be able to validate again with the same key.</p> <p>Warning</p> <p>Make sure you've migrated your validator to <code>0x01</code> withdrawal credentials before exiting.</p> <p>The time required for the withdrawal to complete depends on multiple factors such as the total number of validators in the network, the number of other validators attempting to exit at the moment and the current time in the periodic withdrawals cycle. Under typical conditions, it's expected to take 2 to 7 days.</p> <p>Warning</p> <p>Do not remove the validator keys or shut down your validator software until the withdrawal operation is complete. Otherwise, you may incur protocol inactivity penalties.</p> <p>To perform the voluntary exit, make sure your beacon node is running with the <code>--rest</code> option enabled (e.g. <code>./run-mainnet-beacon-node.sh --rest</code>), then run:</p> <pre><code>build/nimbus_beacon_node deposits exit --validator=&lt;VALIDATOR_KEYSTORE_PATH&gt;\n</code></pre> <p>Note</p> <p>In the command above, you must replace <code>&lt;VALIDATOR_KEYSTORE_PATH&gt;</code> with the file-system path of an Ethereum ERC-2335 Keystore created by a tool such as staking-deposit-cli or ethdo.</p>"},{"location":"withdrawals.html#rest-url-parameter","title":"<code>rest-url</code> parameter","text":"<p>The <code>--rest-url</code> parameter can be used to point the exit command to a specific node for publishing the request, as long as it's compatible with the REST API.</p>"}]}